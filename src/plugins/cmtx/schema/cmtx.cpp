// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "cmtx.h"

namespace GroupPolicy
{
  namespace CommentDefinitions
  {
    // PolicyComments
    // 

    const PolicyComments::PolicyNamespacesType& PolicyComments::
    policyNamespaces () const
    {
      return this->policyNamespaces_.get ();
    }

    PolicyComments::PolicyNamespacesType& PolicyComments::
    policyNamespaces ()
    {
      return this->policyNamespaces_.get ();
    }

    void PolicyComments::
    policyNamespaces (const PolicyNamespacesType& x)
    {
      this->policyNamespaces_.set (x);
    }

    void PolicyComments::
    policyNamespaces (::std::unique_ptr< PolicyNamespacesType > x)
    {
      this->policyNamespaces_.set (std::move (x));
    }

    const PolicyComments::CommentsType& PolicyComments::
    comments () const
    {
      return this->comments_.get ();
    }

    PolicyComments::CommentsType& PolicyComments::
    comments ()
    {
      return this->comments_.get ();
    }

    void PolicyComments::
    comments (const CommentsType& x)
    {
      this->comments_.set (x);
    }

    void PolicyComments::
    comments (::std::unique_ptr< CommentsType > x)
    {
      this->comments_.set (std::move (x));
    }

    const PolicyComments::ResourcesType& PolicyComments::
    resources () const
    {
      return this->resources_.get ();
    }

    PolicyComments::ResourcesType& PolicyComments::
    resources ()
    {
      return this->resources_.get ();
    }

    void PolicyComments::
    resources (const ResourcesType& x)
    {
      this->resources_.set (x);
    }

    void PolicyComments::
    resources (::std::unique_ptr< ResourcesType > x)
    {
      this->resources_.set (std::move (x));
    }

    const PolicyComments::RevisionType& PolicyComments::
    revision () const
    {
      return this->revision_.get ();
    }

    PolicyComments::RevisionType& PolicyComments::
    revision ()
    {
      return this->revision_.get ();
    }

    void PolicyComments::
    revision (const RevisionType& x)
    {
      this->revision_.set (x);
    }

    const PolicyComments::SchemaVersionType& PolicyComments::
    schemaVersion () const
    {
      return this->schemaVersion_.get ();
    }

    PolicyComments::SchemaVersionType& PolicyComments::
    schemaVersion ()
    {
      return this->schemaVersion_.get ();
    }

    void PolicyComments::
    schemaVersion (const SchemaVersionType& x)
    {
      this->schemaVersion_.set (x);
    }


    // PolicyNamespaces
    // 

    const PolicyNamespaces::UsingType& PolicyNamespaces::
    using_ () const
    {
      return this->using__.get ();
    }

    PolicyNamespaces::UsingType& PolicyNamespaces::
    using_ ()
    {
      return this->using__.get ();
    }

    void PolicyNamespaces::
    using_ (const UsingType& x)
    {
      this->using__.set (x);
    }

    void PolicyNamespaces::
    using_ (::std::unique_ptr< UsingType > x)
    {
      this->using__.set (std::move (x));
    }


    // Comments
    // 

    const Comments::AdmTemplateType& Comments::
    admTemplate () const
    {
      return this->admTemplate_.get ();
    }

    Comments::AdmTemplateType& Comments::
    admTemplate ()
    {
      return this->admTemplate_.get ();
    }

    void Comments::
    admTemplate (const AdmTemplateType& x)
    {
      this->admTemplate_.set (x);
    }

    void Comments::
    admTemplate (::std::unique_ptr< AdmTemplateType > x)
    {
      this->admTemplate_.set (std::move (x));
    }


    // Resources
    // 

    const Resources::StringSequence& Resources::
    string () const
    {
      return this->string_;
    }

    Resources::StringSequence& Resources::
    string ()
    {
      return this->string_;
    }

    void Resources::
    string (const StringSequence& s)
    {
      this->string_ = s;
    }

    const Resources::StringTableOptional& Resources::
    stringTable () const
    {
      return this->stringTable_;
    }

    Resources::StringTableOptional& Resources::
    stringTable ()
    {
      return this->stringTable_;
    }

    void Resources::
    stringTable (const StringTableType& x)
    {
      this->stringTable_.set (x);
    }

    void Resources::
    stringTable (const StringTableOptional& x)
    {
      this->stringTable_ = x;
    }

    void Resources::
    stringTable (::std::unique_ptr< StringTableType > x)
    {
      this->stringTable_.set (std::move (x));
    }


    // Using
    // 

    const Using::PrefixType& Using::
    prefix () const
    {
      return this->prefix_.get ();
    }

    Using::PrefixType& Using::
    prefix ()
    {
      return this->prefix_.get ();
    }

    void Using::
    prefix (const PrefixType& x)
    {
      this->prefix_.set (x);
    }

    void Using::
    prefix (::std::unique_ptr< PrefixType > x)
    {
      this->prefix_.set (std::move (x));
    }

    const Using::NamespaceType& Using::
    namespace_ () const
    {
      return this->namespace__.get ();
    }

    Using::NamespaceType& Using::
    namespace_ ()
    {
      return this->namespace__.get ();
    }

    void Using::
    namespace_ (const NamespaceType& x)
    {
      this->namespace__.set (x);
    }

    void Using::
    namespace_ (::std::unique_ptr< NamespaceType > x)
    {
      this->namespace__.set (std::move (x));
    }


    // AdmTemplate
    // 

    const AdmTemplate::CommentSequence& AdmTemplate::
    comment () const
    {
      return this->comment_;
    }

    AdmTemplate::CommentSequence& AdmTemplate::
    comment ()
    {
      return this->comment_;
    }

    void AdmTemplate::
    comment (const CommentSequence& s)
    {
      this->comment_ = s;
    }


    // String
    // 

    const String::MinRequiredRevisionType& String::
    minRequiredRevision () const
    {
      return this->minRequiredRevision_.get ();
    }

    String::MinRequiredRevisionType& String::
    minRequiredRevision ()
    {
      return this->minRequiredRevision_.get ();
    }

    void String::
    minRequiredRevision (const MinRequiredRevisionType& x)
    {
      this->minRequiredRevision_.set (x);
    }


    // StringTable
    // 

    const StringTable::StringSequence& StringTable::
    string () const
    {
      return this->string_;
    }

    StringTable::StringSequence& StringTable::
    string ()
    {
      return this->string_;
    }

    void StringTable::
    string (const StringSequence& s)
    {
      this->string_ = s;
    }


    // Comment
    // 

    const Comment::PolicyRefType& Comment::
    policyRef () const
    {
      return this->policyRef_.get ();
    }

    Comment::PolicyRefType& Comment::
    policyRef ()
    {
      return this->policyRef_.get ();
    }

    void Comment::
    policyRef (const PolicyRefType& x)
    {
      this->policyRef_.set (x);
    }

    void Comment::
    policyRef (::std::unique_ptr< PolicyRefType > x)
    {
      this->policyRef_.set (std::move (x));
    }

    const Comment::CommentTextType& Comment::
    commentText () const
    {
      return this->commentText_.get ();
    }

    Comment::CommentTextType& Comment::
    commentText ()
    {
      return this->commentText_.get ();
    }

    void Comment::
    commentText (const CommentTextType& x)
    {
      this->commentText_.set (x);
    }

    void Comment::
    commentText (::std::unique_ptr< CommentTextType > x)
    {
      this->commentText_.set (std::move (x));
    }


    // String1
    // 

    const String1::IdType& String1::
    id () const
    {
      return this->id_.get ();
    }

    String1::IdType& String1::
    id ()
    {
      return this->id_.get ();
    }

    void String1::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void String1::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace GroupPolicy
{
  namespace CommentDefinitions
  {
    // PolicyComments
    //

    PolicyComments::
    PolicyComments (const PolicyNamespacesType& policyNamespaces,
                    const CommentsType& comments,
                    const ResourcesType& resources,
                    const RevisionType& revision,
                    const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      policyNamespaces_ (policyNamespaces, this),
      comments_ (comments, this),
      resources_ (resources, this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyComments::
    PolicyComments (::std::unique_ptr< PolicyNamespacesType > policyNamespaces,
                    ::std::unique_ptr< CommentsType > comments,
                    ::std::unique_ptr< ResourcesType > resources,
                    const RevisionType& revision,
                    const SchemaVersionType& schemaVersion)
    : ::xml_schema::Type (),
      policyNamespaces_ (std::move (policyNamespaces), this),
      comments_ (std::move (comments), this),
      resources_ (std::move (resources), this),
      revision_ (revision, this),
      schemaVersion_ (schemaVersion, this)
    {
    }

    PolicyComments::
    PolicyComments (const PolicyComments& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      policyNamespaces_ (x.policyNamespaces_, f, this),
      comments_ (x.comments_, f, this),
      resources_ (x.resources_, f, this),
      revision_ (x.revision_, f, this),
      schemaVersion_ (x.schemaVersion_, f, this)
    {
    }

    PolicyComments::
    PolicyComments (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      policyNamespaces_ (this),
      comments_ (this),
      resources_ (this),
      revision_ (this),
      schemaVersion_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
        this->parse (p, f);
      }
    }

    void PolicyComments::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // policyNamespaces
        //
        if (n.name () == "policyNamespaces" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< PolicyNamespacesType > r (
            PolicyNamespacesTraits::create (i, f, this));

          if (!policyNamespaces_.present ())
          {
            this->policyNamespaces_.set (::std::move (r));
            continue;
          }
        }

        // comments
        //
        if (n.name () == "comments" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< CommentsType > r (
            CommentsTraits::create (i, f, this));

          if (!comments_.present ())
          {
            this->comments_.set (::std::move (r));
            continue;
          }
        }

        // resources
        //
        if (n.name () == "resources" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< ResourcesType > r (
            ResourcesTraits::create (i, f, this));

          if (!resources_.present ())
          {
            this->resources_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!policyNamespaces_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "policyNamespaces",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
      }

      if (!comments_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "comments",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
      }

      if (!resources_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "resources",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "revision" && n.namespace_ ().empty ())
        {
          this->revision_.set (RevisionTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "schemaVersion" && n.namespace_ ().empty ())
        {
          this->schemaVersion_.set (SchemaVersionTraits::create (i, f, this));
          continue;
        }
      }

      if (!revision_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "revision",
          "");
      }

      if (!schemaVersion_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "schemaVersion",
          "");
      }
    }

    PolicyComments* PolicyComments::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyComments (*this, f, c);
    }

    PolicyComments& PolicyComments::
    operator= (const PolicyComments& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->policyNamespaces_ = x.policyNamespaces_;
        this->comments_ = x.comments_;
        this->resources_ = x.resources_;
        this->revision_ = x.revision_;
        this->schemaVersion_ = x.schemaVersion_;
      }

      return *this;
    }

    PolicyComments::
    ~PolicyComments ()
    {
    }

    // PolicyNamespaces
    //

    PolicyNamespaces::
    PolicyNamespaces (const UsingType& using_)
    : ::xml_schema::Type (),
      using__ (using_, this)
    {
    }

    PolicyNamespaces::
    PolicyNamespaces (::std::unique_ptr< UsingType > using_)
    : ::xml_schema::Type (),
      using__ (std::move (using_), this)
    {
    }

    PolicyNamespaces::
    PolicyNamespaces (const PolicyNamespaces& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      using__ (x.using__, f, this)
    {
    }

    PolicyNamespaces::
    PolicyNamespaces (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      using__ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void PolicyNamespaces::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // using
        //
        if (n.name () == "using" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< UsingType > r (
            UsingTraits::create (i, f, this));

          if (!using__.present ())
          {
            this->using__.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!using__.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "using",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
      }
    }

    PolicyNamespaces* PolicyNamespaces::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class PolicyNamespaces (*this, f, c);
    }

    PolicyNamespaces& PolicyNamespaces::
    operator= (const PolicyNamespaces& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->using__ = x.using__;
      }

      return *this;
    }

    PolicyNamespaces::
    ~PolicyNamespaces ()
    {
    }

    // Comments
    //

    Comments::
    Comments (const AdmTemplateType& admTemplate)
    : ::xml_schema::Type (),
      admTemplate_ (admTemplate, this)
    {
    }

    Comments::
    Comments (::std::unique_ptr< AdmTemplateType > admTemplate)
    : ::xml_schema::Type (),
      admTemplate_ (std::move (admTemplate), this)
    {
    }

    Comments::
    Comments (const Comments& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      admTemplate_ (x.admTemplate_, f, this)
    {
    }

    Comments::
    Comments (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      admTemplate_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Comments::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // admTemplate
        //
        if (n.name () == "admTemplate" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< AdmTemplateType > r (
            AdmTemplateTraits::create (i, f, this));

          if (!admTemplate_.present ())
          {
            this->admTemplate_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!admTemplate_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "admTemplate",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
      }
    }

    Comments* Comments::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Comments (*this, f, c);
    }

    Comments& Comments::
    operator= (const Comments& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->admTemplate_ = x.admTemplate_;
      }

      return *this;
    }

    Comments::
    ~Comments ()
    {
    }

    // Resources
    //

    Resources::
    Resources ()
    : ::xml_schema::Type (),
      string_ (this),
      stringTable_ (this)
    {
    }

    Resources::
    Resources (const Resources& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      string_ (x.string_, f, this),
      stringTable_ (x.stringTable_, f, this)
    {
    }

    Resources::
    Resources (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      string_ (this),
      stringTable_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Resources::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // string
        //
        if (n.name () == "string" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< StringType > r (
            StringTraits::create (i, f, this));

          this->string_.push_back (::std::move (r));
          continue;
        }

        // stringTable
        //
        if (n.name () == "stringTable" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< StringTableType > r (
            StringTableTraits::create (i, f, this));

          if (!this->stringTable_)
          {
            this->stringTable_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    Resources* Resources::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Resources (*this, f, c);
    }

    Resources& Resources::
    operator= (const Resources& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->string_ = x.string_;
        this->stringTable_ = x.stringTable_;
      }

      return *this;
    }

    Resources::
    ~Resources ()
    {
    }

    // Using
    //

    Using::
    Using (const PrefixType& prefix,
           const NamespaceType& namespace_)
    : ::xml_schema::Type (),
      prefix_ (prefix, this),
      namespace__ (namespace_, this)
    {
    }

    Using::
    Using (const Using& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      prefix_ (x.prefix_, f, this),
      namespace__ (x.namespace__, f, this)
    {
    }

    Using::
    Using (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      prefix_ (this),
      namespace__ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void Using::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "prefix" && n.namespace_ ().empty ())
        {
          this->prefix_.set (PrefixTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "namespace" && n.namespace_ ().empty ())
        {
          this->namespace__.set (NamespaceTraits::create (i, f, this));
          continue;
        }
      }

      if (!prefix_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "prefix",
          "");
      }

      if (!namespace__.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "namespace",
          "");
      }
    }

    Using* Using::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Using (*this, f, c);
    }

    Using& Using::
    operator= (const Using& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->prefix_ = x.prefix_;
        this->namespace__ = x.namespace__;
      }

      return *this;
    }

    Using::
    ~Using ()
    {
    }

    // AdmTemplate
    //

    AdmTemplate::
    AdmTemplate ()
    : ::xml_schema::Type (),
      comment_ (this)
    {
    }

    AdmTemplate::
    AdmTemplate (const AdmTemplate& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      comment_ (x.comment_, f, this)
    {
    }

    AdmTemplate::
    AdmTemplate (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      comment_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void AdmTemplate::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // comment
        //
        if (n.name () == "comment" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< CommentType > r (
            CommentTraits::create (i, f, this));

          this->comment_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    AdmTemplate* AdmTemplate::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AdmTemplate (*this, f, c);
    }

    AdmTemplate& AdmTemplate::
    operator= (const AdmTemplate& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->comment_ = x.comment_;
      }

      return *this;
    }

    AdmTemplate::
    ~AdmTemplate ()
    {
    }

    // String
    //

    String::
    String (const MinRequiredRevisionType& minRequiredRevision)
    : ::xml_schema::String (),
      minRequiredRevision_ (minRequiredRevision, this)
    {
    }

    String::
    String (const char* _xsd_String_base,
            const MinRequiredRevisionType& minRequiredRevision)
    : ::xml_schema::String (_xsd_String_base),
      minRequiredRevision_ (minRequiredRevision, this)
    {
    }

    String::
    String (const ::std::string& _xsd_String_base,
            const MinRequiredRevisionType& minRequiredRevision)
    : ::xml_schema::String (_xsd_String_base),
      minRequiredRevision_ (minRequiredRevision, this)
    {
    }

    String::
    String (const ::xml_schema::String& _xsd_String_base,
            const MinRequiredRevisionType& minRequiredRevision)
    : ::xml_schema::String (_xsd_String_base),
      minRequiredRevision_ (minRequiredRevision, this)
    {
    }

    String::
    String (const String& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::String (x, f, c),
      minRequiredRevision_ (x.minRequiredRevision_, f, this)
    {
    }

    String::
    String (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
      minRequiredRevision_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void String::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "minRequiredRevision" && n.namespace_ ().empty ())
        {
          this->minRequiredRevision_.set (MinRequiredRevisionTraits::create (i, f, this));
          continue;
        }
      }

      if (!minRequiredRevision_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "minRequiredRevision",
          "");
      }
    }

    String* String::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class String (*this, f, c);
    }

    String& String::
    operator= (const String& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::String& > (*this) = x;
        this->minRequiredRevision_ = x.minRequiredRevision_;
      }

      return *this;
    }

    String::
    ~String ()
    {
    }

    // StringTable
    //

    StringTable::
    StringTable ()
    : ::xml_schema::Type (),
      string_ (this)
    {
    }

    StringTable::
    StringTable (const StringTable& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      string_ (x.string_, f, this)
    {
    }

    StringTable::
    StringTable (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      string_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void StringTable::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // string
        //
        if (n.name () == "string" && n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
        {
          ::std::unique_ptr< StringType > r (
            StringTraits::create (i, f, this));

          this->string_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    StringTable* StringTable::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class StringTable (*this, f, c);
    }

    StringTable& StringTable::
    operator= (const StringTable& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->string_ = x.string_;
      }

      return *this;
    }

    StringTable::
    ~StringTable ()
    {
    }

    // Comment
    //

    Comment::
    Comment (const PolicyRefType& policyRef,
             const CommentTextType& commentText)
    : ::xml_schema::Type (),
      policyRef_ (policyRef, this),
      commentText_ (commentText, this)
    {
    }

    Comment::
    Comment (const Comment& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      policyRef_ (x.policyRef_, f, this),
      commentText_ (x.commentText_, f, this)
    {
    }

    Comment::
    Comment (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      policyRef_ (this),
      commentText_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void Comment::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "policyRef" && n.namespace_ ().empty ())
        {
          this->policyRef_.set (PolicyRefTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "commentText" && n.namespace_ ().empty ())
        {
          this->commentText_.set (CommentTextTraits::create (i, f, this));
          continue;
        }
      }

      if (!policyRef_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "policyRef",
          "");
      }

      if (!commentText_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "commentText",
          "");
      }
    }

    Comment* Comment::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Comment (*this, f, c);
    }

    Comment& Comment::
    operator= (const Comment& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->policyRef_ = x.policyRef_;
        this->commentText_ = x.commentText_;
      }

      return *this;
    }

    Comment::
    ~Comment ()
    {
    }

    // String1
    //

    String1::
    String1 (const IdType& id)
    : ::xml_schema::String (),
      id_ (id, this)
    {
    }

    String1::
    String1 (const char* _xsd_String_base,
             const IdType& id)
    : ::xml_schema::String (_xsd_String_base),
      id_ (id, this)
    {
    }

    String1::
    String1 (const ::std::string& _xsd_String_base,
             const IdType& id)
    : ::xml_schema::String (_xsd_String_base),
      id_ (id, this)
    {
    }

    String1::
    String1 (const ::xml_schema::String& _xsd_String_base,
             const IdType& id)
    : ::xml_schema::String (_xsd_String_base),
      id_ (id, this)
    {
    }

    String1::
    String1 (const String1& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::String (x, f, c),
      id_ (x.id_, f, this)
    {
    }

    String1::
    String1 (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::String (e, f | ::xml_schema::Flags::base, c),
      id_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
        this->parse (p, f);
      }
    }

    void String1::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (IdTraits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    String1* String1::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class String1 (*this, f, c);
    }

    String1& String1::
    operator= (const String1& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::String& > (*this) = x;
        this->id_ = x.id_;
      }

      return *this;
    }

    String1::
    ~String1 ()
    {
    }
  }
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

namespace GroupPolicy
{
  namespace CommentDefinitions
  {
    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyComments& i)
    {
      o << ::std::endl << "policyNamespaces: " << i.policyNamespaces ();
      o << ::std::endl << "comments: " << i.comments ();
      o << ::std::endl << "resources: " << i.resources ();
      o << ::std::endl << "revision: " << i.revision ();
      o << ::std::endl << "schemaVersion: " << i.schemaVersion ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const PolicyNamespaces& i)
    {
      o << ::std::endl << "using: " << i.using_ ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const Comments& i)
    {
      o << ::std::endl << "admTemplate: " << i.admTemplate ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const Resources& i)
    {
      for (Resources::StringConstIterator
           b (i.string ().begin ()), e (i.string ().end ());
           b != e; ++b)
      {
        o << ::std::endl << "string: " << *b;
      }

      if (i.stringTable ())
      {
        o << ::std::endl << "stringTable: " << *i.stringTable ();
      }

      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const Using& i)
    {
      o << ::std::endl << "prefix: " << i.prefix ();
      o << ::std::endl << "namespace: " << i.namespace_ ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const AdmTemplate& i)
    {
      for (AdmTemplate::CommentConstIterator
           b (i.comment ().begin ()), e (i.comment ().end ());
           b != e; ++b)
      {
        o << ::std::endl << "comment: " << *b;
      }

      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const String& i)
    {
      o << static_cast< const ::xml_schema::String& > (i);

      o << ::std::endl << "minRequiredRevision: " << i.minRequiredRevision ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const StringTable& i)
    {
      for (StringTable::StringConstIterator
           b (i.string ().begin ()), e (i.string ().end ());
           b != e; ++b)
      {
        o << ::std::endl << "string: " << *b;
      }

      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const Comment& i)
    {
      o << ::std::endl << "policyRef: " << i.policyRef ();
      o << ::std::endl << "commentText: " << i.commentText ();
      return o;
    }

    ::std::ostream&
    operator<< (::std::ostream& o, const String1& i)
    {
      o << static_cast< const ::xml_schema::String& > (i);

      o << ::std::endl << "id: " << i.id ();
      return o;
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace GroupPolicy
{
  namespace CommentDefinitions
  {
    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
        ::GroupPolicy::CommentDefinitions::policyComments (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
        ::GroupPolicy::CommentDefinitions::policyComments (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
        ::GroupPolicy::CommentDefinitions::policyComments (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::CommentDefinitions::policyComments (isrc, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::CommentDefinitions::policyComments (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::GroupPolicy::CommentDefinitions::policyComments (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::CommentDefinitions::policyComments (isrc, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::CommentDefinitions::policyComments (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::GroupPolicy::CommentDefinitions::policyComments (isrc, h, f, p);
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
        ::GroupPolicy::CommentDefinitions::policyComments (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
        ::GroupPolicy::CommentDefinitions::policyComments (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
        ::GroupPolicy::CommentDefinitions::policyComments (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > (
          ::GroupPolicy::CommentDefinitions::policyComments (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "policyComments" &&
          n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
      {
        ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > r (
          ::xsd::cxx::tree::traits< ::GroupPolicy::CommentDefinitions::PolicyComments, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "policyComments",
        "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
    }

    ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments >
    policyComments (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "policyComments" &&
          n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
      {
        ::std::unique_ptr< ::GroupPolicy::CommentDefinitions::PolicyComments > r (
          ::xsd::cxx::tree::traits< ::GroupPolicy::CommentDefinitions::PolicyComments, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "policyComments",
        "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace GroupPolicy
{
  namespace CommentDefinitions
  {
    void
    policyComments (::std::ostream& o,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::GroupPolicy::CommentDefinitions::policyComments (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    policyComments (::std::ostream& o,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::GroupPolicy::CommentDefinitions::policyComments (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    policyComments (::std::ostream& o,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::GroupPolicy::CommentDefinitions::policyComments (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    policyComments (::xercesc::XMLFormatTarget& t,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::GroupPolicy::CommentDefinitions::policyComments (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    policyComments (::xercesc::XMLFormatTarget& t,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::GroupPolicy::CommentDefinitions::policyComments (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    policyComments (::xercesc::XMLFormatTarget& t,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::GroupPolicy::CommentDefinitions::policyComments (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    policyComments (::xercesc::DOMDocument& d,
                    const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "policyComments" &&
          n.namespace_ () == "http://www.microsoft.com/GroupPolicy/CommentDefinitions")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "policyComments",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    policyComments (const ::GroupPolicy::CommentDefinitions::PolicyComments& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "policyComments",
          "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
          m, f));

      ::GroupPolicy::CommentDefinitions::policyComments (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const PolicyComments& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // policyNamespaces
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "policyNamespaces",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << i.policyNamespaces ();
      }

      // comments
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "comments",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << i.comments ();
      }

      // resources
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "resources",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << i.resources ();
      }

      // revision
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "revision",
            e));

        a << ::xml_schema::AsDecimal(i.revision ());
      }

      // schemaVersion
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "schemaVersion",
            e));

        a << ::xml_schema::AsDecimal(i.schemaVersion ());
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const PolicyNamespaces& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // using
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "using",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << i.using_ ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Comments& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // admTemplate
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "admTemplate",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << i.admTemplate ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Resources& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // string
      //
      for (Resources::StringConstIterator
           b (i.string ().begin ()), n (i.string ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "string",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << *b;
      }

      // stringTable
      //
      if (i.stringTable ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "stringTable",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << *i.stringTable ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Using& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // prefix
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "prefix",
            e));

        a << i.prefix ();
      }

      // namespace
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "namespace",
            e));

        a << i.namespace_ ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const AdmTemplate& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // comment
      //
      for (AdmTemplate::CommentConstIterator
           b (i.comment ().begin ()), n (i.comment ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "comment",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const String& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);

      // minRequiredRevision
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "minRequiredRevision",
            e));

        a << ::xml_schema::AsDecimal(i.minRequiredRevision ());
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const StringTable& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // string
      //
      for (StringTable::StringConstIterator
           b (i.string ().begin ()), n (i.string ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "string",
            "http://www.microsoft.com/GroupPolicy/CommentDefinitions",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Comment& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // policyRef
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "policyRef",
            e));

        a << i.policyRef ();
      }

      // commentText
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "commentText",
            e));

        a << i.commentText ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const String1& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


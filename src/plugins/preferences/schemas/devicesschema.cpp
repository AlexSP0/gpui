// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "devicesschema.h"

// Properties_t
// 

const Properties_t::DeviceActionType& Properties_t::
deviceAction () const
{
  return this->deviceAction_.get ();
}

Properties_t::DeviceActionType& Properties_t::
deviceAction ()
{
  return this->deviceAction_.get ();
}

void Properties_t::
deviceAction (const DeviceActionType& x)
{
  this->deviceAction_.set (x);
}

void Properties_t::
deviceAction (::std::unique_ptr< DeviceActionType > x)
{
  this->deviceAction_.set (std::move (x));
}

const Properties_t::DeviceClassOptional& Properties_t::
deviceClass () const
{
  return this->deviceClass_;
}

Properties_t::DeviceClassOptional& Properties_t::
deviceClass ()
{
  return this->deviceClass_;
}

void Properties_t::
deviceClass (const DeviceClassType& x)
{
  this->deviceClass_.set (x);
}

void Properties_t::
deviceClass (const DeviceClassOptional& x)
{
  this->deviceClass_ = x;
}

void Properties_t::
deviceClass (::std::unique_ptr< DeviceClassType > x)
{
  this->deviceClass_.set (std::move (x));
}

const Properties_t::DeviceTypeOptional& Properties_t::
deviceType () const
{
  return this->deviceType_;
}

Properties_t::DeviceTypeOptional& Properties_t::
deviceType ()
{
  return this->deviceType_;
}

void Properties_t::
deviceType (const DeviceTypeType& x)
{
  this->deviceType_.set (x);
}

void Properties_t::
deviceType (const DeviceTypeOptional& x)
{
  this->deviceType_ = x;
}

void Properties_t::
deviceType (::std::unique_ptr< DeviceTypeType > x)
{
  this->deviceType_.set (std::move (x));
}

const Properties_t::DeviceClassGUIDType& Properties_t::
deviceClassGUID () const
{
  return this->deviceClassGUID_.get ();
}

Properties_t::DeviceClassGUIDType& Properties_t::
deviceClassGUID ()
{
  return this->deviceClassGUID_.get ();
}

void Properties_t::
deviceClassGUID (const DeviceClassGUIDType& x)
{
  this->deviceClassGUID_.set (x);
}

void Properties_t::
deviceClassGUID (::std::unique_ptr< DeviceClassGUIDType > x)
{
  this->deviceClassGUID_.set (std::move (x));
}

const Properties_t::DeviceTypeIDType& Properties_t::
deviceTypeID () const
{
  return this->deviceTypeID_.get ();
}

Properties_t::DeviceTypeIDType& Properties_t::
deviceTypeID ()
{
  return this->deviceTypeID_.get ();
}

void Properties_t::
deviceTypeID (const DeviceTypeIDType& x)
{
  this->deviceTypeID_.set (x);
}

void Properties_t::
deviceTypeID (::std::unique_ptr< DeviceTypeIDType > x)
{
  this->deviceTypeID_.set (std::move (x));
}

const Properties_t::DisabledOptional& Properties_t::
disabled () const
{
  return this->disabled_;
}

Properties_t::DisabledOptional& Properties_t::
disabled ()
{
  return this->disabled_;
}

void Properties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Properties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Device_t
// 

const Device_t::PropertiesType& Device_t::
Properties () const
{
  return this->Properties_.get ();
}

Device_t::PropertiesType& Device_t::
Properties ()
{
  return this->Properties_.get ();
}

void Device_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void Device_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const Device_t::ClsidType& Device_t::
clsid () const
{
  return this->clsid_.get ();
}

Device_t::ClsidType& Device_t::
clsid ()
{
  return this->clsid_.get ();
}

void Device_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Device_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Device_t::NameType& Device_t::
name () const
{
  return this->name_.get ();
}

Device_t::NameType& Device_t::
name ()
{
  return this->name_.get ();
}

void Device_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Device_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Device_t::ImageOptional& Device_t::
image () const
{
  return this->image_;
}

Device_t::ImageOptional& Device_t::
image ()
{
  return this->image_;
}

void Device_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Device_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Device_t::ChangedOptional& Device_t::
changed () const
{
  return this->changed_;
}

Device_t::ChangedOptional& Device_t::
changed ()
{
  return this->changed_;
}

void Device_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Device_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Device_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Device_t::UidType& Device_t::
uid () const
{
  return this->uid_.get ();
}

Device_t::UidType& Device_t::
uid ()
{
  return this->uid_.get ();
}

void Device_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Device_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const Device_t::DescOptional& Device_t::
desc () const
{
  return this->desc_;
}

Device_t::DescOptional& Device_t::
desc ()
{
  return this->desc_;
}

void Device_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void Device_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void Device_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const Device_t::BypassErrorsOptional& Device_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

Device_t::BypassErrorsOptional& Device_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void Device_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void Device_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const Device_t::UserContextOptional& Device_t::
userContext () const
{
  return this->userContext_;
}

Device_t::UserContextOptional& Device_t::
userContext ()
{
  return this->userContext_;
}

void Device_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void Device_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const Device_t::RemovePolicyOptional& Device_t::
removePolicy () const
{
  return this->removePolicy_;
}

Device_t::RemovePolicyOptional& Device_t::
removePolicy ()
{
  return this->removePolicy_;
}

void Device_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void Device_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const Device_t::StatusOptional& Device_t::
status () const
{
  return this->status_;
}

Device_t::StatusOptional& Device_t::
status ()
{
  return this->status_;
}

void Device_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Device_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Device_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// Devices
// 

const Devices::DeviceType& Devices::
Device () const
{
  return this->Device_.get ();
}

Devices::DeviceType& Devices::
Device ()
{
  return this->Device_.get ();
}

void Devices::
Device (const DeviceType& x)
{
  this->Device_.set (x);
}

void Devices::
Device (::std::unique_ptr< DeviceType > x)
{
  this->Device_.set (std::move (x));
}

const Devices::ClsidType& Devices::
clsid () const
{
  return this->clsid_.get ();
}

Devices::ClsidType& Devices::
clsid ()
{
  return this->clsid_.get ();
}

void Devices::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Devices::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Devices::DisabledOptional& Devices::
disabled () const
{
  return this->disabled_;
}

Devices::DisabledOptional& Devices::
disabled ()
{
  return this->disabled_;
}

void Devices::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Devices::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// Properties_t
//

Properties_t::
Properties_t (const DeviceActionType& deviceAction,
              const DeviceClassGUIDType& deviceClassGUID,
              const DeviceTypeIDType& deviceTypeID)
: ::xml_schema::Type (),
  deviceAction_ (deviceAction, this),
  deviceClass_ (this),
  deviceType_ (this),
  deviceClassGUID_ (deviceClassGUID, this),
  deviceTypeID_ (deviceTypeID, this),
  disabled_ (this)
{
}

Properties_t::
Properties_t (const Properties_t& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  deviceAction_ (x.deviceAction_, f, this),
  deviceClass_ (x.deviceClass_, f, this),
  deviceType_ (x.deviceType_, f, this),
  deviceClassGUID_ (x.deviceClassGUID_, f, this),
  deviceTypeID_ (x.deviceTypeID_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Properties_t::
Properties_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  deviceAction_ (this),
  deviceClass_ (this),
  deviceType_ (this),
  deviceClassGUID_ (this),
  deviceTypeID_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Properties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "deviceAction" && n.namespace_ ().empty ())
    {
      this->deviceAction_.set (DeviceActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deviceClass" && n.namespace_ ().empty ())
    {
      this->deviceClass_.set (DeviceClassTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deviceType" && n.namespace_ ().empty ())
    {
      this->deviceType_.set (DeviceTypeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deviceClassGUID" && n.namespace_ ().empty ())
    {
      this->deviceClassGUID_.set (DeviceClassGUIDTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deviceTypeID" && n.namespace_ ().empty ())
    {
      this->deviceTypeID_.set (DeviceTypeIDTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!deviceAction_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "deviceAction",
      "");
  }

  if (!deviceClassGUID_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "deviceClassGUID",
      "");
  }

  if (!deviceTypeID_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "deviceTypeID",
      "");
  }
}

Properties_t* Properties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Properties_t (*this, f, c);
}

Properties_t& Properties_t::
operator= (const Properties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->deviceAction_ = x.deviceAction_;
    this->deviceClass_ = x.deviceClass_;
    this->deviceType_ = x.deviceType_;
    this->deviceClassGUID_ = x.deviceClassGUID_;
    this->deviceTypeID_ = x.deviceTypeID_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Properties_t::
~Properties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Properties_t >
_xsd_Properties_t_type_factory_init (
  "Properties_t",
  "");

// Device_t
//

Device_t::
Device_t (const PropertiesType& Properties,
          const ClsidType& clsid,
          const NameType& name,
          const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

Device_t::
Device_t (::std::unique_ptr< PropertiesType > Properties,
          const ClsidType& clsid,
          const NameType& name,
          const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

Device_t::
Device_t (const Device_t& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

Device_t::
Device_t (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Device_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Device_t* Device_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Device_t (*this, f, c);
}

Device_t& Device_t::
operator= (const Device_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

Device_t::
~Device_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Device_t >
_xsd_Device_t_type_factory_init (
  "Device_t",
  "");

// Devices
//

Devices::
Devices (const DeviceType& Device,
         const ClsidType& clsid)
: ::xml_schema::Type (),
  Device_ (Device, this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Devices::
Devices (::std::unique_ptr< DeviceType > Device,
         const ClsidType& clsid)
: ::xml_schema::Type (),
  Device_ (std::move (Device), this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Devices::
Devices (const Devices& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Device_ (x.Device_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Devices::
Devices (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Device_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Devices::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Device
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Device",
          "",
          &::xsd::cxx::tree::factory_impl< DeviceType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Device_.present ())
        {
          ::std::unique_ptr< DeviceType > r (
            dynamic_cast< DeviceType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Device_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Device_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Device",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

Devices* Devices::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Devices (*this, f, c);
}

Devices& Devices::
operator= (const Devices& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Device_ = x.Device_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Devices::
~Devices ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const Properties_t& i)
{
  o << ::std::endl << "deviceAction: " << i.deviceAction ();
  if (i.deviceClass ())
  {
    o << ::std::endl << "deviceClass: " << *i.deviceClass ();
  }

  if (i.deviceType ())
  {
    o << ::std::endl << "deviceType: " << *i.deviceType ();
  }

  o << ::std::endl << "deviceClassGUID: " << i.deviceClassGUID ();
  o << ::std::endl << "deviceTypeID: " << i.deviceTypeID ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Properties_t >
_xsd_Properties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Device_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Device_t >
_xsd_Device_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Devices& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Device: ";
    om.insert (o, i.Device ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Devices >
Devices_ (const ::std::string& u,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Devices > (
    ::Devices_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Devices >
Devices_ (const ::std::string& u,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Devices > (
    ::Devices_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Devices >
Devices_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Devices > (
    ::Devices_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Devices >
Devices_ (::std::istream& is,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Devices_ (isrc, f, p);
}

::std::unique_ptr< ::Devices >
Devices_ (::std::istream& is,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Devices_ (isrc, h, f, p);
}

::std::unique_ptr< ::Devices >
Devices_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Devices_ (isrc, h, f, p);
}

::std::unique_ptr< ::Devices >
Devices_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Devices_ (isrc, f, p);
}

::std::unique_ptr< ::Devices >
Devices_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Devices_ (isrc, h, f, p);
}

::std::unique_ptr< ::Devices >
Devices_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Devices_ (isrc, h, f, p);
}

::std::unique_ptr< ::Devices >
Devices_ (::xercesc::InputSource& i,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Devices > (
    ::Devices_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Devices >
Devices_ (::xercesc::InputSource& i,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Devices > (
    ::Devices_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Devices >
Devices_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Devices > (
    ::Devices_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Devices >
Devices_ (const ::xercesc::DOMDocument& doc,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Devices > (
      ::Devices_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Devices" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Devices > r (
      ::xsd::cxx::tree::traits< ::Devices, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Devices",
    "");
}

::std::unique_ptr< ::Devices >
Devices_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Devices" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Devices > r (
      ::xsd::cxx::tree::traits< ::Devices, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Devices",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const Properties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // deviceAction
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deviceAction",
        e));

    a << i.deviceAction ();
  }

  // deviceClass
  //
  if (i.deviceClass ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deviceClass",
        e));

    a << *i.deviceClass ();
  }

  // deviceType
  //
  if (i.deviceType ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deviceType",
        e));

    a << *i.deviceType ();
  }

  // deviceClassGUID
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deviceClassGUID",
        e));

    a << i.deviceClassGUID ();
  }

  // deviceTypeID
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deviceTypeID",
        e));

    a << i.deviceTypeID ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Properties_t >
_xsd_Properties_t_type_serializer_init (
  "Properties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Device_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Device_t::PropertiesType& x (i.Properties ());
    if (typeid (Device_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Device_t >
_xsd_Device_t_type_serializer_init (
  "Device_t",
  "");


void
Devices_ (::std::ostream& o,
          const ::Devices& s,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Devices_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Devices_ (::std::ostream& o,
          const ::Devices& s,
          ::xml_schema::ErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Devices_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Devices_ (::std::ostream& o,
          const ::Devices& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Devices_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Devices_ (::xercesc::XMLFormatTarget& t,
          const ::Devices& s,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Devices_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Devices_ (::xercesc::XMLFormatTarget& t,
          const ::Devices& s,
          ::xml_schema::ErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Devices_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Devices_ (::xercesc::XMLFormatTarget& t,
          const ::Devices& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Devices_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Devices_ (::xercesc::DOMDocument& d,
          const ::Devices& s,
          ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Devices" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Devices",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
Devices_ (const ::Devices& s,
          const ::xml_schema::NamespaceInfomap& m,
          ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "Devices",
      "",
      m, f));

  ::Devices_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const Devices& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Device
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Devices::DeviceType& x (i.Device ());
    if (typeid (Devices::DeviceType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Device",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Device",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


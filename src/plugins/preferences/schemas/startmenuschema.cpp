// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "startmenuschema.h"

// StartMenuProperties_t
// 

const StartMenuProperties_t::LargeMFUIconsOptional& StartMenuProperties_t::
largeMFUIcons () const
{
  return this->largeMFUIcons_;
}

StartMenuProperties_t::LargeMFUIconsOptional& StartMenuProperties_t::
largeMFUIcons ()
{
  return this->largeMFUIcons_;
}

void StartMenuProperties_t::
largeMFUIcons (const LargeMFUIconsType& x)
{
  this->largeMFUIcons_.set (x);
}

void StartMenuProperties_t::
largeMFUIcons (const LargeMFUIconsOptional& x)
{
  this->largeMFUIcons_ = x;
}

const StartMenuProperties_t::MinMFUOptional& StartMenuProperties_t::
minMFU () const
{
  return this->minMFU_;
}

StartMenuProperties_t::MinMFUOptional& StartMenuProperties_t::
minMFU ()
{
  return this->minMFU_;
}

void StartMenuProperties_t::
minMFU (const MinMFUType& x)
{
  this->minMFU_.set (x);
}

void StartMenuProperties_t::
minMFU (const MinMFUOptional& x)
{
  this->minMFU_ = x;
}

const StartMenuProperties_t::AutoCascadeOptional& StartMenuProperties_t::
autoCascade () const
{
  return this->autoCascade_;
}

StartMenuProperties_t::AutoCascadeOptional& StartMenuProperties_t::
autoCascade ()
{
  return this->autoCascade_;
}

void StartMenuProperties_t::
autoCascade (const AutoCascadeType& x)
{
  this->autoCascade_.set (x);
}

void StartMenuProperties_t::
autoCascade (const AutoCascadeOptional& x)
{
  this->autoCascade_ = x;
}

const StartMenuProperties_t::NotifyNewAppsOptional& StartMenuProperties_t::
notifyNewApps () const
{
  return this->notifyNewApps_;
}

StartMenuProperties_t::NotifyNewAppsOptional& StartMenuProperties_t::
notifyNewApps ()
{
  return this->notifyNewApps_;
}

void StartMenuProperties_t::
notifyNewApps (const NotifyNewAppsType& x)
{
  this->notifyNewApps_.set (x);
}

void StartMenuProperties_t::
notifyNewApps (const NotifyNewAppsOptional& x)
{
  this->notifyNewApps_ = x;
}

const StartMenuProperties_t::ShowControlPanelOptional& StartMenuProperties_t::
showControlPanel () const
{
  return this->showControlPanel_;
}

StartMenuProperties_t::ShowControlPanelOptional& StartMenuProperties_t::
showControlPanel ()
{
  return this->showControlPanel_;
}

void StartMenuProperties_t::
showControlPanel (const ShowControlPanelType& x)
{
  this->showControlPanel_.set (x);
}

void StartMenuProperties_t::
showControlPanel (const ShowControlPanelOptional& x)
{
  this->showControlPanel_ = x;
}

void StartMenuProperties_t::
showControlPanel (::std::unique_ptr< ShowControlPanelType > x)
{
  this->showControlPanel_.set (std::move (x));
}

const StartMenuProperties_t::EnableDragDropOptional& StartMenuProperties_t::
enableDragDrop () const
{
  return this->enableDragDrop_;
}

StartMenuProperties_t::EnableDragDropOptional& StartMenuProperties_t::
enableDragDrop ()
{
  return this->enableDragDrop_;
}

void StartMenuProperties_t::
enableDragDrop (const EnableDragDropType& x)
{
  this->enableDragDrop_.set (x);
}

void StartMenuProperties_t::
enableDragDrop (const EnableDragDropOptional& x)
{
  this->enableDragDrop_ = x;
}

const StartMenuProperties_t::StartMenuFavoritesOptional& StartMenuProperties_t::
startMenuFavorites () const
{
  return this->startMenuFavorites_;
}

StartMenuProperties_t::StartMenuFavoritesOptional& StartMenuProperties_t::
startMenuFavorites ()
{
  return this->startMenuFavorites_;
}

void StartMenuProperties_t::
startMenuFavorites (const StartMenuFavoritesType& x)
{
  this->startMenuFavorites_.set (x);
}

void StartMenuProperties_t::
startMenuFavorites (const StartMenuFavoritesOptional& x)
{
  this->startMenuFavorites_ = x;
}

void StartMenuProperties_t::
startMenuFavorites (::std::unique_ptr< StartMenuFavoritesType > x)
{
  this->startMenuFavorites_.set (std::move (x));
}

const StartMenuProperties_t::ShowHelpOptional& StartMenuProperties_t::
showHelp () const
{
  return this->showHelp_;
}

StartMenuProperties_t::ShowHelpOptional& StartMenuProperties_t::
showHelp ()
{
  return this->showHelp_;
}

void StartMenuProperties_t::
showHelp (const ShowHelpType& x)
{
  this->showHelp_.set (x);
}

void StartMenuProperties_t::
showHelp (const ShowHelpOptional& x)
{
  this->showHelp_ = x;
}

const StartMenuProperties_t::ShowMyComputerOptional& StartMenuProperties_t::
showMyComputer () const
{
  return this->showMyComputer_;
}

StartMenuProperties_t::ShowMyComputerOptional& StartMenuProperties_t::
showMyComputer ()
{
  return this->showMyComputer_;
}

void StartMenuProperties_t::
showMyComputer (const ShowMyComputerType& x)
{
  this->showMyComputer_.set (x);
}

void StartMenuProperties_t::
showMyComputer (const ShowMyComputerOptional& x)
{
  this->showMyComputer_ = x;
}

void StartMenuProperties_t::
showMyComputer (::std::unique_ptr< ShowMyComputerType > x)
{
  this->showMyComputer_.set (std::move (x));
}

const StartMenuProperties_t::ShowMyDocsOptional& StartMenuProperties_t::
showMyDocs () const
{
  return this->showMyDocs_;
}

StartMenuProperties_t::ShowMyDocsOptional& StartMenuProperties_t::
showMyDocs ()
{
  return this->showMyDocs_;
}

void StartMenuProperties_t::
showMyDocs (const ShowMyDocsType& x)
{
  this->showMyDocs_.set (x);
}

void StartMenuProperties_t::
showMyDocs (const ShowMyDocsOptional& x)
{
  this->showMyDocs_ = x;
}

void StartMenuProperties_t::
showMyDocs (::std::unique_ptr< ShowMyDocsType > x)
{
  this->showMyDocs_.set (std::move (x));
}

const StartMenuProperties_t::ShowMyMusicOptional& StartMenuProperties_t::
showMyMusic () const
{
  return this->showMyMusic_;
}

StartMenuProperties_t::ShowMyMusicOptional& StartMenuProperties_t::
showMyMusic ()
{
  return this->showMyMusic_;
}

void StartMenuProperties_t::
showMyMusic (const ShowMyMusicType& x)
{
  this->showMyMusic_.set (x);
}

void StartMenuProperties_t::
showMyMusic (const ShowMyMusicOptional& x)
{
  this->showMyMusic_ = x;
}

void StartMenuProperties_t::
showMyMusic (::std::unique_ptr< ShowMyMusicType > x)
{
  this->showMyMusic_.set (std::move (x));
}

const StartMenuProperties_t::ShowNetPlacesOptional& StartMenuProperties_t::
showNetPlaces () const
{
  return this->showNetPlaces_;
}

StartMenuProperties_t::ShowNetPlacesOptional& StartMenuProperties_t::
showNetPlaces ()
{
  return this->showNetPlaces_;
}

void StartMenuProperties_t::
showNetPlaces (const ShowNetPlacesType& x)
{
  this->showNetPlaces_.set (x);
}

void StartMenuProperties_t::
showNetPlaces (const ShowNetPlacesOptional& x)
{
  this->showNetPlaces_ = x;
}

const StartMenuProperties_t::ShowMyPicsOptional& StartMenuProperties_t::
showMyPics () const
{
  return this->showMyPics_;
}

StartMenuProperties_t::ShowMyPicsOptional& StartMenuProperties_t::
showMyPics ()
{
  return this->showMyPics_;
}

void StartMenuProperties_t::
showMyPics (const ShowMyPicsType& x)
{
  this->showMyPics_.set (x);
}

void StartMenuProperties_t::
showMyPics (const ShowMyPicsOptional& x)
{
  this->showMyPics_ = x;
}

void StartMenuProperties_t::
showMyPics (::std::unique_ptr< ShowMyPicsType > x)
{
  this->showMyPics_.set (std::move (x));
}

const StartMenuProperties_t::ShowNetConnOptional& StartMenuProperties_t::
showNetConn () const
{
  return this->showNetConn_;
}

StartMenuProperties_t::ShowNetConnOptional& StartMenuProperties_t::
showNetConn ()
{
  return this->showNetConn_;
}

void StartMenuProperties_t::
showNetConn (const ShowNetConnType& x)
{
  this->showNetConn_.set (x);
}

void StartMenuProperties_t::
showNetConn (const ShowNetConnOptional& x)
{
  this->showNetConn_ = x;
}

void StartMenuProperties_t::
showNetConn (::std::unique_ptr< ShowNetConnType > x)
{
  this->showNetConn_.set (std::move (x));
}

const StartMenuProperties_t::ShowPrintersOptional& StartMenuProperties_t::
showPrinters () const
{
  return this->showPrinters_;
}

StartMenuProperties_t::ShowPrintersOptional& StartMenuProperties_t::
showPrinters ()
{
  return this->showPrinters_;
}

void StartMenuProperties_t::
showPrinters (const ShowPrintersType& x)
{
  this->showPrinters_.set (x);
}

void StartMenuProperties_t::
showPrinters (const ShowPrintersOptional& x)
{
  this->showPrinters_ = x;
}

const StartMenuProperties_t::ShowRunOptional& StartMenuProperties_t::
showRun () const
{
  return this->showRun_;
}

StartMenuProperties_t::ShowRunOptional& StartMenuProperties_t::
showRun ()
{
  return this->showRun_;
}

void StartMenuProperties_t::
showRun (const ShowRunType& x)
{
  this->showRun_.set (x);
}

void StartMenuProperties_t::
showRun (const ShowRunOptional& x)
{
  this->showRun_ = x;
}

const StartMenuProperties_t::ScrollProgramsOptional& StartMenuProperties_t::
scrollPrograms () const
{
  return this->scrollPrograms_;
}

StartMenuProperties_t::ScrollProgramsOptional& StartMenuProperties_t::
scrollPrograms ()
{
  return this->scrollPrograms_;
}

void StartMenuProperties_t::
scrollPrograms (const ScrollProgramsType& x)
{
  this->scrollPrograms_.set (x);
}

void StartMenuProperties_t::
scrollPrograms (const ScrollProgramsOptional& x)
{
  this->scrollPrograms_ = x;
}

const StartMenuProperties_t::ShowSearchOptional& StartMenuProperties_t::
showSearch () const
{
  return this->showSearch_;
}

StartMenuProperties_t::ShowSearchOptional& StartMenuProperties_t::
showSearch ()
{
  return this->showSearch_;
}

void StartMenuProperties_t::
showSearch (const ShowSearchType& x)
{
  this->showSearch_.set (x);
}

void StartMenuProperties_t::
showSearch (const ShowSearchOptional& x)
{
  this->showSearch_ = x;
}

const StartMenuProperties_t::ShowRecentDocsOptional& StartMenuProperties_t::
showRecentDocs () const
{
  return this->showRecentDocs_;
}

StartMenuProperties_t::ShowRecentDocsOptional& StartMenuProperties_t::
showRecentDocs ()
{
  return this->showRecentDocs_;
}

void StartMenuProperties_t::
showRecentDocs (const ShowRecentDocsType& x)
{
  this->showRecentDocs_.set (x);
}

void StartMenuProperties_t::
showRecentDocs (const ShowRecentDocsOptional& x)
{
  this->showRecentDocs_ = x;
}

void StartMenuProperties_t::
showRecentDocs (::std::unique_ptr< ShowRecentDocsType > x)
{
  this->showRecentDocs_.set (std::move (x));
}

const StartMenuProperties_t::ClearStartDocsListOptional& StartMenuProperties_t::
clearStartDocsList () const
{
  return this->clearStartDocsList_;
}

StartMenuProperties_t::ClearStartDocsListOptional& StartMenuProperties_t::
clearStartDocsList ()
{
  return this->clearStartDocsList_;
}

void StartMenuProperties_t::
clearStartDocsList (const ClearStartDocsListType& x)
{
  this->clearStartDocsList_.set (x);
}

void StartMenuProperties_t::
clearStartDocsList (const ClearStartDocsListOptional& x)
{
  this->clearStartDocsList_ = x;
}

const StartMenuProperties_t::CShowLogoffOptional& StartMenuProperties_t::
cShowLogoff () const
{
  return this->cShowLogoff_;
}

StartMenuProperties_t::CShowLogoffOptional& StartMenuProperties_t::
cShowLogoff ()
{
  return this->cShowLogoff_;
}

void StartMenuProperties_t::
cShowLogoff (const CShowLogoffType& x)
{
  this->cShowLogoff_.set (x);
}

void StartMenuProperties_t::
cShowLogoff (const CShowLogoffOptional& x)
{
  this->cShowLogoff_ = x;
}

const StartMenuProperties_t::CShowRunOptional& StartMenuProperties_t::
cShowRun () const
{
  return this->cShowRun_;
}

StartMenuProperties_t::CShowRunOptional& StartMenuProperties_t::
cShowRun ()
{
  return this->cShowRun_;
}

void StartMenuProperties_t::
cShowRun (const CShowRunType& x)
{
  this->cShowRun_.set (x);
}

void StartMenuProperties_t::
cShowRun (const CShowRunOptional& x)
{
  this->cShowRun_ = x;
}

const StartMenuProperties_t::CEnableDragDropOptional& StartMenuProperties_t::
cEnableDragDrop () const
{
  return this->cEnableDragDrop_;
}

StartMenuProperties_t::CEnableDragDropOptional& StartMenuProperties_t::
cEnableDragDrop ()
{
  return this->cEnableDragDrop_;
}

void StartMenuProperties_t::
cEnableDragDrop (const CEnableDragDropType& x)
{
  this->cEnableDragDrop_.set (x);
}

void StartMenuProperties_t::
cEnableDragDrop (const CEnableDragDropOptional& x)
{
  this->cEnableDragDrop_ = x;
}

const StartMenuProperties_t::CCascadeControlPanelOptional& StartMenuProperties_t::
cCascadeControlPanel () const
{
  return this->cCascadeControlPanel_;
}

StartMenuProperties_t::CCascadeControlPanelOptional& StartMenuProperties_t::
cCascadeControlPanel ()
{
  return this->cCascadeControlPanel_;
}

void StartMenuProperties_t::
cCascadeControlPanel (const CCascadeControlPanelType& x)
{
  this->cCascadeControlPanel_.set (x);
}

void StartMenuProperties_t::
cCascadeControlPanel (const CCascadeControlPanelOptional& x)
{
  this->cCascadeControlPanel_ = x;
}

const StartMenuProperties_t::CCascadeMyDocumentsOptional& StartMenuProperties_t::
cCascadeMyDocuments () const
{
  return this->cCascadeMyDocuments_;
}

StartMenuProperties_t::CCascadeMyDocumentsOptional& StartMenuProperties_t::
cCascadeMyDocuments ()
{
  return this->cCascadeMyDocuments_;
}

void StartMenuProperties_t::
cCascadeMyDocuments (const CCascadeMyDocumentsType& x)
{
  this->cCascadeMyDocuments_.set (x);
}

void StartMenuProperties_t::
cCascadeMyDocuments (const CCascadeMyDocumentsOptional& x)
{
  this->cCascadeMyDocuments_ = x;
}

const StartMenuProperties_t::CCascadeMyPicturesOptional& StartMenuProperties_t::
cCascadeMyPictures () const
{
  return this->cCascadeMyPictures_;
}

StartMenuProperties_t::CCascadeMyPicturesOptional& StartMenuProperties_t::
cCascadeMyPictures ()
{
  return this->cCascadeMyPictures_;
}

void StartMenuProperties_t::
cCascadeMyPictures (const CCascadeMyPicturesType& x)
{
  this->cCascadeMyPictures_.set (x);
}

void StartMenuProperties_t::
cCascadeMyPictures (const CCascadeMyPicturesOptional& x)
{
  this->cCascadeMyPictures_ = x;
}

const StartMenuProperties_t::CCascadeNetworkConnectionsOptional& StartMenuProperties_t::
cCascadeNetworkConnections () const
{
  return this->cCascadeNetworkConnections_;
}

StartMenuProperties_t::CCascadeNetworkConnectionsOptional& StartMenuProperties_t::
cCascadeNetworkConnections ()
{
  return this->cCascadeNetworkConnections_;
}

void StartMenuProperties_t::
cCascadeNetworkConnections (const CCascadeNetworkConnectionsType& x)
{
  this->cCascadeNetworkConnections_.set (x);
}

void StartMenuProperties_t::
cCascadeNetworkConnections (const CCascadeNetworkConnectionsOptional& x)
{
  this->cCascadeNetworkConnections_ = x;
}

const StartMenuProperties_t::CCascadePrintersOptional& StartMenuProperties_t::
cCascadePrinters () const
{
  return this->cCascadePrinters_;
}

StartMenuProperties_t::CCascadePrintersOptional& StartMenuProperties_t::
cCascadePrinters ()
{
  return this->cCascadePrinters_;
}

void StartMenuProperties_t::
cCascadePrinters (const CCascadePrintersType& x)
{
  this->cCascadePrinters_.set (x);
}

void StartMenuProperties_t::
cCascadePrinters (const CCascadePrintersOptional& x)
{
  this->cCascadePrinters_ = x;
}

const StartMenuProperties_t::CScrollProgramsOptional& StartMenuProperties_t::
cScrollPrograms () const
{
  return this->cScrollPrograms_;
}

StartMenuProperties_t::CScrollProgramsOptional& StartMenuProperties_t::
cScrollPrograms ()
{
  return this->cScrollPrograms_;
}

void StartMenuProperties_t::
cScrollPrograms (const CScrollProgramsType& x)
{
  this->cScrollPrograms_.set (x);
}

void StartMenuProperties_t::
cScrollPrograms (const CScrollProgramsOptional& x)
{
  this->cScrollPrograms_ = x;
}

const StartMenuProperties_t::CPersonalizedOptional& StartMenuProperties_t::
cPersonalized () const
{
  return this->cPersonalized_;
}

StartMenuProperties_t::CPersonalizedOptional& StartMenuProperties_t::
cPersonalized ()
{
  return this->cPersonalized_;
}

void StartMenuProperties_t::
cPersonalized (const CPersonalizedType& x)
{
  this->cPersonalized_.set (x);
}

void StartMenuProperties_t::
cPersonalized (const CPersonalizedOptional& x)
{
  this->cPersonalized_ = x;
}


// StartMenu_t
// 

const StartMenu_t::FiltersType& StartMenu_t::
Filters () const
{
  return this->Filters_.get ();
}

StartMenu_t::FiltersType& StartMenu_t::
Filters ()
{
  return this->Filters_.get ();
}

void StartMenu_t::
Filters (const FiltersType& x)
{
  this->Filters_.set (x);
}

void StartMenu_t::
Filters (::std::unique_ptr< FiltersType > x)
{
  this->Filters_.set (std::move (x));
}

const StartMenu_t::PropertiesType& StartMenu_t::
Properties () const
{
  return this->Properties_.get ();
}

StartMenu_t::PropertiesType& StartMenu_t::
Properties ()
{
  return this->Properties_.get ();
}

void StartMenu_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void StartMenu_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const StartMenu_t::ClsidType& StartMenu_t::
clsid () const
{
  return this->clsid_.get ();
}

StartMenu_t::ClsidType& StartMenu_t::
clsid ()
{
  return this->clsid_.get ();
}

void StartMenu_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void StartMenu_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const StartMenu_t::NameType& StartMenu_t::
name () const
{
  return this->name_.get ();
}

StartMenu_t::NameType& StartMenu_t::
name ()
{
  return this->name_.get ();
}

void StartMenu_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void StartMenu_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const StartMenu_t::ChangedOptional& StartMenu_t::
changed () const
{
  return this->changed_;
}

StartMenu_t::ChangedOptional& StartMenu_t::
changed ()
{
  return this->changed_;
}

void StartMenu_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void StartMenu_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void StartMenu_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const StartMenu_t::ImageOptional& StartMenu_t::
image () const
{
  return this->image_;
}

StartMenu_t::ImageOptional& StartMenu_t::
image ()
{
  return this->image_;
}

void StartMenu_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void StartMenu_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const StartMenu_t::UidType& StartMenu_t::
uid () const
{
  return this->uid_.get ();
}

StartMenu_t::UidType& StartMenu_t::
uid ()
{
  return this->uid_.get ();
}

void StartMenu_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void StartMenu_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const StartMenu_t::DisabledOptional& StartMenu_t::
disabled () const
{
  return this->disabled_;
}

StartMenu_t::DisabledOptional& StartMenu_t::
disabled ()
{
  return this->disabled_;
}

void StartMenu_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void StartMenu_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}

const StartMenu_t::StatusOptional& StartMenu_t::
status () const
{
  return this->status_;
}

StartMenu_t::StatusOptional& StartMenu_t::
status ()
{
  return this->status_;
}

void StartMenu_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void StartMenu_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void StartMenu_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// FilterOs_t
// 

const FilterOs_t::HiddenOptional& FilterOs_t::
hidden () const
{
  return this->hidden_;
}

FilterOs_t::HiddenOptional& FilterOs_t::
hidden ()
{
  return this->hidden_;
}

void FilterOs_t::
hidden (const HiddenType& x)
{
  this->hidden_.set (x);
}

void FilterOs_t::
hidden (const HiddenOptional& x)
{
  this->hidden_ = x;
}

const FilterOs_t::NotType& FilterOs_t::
not_ () const
{
  return this->not__.get ();
}

FilterOs_t::NotType& FilterOs_t::
not_ ()
{
  return this->not__.get ();
}

void FilterOs_t::
not_ (const NotType& x)
{
  this->not__.set (x);
}

const FilterOs_t::BoolType& FilterOs_t::
bool_ () const
{
  return this->bool__.get ();
}

FilterOs_t::BoolType& FilterOs_t::
bool_ ()
{
  return this->bool__.get ();
}

void FilterOs_t::
bool_ (const BoolType& x)
{
  this->bool__.set (x);
}

void FilterOs_t::
bool_ (::std::unique_ptr< BoolType > x)
{
  this->bool__.set (std::move (x));
}

const FilterOs_t::ClassType& FilterOs_t::
class_ () const
{
  return this->class__.get ();
}

FilterOs_t::ClassType& FilterOs_t::
class_ ()
{
  return this->class__.get ();
}

void FilterOs_t::
class_ (const ClassType& x)
{
  this->class__.set (x);
}

void FilterOs_t::
class_ (::std::unique_ptr< ClassType > x)
{
  this->class__.set (std::move (x));
}

const FilterOs_t::VersionType& FilterOs_t::
version () const
{
  return this->version_.get ();
}

FilterOs_t::VersionType& FilterOs_t::
version ()
{
  return this->version_.get ();
}

void FilterOs_t::
version (const VersionType& x)
{
  this->version_.set (x);
}

void FilterOs_t::
version (::std::unique_ptr< VersionType > x)
{
  this->version_.set (std::move (x));
}

const FilterOs_t::TypeType& FilterOs_t::
type () const
{
  return this->type_.get ();
}

FilterOs_t::TypeType& FilterOs_t::
type ()
{
  return this->type_.get ();
}

void FilterOs_t::
type (const TypeType& x)
{
  this->type_.set (x);
}

void FilterOs_t::
type (::std::unique_ptr< TypeType > x)
{
  this->type_.set (std::move (x));
}

const FilterOs_t::EditionType& FilterOs_t::
edition () const
{
  return this->edition_.get ();
}

FilterOs_t::EditionType& FilterOs_t::
edition ()
{
  return this->edition_.get ();
}

void FilterOs_t::
edition (const EditionType& x)
{
  this->edition_.set (x);
}

void FilterOs_t::
edition (::std::unique_ptr< EditionType > x)
{
  this->edition_.set (std::move (x));
}

const FilterOs_t::SpType& FilterOs_t::
sp () const
{
  return this->sp_.get ();
}

FilterOs_t::SpType& FilterOs_t::
sp ()
{
  return this->sp_.get ();
}

void FilterOs_t::
sp (const SpType& x)
{
  this->sp_.set (x);
}

void FilterOs_t::
sp (::std::unique_ptr< SpType > x)
{
  this->sp_.set (std::move (x));
}


// Filters2_t
// 

const Filters2_t::FilterOsType& Filters2_t::
FilterOs () const
{
  return this->FilterOs_.get ();
}

Filters2_t::FilterOsType& Filters2_t::
FilterOs ()
{
  return this->FilterOs_.get ();
}

void Filters2_t::
FilterOs (const FilterOsType& x)
{
  this->FilterOs_.set (x);
}

void Filters2_t::
FilterOs (::std::unique_ptr< FilterOsType > x)
{
  this->FilterOs_.set (std::move (x));
}


// StartMenuVistaProperties_t
// 

const StartMenuVistaProperties_t::MinMFUOptional& StartMenuVistaProperties_t::
minMFU () const
{
  return this->minMFU_;
}

StartMenuVistaProperties_t::MinMFUOptional& StartMenuVistaProperties_t::
minMFU ()
{
  return this->minMFU_;
}

void StartMenuVistaProperties_t::
minMFU (const MinMFUType& x)
{
  this->minMFU_.set (x);
}

void StartMenuVistaProperties_t::
minMFU (const MinMFUOptional& x)
{
  this->minMFU_ = x;
}

const StartMenuVistaProperties_t::ShowMyComputerOptional& StartMenuVistaProperties_t::
showMyComputer () const
{
  return this->showMyComputer_;
}

StartMenuVistaProperties_t::ShowMyComputerOptional& StartMenuVistaProperties_t::
showMyComputer ()
{
  return this->showMyComputer_;
}

void StartMenuVistaProperties_t::
showMyComputer (const ShowMyComputerType& x)
{
  this->showMyComputer_.set (x);
}

void StartMenuVistaProperties_t::
showMyComputer (const ShowMyComputerOptional& x)
{
  this->showMyComputer_ = x;
}

void StartMenuVistaProperties_t::
showMyComputer (::std::unique_ptr< ShowMyComputerType > x)
{
  this->showMyComputer_.set (std::move (x));
}

const StartMenuVistaProperties_t::ConnectToOptional& StartMenuVistaProperties_t::
connectTo () const
{
  return this->connectTo_;
}

StartMenuVistaProperties_t::ConnectToOptional& StartMenuVistaProperties_t::
connectTo ()
{
  return this->connectTo_;
}

void StartMenuVistaProperties_t::
connectTo (const ConnectToType& x)
{
  this->connectTo_.set (x);
}

void StartMenuVistaProperties_t::
connectTo (const ConnectToOptional& x)
{
  this->connectTo_ = x;
}

const StartMenuVistaProperties_t::ShowControlPanelOptional& StartMenuVistaProperties_t::
showControlPanel () const
{
  return this->showControlPanel_;
}

StartMenuVistaProperties_t::ShowControlPanelOptional& StartMenuVistaProperties_t::
showControlPanel ()
{
  return this->showControlPanel_;
}

void StartMenuVistaProperties_t::
showControlPanel (const ShowControlPanelType& x)
{
  this->showControlPanel_.set (x);
}

void StartMenuVistaProperties_t::
showControlPanel (const ShowControlPanelOptional& x)
{
  this->showControlPanel_ = x;
}

void StartMenuVistaProperties_t::
showControlPanel (::std::unique_ptr< ShowControlPanelType > x)
{
  this->showControlPanel_.set (std::move (x));
}

const StartMenuVistaProperties_t::DefaultProgramsOptional& StartMenuVistaProperties_t::
defaultPrograms () const
{
  return this->defaultPrograms_;
}

StartMenuVistaProperties_t::DefaultProgramsOptional& StartMenuVistaProperties_t::
defaultPrograms ()
{
  return this->defaultPrograms_;
}

void StartMenuVistaProperties_t::
defaultPrograms (const DefaultProgramsType& x)
{
  this->defaultPrograms_.set (x);
}

void StartMenuVistaProperties_t::
defaultPrograms (const DefaultProgramsOptional& x)
{
  this->defaultPrograms_ = x;
}

const StartMenuVistaProperties_t::ShowMyDocsOptional& StartMenuVistaProperties_t::
showMyDocs () const
{
  return this->showMyDocs_;
}

StartMenuVistaProperties_t::ShowMyDocsOptional& StartMenuVistaProperties_t::
showMyDocs ()
{
  return this->showMyDocs_;
}

void StartMenuVistaProperties_t::
showMyDocs (const ShowMyDocsType& x)
{
  this->showMyDocs_.set (x);
}

void StartMenuVistaProperties_t::
showMyDocs (const ShowMyDocsOptional& x)
{
  this->showMyDocs_ = x;
}

void StartMenuVistaProperties_t::
showMyDocs (::std::unique_ptr< ShowMyDocsType > x)
{
  this->showMyDocs_.set (std::move (x));
}

const StartMenuVistaProperties_t::EnableContextMenuOptional& StartMenuVistaProperties_t::
enableContextMenu () const
{
  return this->enableContextMenu_;
}

StartMenuVistaProperties_t::EnableContextMenuOptional& StartMenuVistaProperties_t::
enableContextMenu ()
{
  return this->enableContextMenu_;
}

void StartMenuVistaProperties_t::
enableContextMenu (const EnableContextMenuType& x)
{
  this->enableContextMenu_.set (x);
}

void StartMenuVistaProperties_t::
enableContextMenu (const EnableContextMenuOptional& x)
{
  this->enableContextMenu_ = x;
}

const StartMenuVistaProperties_t::ShowFavoritesOptional& StartMenuVistaProperties_t::
showFavorites () const
{
  return this->showFavorites_;
}

StartMenuVistaProperties_t::ShowFavoritesOptional& StartMenuVistaProperties_t::
showFavorites ()
{
  return this->showFavorites_;
}

void StartMenuVistaProperties_t::
showFavorites (const ShowFavoritesType& x)
{
  this->showFavorites_.set (x);
}

void StartMenuVistaProperties_t::
showFavorites (const ShowFavoritesOptional& x)
{
  this->showFavorites_ = x;
}

const StartMenuVistaProperties_t::ShowGamesOptional& StartMenuVistaProperties_t::
showGames () const
{
  return this->showGames_;
}

StartMenuVistaProperties_t::ShowGamesOptional& StartMenuVistaProperties_t::
showGames ()
{
  return this->showGames_;
}

void StartMenuVistaProperties_t::
showGames (const ShowGamesType& x)
{
  this->showGames_.set (x);
}

void StartMenuVistaProperties_t::
showGames (const ShowGamesOptional& x)
{
  this->showGames_ = x;
}

void StartMenuVistaProperties_t::
showGames (::std::unique_ptr< ShowGamesType > x)
{
  this->showGames_.set (std::move (x));
}

const StartMenuVistaProperties_t::ShowHelpOptional& StartMenuVistaProperties_t::
showHelp () const
{
  return this->showHelp_;
}

StartMenuVistaProperties_t::ShowHelpOptional& StartMenuVistaProperties_t::
showHelp ()
{
  return this->showHelp_;
}

void StartMenuVistaProperties_t::
showHelp (const ShowHelpType& x)
{
  this->showHelp_.set (x);
}

void StartMenuVistaProperties_t::
showHelp (const ShowHelpOptional& x)
{
  this->showHelp_ = x;
}

const StartMenuVistaProperties_t::HighlightNewOptional& StartMenuVistaProperties_t::
highlightNew () const
{
  return this->highlightNew_;
}

StartMenuVistaProperties_t::HighlightNewOptional& StartMenuVistaProperties_t::
highlightNew ()
{
  return this->highlightNew_;
}

void StartMenuVistaProperties_t::
highlightNew (const HighlightNewType& x)
{
  this->highlightNew_.set (x);
}

void StartMenuVistaProperties_t::
highlightNew (const HighlightNewOptional& x)
{
  this->highlightNew_ = x;
}

const StartMenuVistaProperties_t::ShowMyMusicOptional& StartMenuVistaProperties_t::
showMyMusic () const
{
  return this->showMyMusic_;
}

StartMenuVistaProperties_t::ShowMyMusicOptional& StartMenuVistaProperties_t::
showMyMusic ()
{
  return this->showMyMusic_;
}

void StartMenuVistaProperties_t::
showMyMusic (const ShowMyMusicType& x)
{
  this->showMyMusic_.set (x);
}

void StartMenuVistaProperties_t::
showMyMusic (const ShowMyMusicOptional& x)
{
  this->showMyMusic_ = x;
}

void StartMenuVistaProperties_t::
showMyMusic (::std::unique_ptr< ShowMyMusicType > x)
{
  this->showMyMusic_.set (std::move (x));
}

const StartMenuVistaProperties_t::ShowNetPlacesOptional& StartMenuVistaProperties_t::
showNetPlaces () const
{
  return this->showNetPlaces_;
}

StartMenuVistaProperties_t::ShowNetPlacesOptional& StartMenuVistaProperties_t::
showNetPlaces ()
{
  return this->showNetPlaces_;
}

void StartMenuVistaProperties_t::
showNetPlaces (const ShowNetPlacesType& x)
{
  this->showNetPlaces_.set (x);
}

void StartMenuVistaProperties_t::
showNetPlaces (const ShowNetPlacesOptional& x)
{
  this->showNetPlaces_ = x;
}

const StartMenuVistaProperties_t::OpenSubMenusOptional& StartMenuVistaProperties_t::
openSubMenus () const
{
  return this->openSubMenus_;
}

StartMenuVistaProperties_t::OpenSubMenusOptional& StartMenuVistaProperties_t::
openSubMenus ()
{
  return this->openSubMenus_;
}

void StartMenuVistaProperties_t::
openSubMenus (const OpenSubMenusType& x)
{
  this->openSubMenus_.set (x);
}

void StartMenuVistaProperties_t::
openSubMenus (const OpenSubMenusOptional& x)
{
  this->openSubMenus_ = x;
}

const StartMenuVistaProperties_t::PersonalFoldersOptional& StartMenuVistaProperties_t::
personalFolders () const
{
  return this->personalFolders_;
}

StartMenuVistaProperties_t::PersonalFoldersOptional& StartMenuVistaProperties_t::
personalFolders ()
{
  return this->personalFolders_;
}

void StartMenuVistaProperties_t::
personalFolders (const PersonalFoldersType& x)
{
  this->personalFolders_.set (x);
}

void StartMenuVistaProperties_t::
personalFolders (const PersonalFoldersOptional& x)
{
  this->personalFolders_ = x;
}

void StartMenuVistaProperties_t::
personalFolders (::std::unique_ptr< PersonalFoldersType > x)
{
  this->personalFolders_.set (std::move (x));
}

const StartMenuVistaProperties_t::ShowMyPicsOptional& StartMenuVistaProperties_t::
showMyPics () const
{
  return this->showMyPics_;
}

StartMenuVistaProperties_t::ShowMyPicsOptional& StartMenuVistaProperties_t::
showMyPics ()
{
  return this->showMyPics_;
}

void StartMenuVistaProperties_t::
showMyPics (const ShowMyPicsType& x)
{
  this->showMyPics_.set (x);
}

void StartMenuVistaProperties_t::
showMyPics (const ShowMyPicsOptional& x)
{
  this->showMyPics_ = x;
}

const StartMenuVistaProperties_t::ShowPrintersOptional& StartMenuVistaProperties_t::
showPrinters () const
{
  return this->showPrinters_;
}

StartMenuVistaProperties_t::ShowPrintersOptional& StartMenuVistaProperties_t::
showPrinters ()
{
  return this->showPrinters_;
}

void StartMenuVistaProperties_t::
showPrinters (const ShowPrintersType& x)
{
  this->showPrinters_.set (x);
}

void StartMenuVistaProperties_t::
showPrinters (const ShowPrintersOptional& x)
{
  this->showPrinters_ = x;
}

const StartMenuVistaProperties_t::RunCommandOptional& StartMenuVistaProperties_t::
runCommand () const
{
  return this->runCommand_;
}

StartMenuVistaProperties_t::RunCommandOptional& StartMenuVistaProperties_t::
runCommand ()
{
  return this->runCommand_;
}

void StartMenuVistaProperties_t::
runCommand (const RunCommandType& x)
{
  this->runCommand_.set (x);
}

void StartMenuVistaProperties_t::
runCommand (const RunCommandOptional& x)
{
  this->runCommand_ = x;
}

const StartMenuVistaProperties_t::ShowSearchOptional& StartMenuVistaProperties_t::
showSearch () const
{
  return this->showSearch_;
}

StartMenuVistaProperties_t::ShowSearchOptional& StartMenuVistaProperties_t::
showSearch ()
{
  return this->showSearch_;
}

void StartMenuVistaProperties_t::
showSearch (const ShowSearchType& x)
{
  this->showSearch_.set (x);
}

void StartMenuVistaProperties_t::
showSearch (const ShowSearchOptional& x)
{
  this->showSearch_ = x;
}

const StartMenuVistaProperties_t::SearchCommunicationsOptional& StartMenuVistaProperties_t::
searchCommunications () const
{
  return this->searchCommunications_;
}

StartMenuVistaProperties_t::SearchCommunicationsOptional& StartMenuVistaProperties_t::
searchCommunications ()
{
  return this->searchCommunications_;
}

void StartMenuVistaProperties_t::
searchCommunications (const SearchCommunicationsType& x)
{
  this->searchCommunications_.set (x);
}

void StartMenuVistaProperties_t::
searchCommunications (const SearchCommunicationsOptional& x)
{
  this->searchCommunications_ = x;
}

const StartMenuVistaProperties_t::SearchFavoritesOptional& StartMenuVistaProperties_t::
searchFavorites () const
{
  return this->searchFavorites_;
}

StartMenuVistaProperties_t::SearchFavoritesOptional& StartMenuVistaProperties_t::
searchFavorites ()
{
  return this->searchFavorites_;
}

void StartMenuVistaProperties_t::
searchFavorites (const SearchFavoritesType& x)
{
  this->searchFavorites_.set (x);
}

void StartMenuVistaProperties_t::
searchFavorites (const SearchFavoritesOptional& x)
{
  this->searchFavorites_ = x;
}

const StartMenuVistaProperties_t::SearchFilesOptional& StartMenuVistaProperties_t::
searchFiles () const
{
  return this->searchFiles_;
}

StartMenuVistaProperties_t::SearchFilesOptional& StartMenuVistaProperties_t::
searchFiles ()
{
  return this->searchFiles_;
}

void StartMenuVistaProperties_t::
searchFiles (const SearchFilesType& x)
{
  this->searchFiles_.set (x);
}

void StartMenuVistaProperties_t::
searchFiles (const SearchFilesOptional& x)
{
  this->searchFiles_ = x;
}

void StartMenuVistaProperties_t::
searchFiles (::std::unique_ptr< SearchFilesType > x)
{
  this->searchFiles_.set (std::move (x));
}

const StartMenuVistaProperties_t::SearchProgramsOptional& StartMenuVistaProperties_t::
searchPrograms () const
{
  return this->searchPrograms_;
}

StartMenuVistaProperties_t::SearchProgramsOptional& StartMenuVistaProperties_t::
searchPrograms ()
{
  return this->searchPrograms_;
}

void StartMenuVistaProperties_t::
searchPrograms (const SearchProgramsType& x)
{
  this->searchPrograms_.set (x);
}

void StartMenuVistaProperties_t::
searchPrograms (const SearchProgramsOptional& x)
{
  this->searchPrograms_ = x;
}

const StartMenuVistaProperties_t::TrackProgsOptional& StartMenuVistaProperties_t::
trackProgs () const
{
  return this->trackProgs_;
}

StartMenuVistaProperties_t::TrackProgsOptional& StartMenuVistaProperties_t::
trackProgs ()
{
  return this->trackProgs_;
}

void StartMenuVistaProperties_t::
trackProgs (const TrackProgsType& x)
{
  this->trackProgs_.set (x);
}

void StartMenuVistaProperties_t::
trackProgs (const TrackProgsOptional& x)
{
  this->trackProgs_ = x;
}

const StartMenuVistaProperties_t::SortAllProgramsOptional& StartMenuVistaProperties_t::
sortAllPrograms () const
{
  return this->sortAllPrograms_;
}

StartMenuVistaProperties_t::SortAllProgramsOptional& StartMenuVistaProperties_t::
sortAllPrograms ()
{
  return this->sortAllPrograms_;
}

void StartMenuVistaProperties_t::
sortAllPrograms (const SortAllProgramsType& x)
{
  this->sortAllPrograms_.set (x);
}

void StartMenuVistaProperties_t::
sortAllPrograms (const SortAllProgramsOptional& x)
{
  this->sortAllPrograms_ = x;
}

const StartMenuVistaProperties_t::SystemAdminOptional& StartMenuVistaProperties_t::
systemAdmin () const
{
  return this->systemAdmin_;
}

StartMenuVistaProperties_t::SystemAdminOptional& StartMenuVistaProperties_t::
systemAdmin ()
{
  return this->systemAdmin_;
}

void StartMenuVistaProperties_t::
systemAdmin (const SystemAdminType& x)
{
  this->systemAdmin_.set (x);
}

void StartMenuVistaProperties_t::
systemAdmin (const SystemAdminOptional& x)
{
  this->systemAdmin_ = x;
}

void StartMenuVistaProperties_t::
systemAdmin (::std::unique_ptr< SystemAdminType > x)
{
  this->systemAdmin_.set (std::move (x));
}

const StartMenuVistaProperties_t::UseLargeIconsOptional& StartMenuVistaProperties_t::
useLargeIcons () const
{
  return this->useLargeIcons_;
}

StartMenuVistaProperties_t::UseLargeIconsOptional& StartMenuVistaProperties_t::
useLargeIcons ()
{
  return this->useLargeIcons_;
}

void StartMenuVistaProperties_t::
useLargeIcons (const UseLargeIconsType& x)
{
  this->useLargeIcons_.set (x);
}

void StartMenuVistaProperties_t::
useLargeIcons (const UseLargeIconsOptional& x)
{
  this->useLargeIcons_ = x;
}

const StartMenuVistaProperties_t::ShowRecentDocsOptional& StartMenuVistaProperties_t::
showRecentDocs () const
{
  return this->showRecentDocs_;
}

StartMenuVistaProperties_t::ShowRecentDocsOptional& StartMenuVistaProperties_t::
showRecentDocs ()
{
  return this->showRecentDocs_;
}

void StartMenuVistaProperties_t::
showRecentDocs (const ShowRecentDocsType& x)
{
  this->showRecentDocs_.set (x);
}

void StartMenuVistaProperties_t::
showRecentDocs (const ShowRecentDocsOptional& x)
{
  this->showRecentDocs_ = x;
}

void StartMenuVistaProperties_t::
showRecentDocs (::std::unique_ptr< ShowRecentDocsType > x)
{
  this->showRecentDocs_.set (std::move (x));
}

const StartMenuVistaProperties_t::ClearStartDocsListOptional& StartMenuVistaProperties_t::
clearStartDocsList () const
{
  return this->clearStartDocsList_;
}

StartMenuVistaProperties_t::ClearStartDocsListOptional& StartMenuVistaProperties_t::
clearStartDocsList ()
{
  return this->clearStartDocsList_;
}

void StartMenuVistaProperties_t::
clearStartDocsList (const ClearStartDocsListType& x)
{
  this->clearStartDocsList_.set (x);
}

void StartMenuVistaProperties_t::
clearStartDocsList (const ClearStartDocsListOptional& x)
{
  this->clearStartDocsList_ = x;
}

const StartMenuVistaProperties_t::CShowAdminToolsOptional& StartMenuVistaProperties_t::
cShowAdminTools () const
{
  return this->cShowAdminTools_;
}

StartMenuVistaProperties_t::CShowAdminToolsOptional& StartMenuVistaProperties_t::
cShowAdminTools ()
{
  return this->cShowAdminTools_;
}

void StartMenuVistaProperties_t::
cShowAdminTools (const CShowAdminToolsType& x)
{
  this->cShowAdminTools_.set (x);
}

void StartMenuVistaProperties_t::
cShowAdminTools (const CShowAdminToolsOptional& x)
{
  this->cShowAdminTools_ = x;
}

const StartMenuVistaProperties_t::CShowFavoritesOptional& StartMenuVistaProperties_t::
cShowFavorites () const
{
  return this->cShowFavorites_;
}

StartMenuVistaProperties_t::CShowFavoritesOptional& StartMenuVistaProperties_t::
cShowFavorites ()
{
  return this->cShowFavorites_;
}

void StartMenuVistaProperties_t::
cShowFavorites (const CShowFavoritesType& x)
{
  this->cShowFavorites_.set (x);
}

void StartMenuVistaProperties_t::
cShowFavorites (const CShowFavoritesOptional& x)
{
  this->cShowFavorites_ = x;
}

const StartMenuVistaProperties_t::CShowLogoffOptional& StartMenuVistaProperties_t::
cShowLogoff () const
{
  return this->cShowLogoff_;
}

StartMenuVistaProperties_t::CShowLogoffOptional& StartMenuVistaProperties_t::
cShowLogoff ()
{
  return this->cShowLogoff_;
}

void StartMenuVistaProperties_t::
cShowLogoff (const CShowLogoffType& x)
{
  this->cShowLogoff_.set (x);
}

void StartMenuVistaProperties_t::
cShowLogoff (const CShowLogoffOptional& x)
{
  this->cShowLogoff_ = x;
}

const StartMenuVistaProperties_t::CShowRunOptional& StartMenuVistaProperties_t::
cShowRun () const
{
  return this->cShowRun_;
}

StartMenuVistaProperties_t::CShowRunOptional& StartMenuVistaProperties_t::
cShowRun ()
{
  return this->cShowRun_;
}

void StartMenuVistaProperties_t::
cShowRun (const CShowRunType& x)
{
  this->cShowRun_.set (x);
}

void StartMenuVistaProperties_t::
cShowRun (const CShowRunOptional& x)
{
  this->cShowRun_ = x;
}

const StartMenuVistaProperties_t::CEnableDragDropOptional& StartMenuVistaProperties_t::
cEnableDragDrop () const
{
  return this->cEnableDragDrop_;
}

StartMenuVistaProperties_t::CEnableDragDropOptional& StartMenuVistaProperties_t::
cEnableDragDrop ()
{
  return this->cEnableDragDrop_;
}

void StartMenuVistaProperties_t::
cEnableDragDrop (const CEnableDragDropType& x)
{
  this->cEnableDragDrop_.set (x);
}

void StartMenuVistaProperties_t::
cEnableDragDrop (const CEnableDragDropOptional& x)
{
  this->cEnableDragDrop_ = x;
}

const StartMenuVistaProperties_t::CCascadeControlPanelOptional& StartMenuVistaProperties_t::
cCascadeControlPanel () const
{
  return this->cCascadeControlPanel_;
}

StartMenuVistaProperties_t::CCascadeControlPanelOptional& StartMenuVistaProperties_t::
cCascadeControlPanel ()
{
  return this->cCascadeControlPanel_;
}

void StartMenuVistaProperties_t::
cCascadeControlPanel (const CCascadeControlPanelType& x)
{
  this->cCascadeControlPanel_.set (x);
}

void StartMenuVistaProperties_t::
cCascadeControlPanel (const CCascadeControlPanelOptional& x)
{
  this->cCascadeControlPanel_ = x;
}

const StartMenuVistaProperties_t::CCascadeMyDocumentsOptional& StartMenuVistaProperties_t::
cCascadeMyDocuments () const
{
  return this->cCascadeMyDocuments_;
}

StartMenuVistaProperties_t::CCascadeMyDocumentsOptional& StartMenuVistaProperties_t::
cCascadeMyDocuments ()
{
  return this->cCascadeMyDocuments_;
}

void StartMenuVistaProperties_t::
cCascadeMyDocuments (const CCascadeMyDocumentsType& x)
{
  this->cCascadeMyDocuments_.set (x);
}

void StartMenuVistaProperties_t::
cCascadeMyDocuments (const CCascadeMyDocumentsOptional& x)
{
  this->cCascadeMyDocuments_ = x;
}

const StartMenuVistaProperties_t::CCascadeNetworkConnectionsOptional& StartMenuVistaProperties_t::
cCascadeNetworkConnections () const
{
  return this->cCascadeNetworkConnections_;
}

StartMenuVistaProperties_t::CCascadeNetworkConnectionsOptional& StartMenuVistaProperties_t::
cCascadeNetworkConnections ()
{
  return this->cCascadeNetworkConnections_;
}

void StartMenuVistaProperties_t::
cCascadeNetworkConnections (const CCascadeNetworkConnectionsType& x)
{
  this->cCascadeNetworkConnections_.set (x);
}

void StartMenuVistaProperties_t::
cCascadeNetworkConnections (const CCascadeNetworkConnectionsOptional& x)
{
  this->cCascadeNetworkConnections_ = x;
}

const StartMenuVistaProperties_t::CCascadeMyPicturesOptional& StartMenuVistaProperties_t::
cCascadeMyPictures () const
{
  return this->cCascadeMyPictures_;
}

StartMenuVistaProperties_t::CCascadeMyPicturesOptional& StartMenuVistaProperties_t::
cCascadeMyPictures ()
{
  return this->cCascadeMyPictures_;
}

void StartMenuVistaProperties_t::
cCascadeMyPictures (const CCascadeMyPicturesType& x)
{
  this->cCascadeMyPictures_.set (x);
}

void StartMenuVistaProperties_t::
cCascadeMyPictures (const CCascadeMyPicturesOptional& x)
{
  this->cCascadeMyPictures_ = x;
}

const StartMenuVistaProperties_t::CCascadePrintersOptional& StartMenuVistaProperties_t::
cCascadePrinters () const
{
  return this->cCascadePrinters_;
}

StartMenuVistaProperties_t::CCascadePrintersOptional& StartMenuVistaProperties_t::
cCascadePrinters ()
{
  return this->cCascadePrinters_;
}

void StartMenuVistaProperties_t::
cCascadePrinters (const CCascadePrintersType& x)
{
  this->cCascadePrinters_.set (x);
}

void StartMenuVistaProperties_t::
cCascadePrinters (const CCascadePrintersOptional& x)
{
  this->cCascadePrinters_ = x;
}

const StartMenuVistaProperties_t::CScrollProgramsOptional& StartMenuVistaProperties_t::
cScrollPrograms () const
{
  return this->cScrollPrograms_;
}

StartMenuVistaProperties_t::CScrollProgramsOptional& StartMenuVistaProperties_t::
cScrollPrograms ()
{
  return this->cScrollPrograms_;
}

void StartMenuVistaProperties_t::
cScrollPrograms (const CScrollProgramsType& x)
{
  this->cScrollPrograms_.set (x);
}

void StartMenuVistaProperties_t::
cScrollPrograms (const CScrollProgramsOptional& x)
{
  this->cScrollPrograms_ = x;
}

const StartMenuVistaProperties_t::CSmallIconsOptional& StartMenuVistaProperties_t::
cSmallIcons () const
{
  return this->cSmallIcons_;
}

StartMenuVistaProperties_t::CSmallIconsOptional& StartMenuVistaProperties_t::
cSmallIcons ()
{
  return this->cSmallIcons_;
}

void StartMenuVistaProperties_t::
cSmallIcons (const CSmallIconsType& x)
{
  this->cSmallIcons_.set (x);
}

void StartMenuVistaProperties_t::
cSmallIcons (const CSmallIconsOptional& x)
{
  this->cSmallIcons_ = x;
}

const StartMenuVistaProperties_t::CPersonalizedOptional& StartMenuVistaProperties_t::
cPersonalized () const
{
  return this->cPersonalized_;
}

StartMenuVistaProperties_t::CPersonalizedOptional& StartMenuVistaProperties_t::
cPersonalized ()
{
  return this->cPersonalized_;
}

void StartMenuVistaProperties_t::
cPersonalized (const CPersonalizedType& x)
{
  this->cPersonalized_.set (x);
}

void StartMenuVistaProperties_t::
cPersonalized (const CPersonalizedOptional& x)
{
  this->cPersonalized_ = x;
}


// StartMenuVista_t
// 

const StartMenuVista_t::FiltersType& StartMenuVista_t::
Filters () const
{
  return this->Filters_.get ();
}

StartMenuVista_t::FiltersType& StartMenuVista_t::
Filters ()
{
  return this->Filters_.get ();
}

void StartMenuVista_t::
Filters (const FiltersType& x)
{
  this->Filters_.set (x);
}

void StartMenuVista_t::
Filters (::std::unique_ptr< FiltersType > x)
{
  this->Filters_.set (std::move (x));
}

const StartMenuVista_t::PropertiesType& StartMenuVista_t::
Properties () const
{
  return this->Properties_.get ();
}

StartMenuVista_t::PropertiesType& StartMenuVista_t::
Properties ()
{
  return this->Properties_.get ();
}

void StartMenuVista_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void StartMenuVista_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const StartMenuVista_t::ClsidType& StartMenuVista_t::
clsid () const
{
  return this->clsid_.get ();
}

StartMenuVista_t::ClsidType& StartMenuVista_t::
clsid ()
{
  return this->clsid_.get ();
}

void StartMenuVista_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void StartMenuVista_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const StartMenuVista_t::NameType& StartMenuVista_t::
name () const
{
  return this->name_.get ();
}

StartMenuVista_t::NameType& StartMenuVista_t::
name ()
{
  return this->name_.get ();
}

void StartMenuVista_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void StartMenuVista_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const StartMenuVista_t::ChangedOptional& StartMenuVista_t::
changed () const
{
  return this->changed_;
}

StartMenuVista_t::ChangedOptional& StartMenuVista_t::
changed ()
{
  return this->changed_;
}

void StartMenuVista_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void StartMenuVista_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void StartMenuVista_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const StartMenuVista_t::ImageOptional& StartMenuVista_t::
image () const
{
  return this->image_;
}

StartMenuVista_t::ImageOptional& StartMenuVista_t::
image ()
{
  return this->image_;
}

void StartMenuVista_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void StartMenuVista_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const StartMenuVista_t::UidType& StartMenuVista_t::
uid () const
{
  return this->uid_.get ();
}

StartMenuVista_t::UidType& StartMenuVista_t::
uid ()
{
  return this->uid_.get ();
}

void StartMenuVista_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void StartMenuVista_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const StartMenuVista_t::DescOptional& StartMenuVista_t::
desc () const
{
  return this->desc_;
}

StartMenuVista_t::DescOptional& StartMenuVista_t::
desc ()
{
  return this->desc_;
}

void StartMenuVista_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void StartMenuVista_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void StartMenuVista_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const StartMenuVista_t::BypassErrorsOptional& StartMenuVista_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

StartMenuVista_t::BypassErrorsOptional& StartMenuVista_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void StartMenuVista_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void StartMenuVista_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const StartMenuVista_t::UserContextOptional& StartMenuVista_t::
userContext () const
{
  return this->userContext_;
}

StartMenuVista_t::UserContextOptional& StartMenuVista_t::
userContext ()
{
  return this->userContext_;
}

void StartMenuVista_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void StartMenuVista_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const StartMenuVista_t::RemovePolicyOptional& StartMenuVista_t::
removePolicy () const
{
  return this->removePolicy_;
}

StartMenuVista_t::RemovePolicyOptional& StartMenuVista_t::
removePolicy ()
{
  return this->removePolicy_;
}

void StartMenuVista_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void StartMenuVista_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const StartMenuVista_t::DisabledOptional& StartMenuVista_t::
disabled () const
{
  return this->disabled_;
}

StartMenuVista_t::DisabledOptional& StartMenuVista_t::
disabled ()
{
  return this->disabled_;
}

void StartMenuVista_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void StartMenuVista_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}

const StartMenuVista_t::StatusOptional& StartMenuVista_t::
status () const
{
  return this->status_;
}

StartMenuVista_t::StatusOptional& StartMenuVista_t::
status ()
{
  return this->status_;
}

void StartMenuVista_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void StartMenuVista_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void StartMenuVista_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// StartMenuTaskbar
// 

const StartMenuTaskbar::StartMenuType& StartMenuTaskbar::
StartMenu () const
{
  return this->StartMenu_.get ();
}

StartMenuTaskbar::StartMenuType& StartMenuTaskbar::
StartMenu ()
{
  return this->StartMenu_.get ();
}

void StartMenuTaskbar::
StartMenu (const StartMenuType& x)
{
  this->StartMenu_.set (x);
}

void StartMenuTaskbar::
StartMenu (::std::unique_ptr< StartMenuType > x)
{
  this->StartMenu_.set (std::move (x));
}

const StartMenuTaskbar::StartMenuVistaType& StartMenuTaskbar::
StartMenuVista () const
{
  return this->StartMenuVista_.get ();
}

StartMenuTaskbar::StartMenuVistaType& StartMenuTaskbar::
StartMenuVista ()
{
  return this->StartMenuVista_.get ();
}

void StartMenuTaskbar::
StartMenuVista (const StartMenuVistaType& x)
{
  this->StartMenuVista_.set (x);
}

void StartMenuTaskbar::
StartMenuVista (::std::unique_ptr< StartMenuVistaType > x)
{
  this->StartMenuVista_.set (std::move (x));
}

const StartMenuTaskbar::ClsidType& StartMenuTaskbar::
clsid () const
{
  return this->clsid_.get ();
}

StartMenuTaskbar::ClsidType& StartMenuTaskbar::
clsid ()
{
  return this->clsid_.get ();
}

void StartMenuTaskbar::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void StartMenuTaskbar::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const StartMenuTaskbar::DisabledOptional& StartMenuTaskbar::
disabled () const
{
  return this->disabled_;
}

StartMenuTaskbar::DisabledOptional& StartMenuTaskbar::
disabled ()
{
  return this->disabled_;
}

void StartMenuTaskbar::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void StartMenuTaskbar::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// StartMenuProperties_t
//

StartMenuProperties_t::
StartMenuProperties_t ()
: ::xml_schema::Type (),
  largeMFUIcons_ (this),
  minMFU_ (this),
  autoCascade_ (this),
  notifyNewApps_ (this),
  showControlPanel_ (this),
  enableDragDrop_ (this),
  startMenuFavorites_ (this),
  showHelp_ (this),
  showMyComputer_ (this),
  showMyDocs_ (this),
  showMyMusic_ (this),
  showNetPlaces_ (this),
  showMyPics_ (this),
  showNetConn_ (this),
  showPrinters_ (this),
  showRun_ (this),
  scrollPrograms_ (this),
  showSearch_ (this),
  showRecentDocs_ (this),
  clearStartDocsList_ (this),
  cShowLogoff_ (this),
  cShowRun_ (this),
  cEnableDragDrop_ (this),
  cCascadeControlPanel_ (this),
  cCascadeMyDocuments_ (this),
  cCascadeMyPictures_ (this),
  cCascadeNetworkConnections_ (this),
  cCascadePrinters_ (this),
  cScrollPrograms_ (this),
  cPersonalized_ (this)
{
}

StartMenuProperties_t::
StartMenuProperties_t (const StartMenuProperties_t& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  largeMFUIcons_ (x.largeMFUIcons_, f, this),
  minMFU_ (x.minMFU_, f, this),
  autoCascade_ (x.autoCascade_, f, this),
  notifyNewApps_ (x.notifyNewApps_, f, this),
  showControlPanel_ (x.showControlPanel_, f, this),
  enableDragDrop_ (x.enableDragDrop_, f, this),
  startMenuFavorites_ (x.startMenuFavorites_, f, this),
  showHelp_ (x.showHelp_, f, this),
  showMyComputer_ (x.showMyComputer_, f, this),
  showMyDocs_ (x.showMyDocs_, f, this),
  showMyMusic_ (x.showMyMusic_, f, this),
  showNetPlaces_ (x.showNetPlaces_, f, this),
  showMyPics_ (x.showMyPics_, f, this),
  showNetConn_ (x.showNetConn_, f, this),
  showPrinters_ (x.showPrinters_, f, this),
  showRun_ (x.showRun_, f, this),
  scrollPrograms_ (x.scrollPrograms_, f, this),
  showSearch_ (x.showSearch_, f, this),
  showRecentDocs_ (x.showRecentDocs_, f, this),
  clearStartDocsList_ (x.clearStartDocsList_, f, this),
  cShowLogoff_ (x.cShowLogoff_, f, this),
  cShowRun_ (x.cShowRun_, f, this),
  cEnableDragDrop_ (x.cEnableDragDrop_, f, this),
  cCascadeControlPanel_ (x.cCascadeControlPanel_, f, this),
  cCascadeMyDocuments_ (x.cCascadeMyDocuments_, f, this),
  cCascadeMyPictures_ (x.cCascadeMyPictures_, f, this),
  cCascadeNetworkConnections_ (x.cCascadeNetworkConnections_, f, this),
  cCascadePrinters_ (x.cCascadePrinters_, f, this),
  cScrollPrograms_ (x.cScrollPrograms_, f, this),
  cPersonalized_ (x.cPersonalized_, f, this)
{
}

StartMenuProperties_t::
StartMenuProperties_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  largeMFUIcons_ (this),
  minMFU_ (this),
  autoCascade_ (this),
  notifyNewApps_ (this),
  showControlPanel_ (this),
  enableDragDrop_ (this),
  startMenuFavorites_ (this),
  showHelp_ (this),
  showMyComputer_ (this),
  showMyDocs_ (this),
  showMyMusic_ (this),
  showNetPlaces_ (this),
  showMyPics_ (this),
  showNetConn_ (this),
  showPrinters_ (this),
  showRun_ (this),
  scrollPrograms_ (this),
  showSearch_ (this),
  showRecentDocs_ (this),
  clearStartDocsList_ (this),
  cShowLogoff_ (this),
  cShowRun_ (this),
  cEnableDragDrop_ (this),
  cCascadeControlPanel_ (this),
  cCascadeMyDocuments_ (this),
  cCascadeMyPictures_ (this),
  cCascadeNetworkConnections_ (this),
  cCascadePrinters_ (this),
  cScrollPrograms_ (this),
  cPersonalized_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void StartMenuProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "largeMFUIcons" && n.namespace_ ().empty ())
    {
      this->largeMFUIcons_.set (LargeMFUIconsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "minMFU" && n.namespace_ ().empty ())
    {
      this->minMFU_.set (MinMFUTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "autoCascade" && n.namespace_ ().empty ())
    {
      this->autoCascade_.set (AutoCascadeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "notifyNewApps" && n.namespace_ ().empty ())
    {
      this->notifyNewApps_.set (NotifyNewAppsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showControlPanel" && n.namespace_ ().empty ())
    {
      this->showControlPanel_.set (ShowControlPanelTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "enableDragDrop" && n.namespace_ ().empty ())
    {
      this->enableDragDrop_.set (EnableDragDropTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "startMenuFavorites" && n.namespace_ ().empty ())
    {
      this->startMenuFavorites_.set (StartMenuFavoritesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showHelp" && n.namespace_ ().empty ())
    {
      this->showHelp_.set (ShowHelpTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyComputer" && n.namespace_ ().empty ())
    {
      this->showMyComputer_.set (ShowMyComputerTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyDocs" && n.namespace_ ().empty ())
    {
      this->showMyDocs_.set (ShowMyDocsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyMusic" && n.namespace_ ().empty ())
    {
      this->showMyMusic_.set (ShowMyMusicTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showNetPlaces" && n.namespace_ ().empty ())
    {
      this->showNetPlaces_.set (ShowNetPlacesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyPics" && n.namespace_ ().empty ())
    {
      this->showMyPics_.set (ShowMyPicsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showNetConn" && n.namespace_ ().empty ())
    {
      this->showNetConn_.set (ShowNetConnTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showPrinters" && n.namespace_ ().empty ())
    {
      this->showPrinters_.set (ShowPrintersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showRun" && n.namespace_ ().empty ())
    {
      this->showRun_.set (ShowRunTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "scrollPrograms" && n.namespace_ ().empty ())
    {
      this->scrollPrograms_.set (ScrollProgramsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showSearch" && n.namespace_ ().empty ())
    {
      this->showSearch_.set (ShowSearchTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showRecentDocs" && n.namespace_ ().empty ())
    {
      this->showRecentDocs_.set (ShowRecentDocsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "clearStartDocsList" && n.namespace_ ().empty ())
    {
      this->clearStartDocsList_.set (ClearStartDocsListTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cShowLogoff" && n.namespace_ ().empty ())
    {
      this->cShowLogoff_.set (CShowLogoffTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cShowRun" && n.namespace_ ().empty ())
    {
      this->cShowRun_.set (CShowRunTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cEnableDragDrop" && n.namespace_ ().empty ())
    {
      this->cEnableDragDrop_.set (CEnableDragDropTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeControlPanel" && n.namespace_ ().empty ())
    {
      this->cCascadeControlPanel_.set (CCascadeControlPanelTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeMyDocuments" && n.namespace_ ().empty ())
    {
      this->cCascadeMyDocuments_.set (CCascadeMyDocumentsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeMyPictures" && n.namespace_ ().empty ())
    {
      this->cCascadeMyPictures_.set (CCascadeMyPicturesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeNetworkConnections" && n.namespace_ ().empty ())
    {
      this->cCascadeNetworkConnections_.set (CCascadeNetworkConnectionsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadePrinters" && n.namespace_ ().empty ())
    {
      this->cCascadePrinters_.set (CCascadePrintersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cScrollPrograms" && n.namespace_ ().empty ())
    {
      this->cScrollPrograms_.set (CScrollProgramsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cPersonalized" && n.namespace_ ().empty ())
    {
      this->cPersonalized_.set (CPersonalizedTraits::create (i, f, this));
      continue;
    }
  }
}

StartMenuProperties_t* StartMenuProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class StartMenuProperties_t (*this, f, c);
}

StartMenuProperties_t& StartMenuProperties_t::
operator= (const StartMenuProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->largeMFUIcons_ = x.largeMFUIcons_;
    this->minMFU_ = x.minMFU_;
    this->autoCascade_ = x.autoCascade_;
    this->notifyNewApps_ = x.notifyNewApps_;
    this->showControlPanel_ = x.showControlPanel_;
    this->enableDragDrop_ = x.enableDragDrop_;
    this->startMenuFavorites_ = x.startMenuFavorites_;
    this->showHelp_ = x.showHelp_;
    this->showMyComputer_ = x.showMyComputer_;
    this->showMyDocs_ = x.showMyDocs_;
    this->showMyMusic_ = x.showMyMusic_;
    this->showNetPlaces_ = x.showNetPlaces_;
    this->showMyPics_ = x.showMyPics_;
    this->showNetConn_ = x.showNetConn_;
    this->showPrinters_ = x.showPrinters_;
    this->showRun_ = x.showRun_;
    this->scrollPrograms_ = x.scrollPrograms_;
    this->showSearch_ = x.showSearch_;
    this->showRecentDocs_ = x.showRecentDocs_;
    this->clearStartDocsList_ = x.clearStartDocsList_;
    this->cShowLogoff_ = x.cShowLogoff_;
    this->cShowRun_ = x.cShowRun_;
    this->cEnableDragDrop_ = x.cEnableDragDrop_;
    this->cCascadeControlPanel_ = x.cCascadeControlPanel_;
    this->cCascadeMyDocuments_ = x.cCascadeMyDocuments_;
    this->cCascadeMyPictures_ = x.cCascadeMyPictures_;
    this->cCascadeNetworkConnections_ = x.cCascadeNetworkConnections_;
    this->cCascadePrinters_ = x.cCascadePrinters_;
    this->cScrollPrograms_ = x.cScrollPrograms_;
    this->cPersonalized_ = x.cPersonalized_;
  }

  return *this;
}

StartMenuProperties_t::
~StartMenuProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, StartMenuProperties_t >
_xsd_StartMenuProperties_t_type_factory_init (
  "StartMenuProperties_t",
  "");

// StartMenu_t
//

StartMenu_t::
StartMenu_t (const FiltersType& Filters,
             const PropertiesType& Properties,
             const ClsidType& clsid,
             const NameType& name,
             const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (Filters, this),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  changed_ (this),
  image_ (this),
  uid_ (uid, this),
  disabled_ (this),
  status_ (this)
{
}

StartMenu_t::
StartMenu_t (::std::unique_ptr< FiltersType > Filters,
             ::std::unique_ptr< PropertiesType > Properties,
             const ClsidType& clsid,
             const NameType& name,
             const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (std::move (Filters), this),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  changed_ (this),
  image_ (this),
  uid_ (uid, this),
  disabled_ (this),
  status_ (this)
{
}

StartMenu_t::
StartMenu_t (const StartMenu_t& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Filters_ (x.Filters_, f, this),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  changed_ (x.changed_, f, this),
  image_ (x.image_, f, this),
  uid_ (x.uid_, f, this),
  disabled_ (x.disabled_, f, this),
  status_ (x.status_, f, this)
{
}

StartMenu_t::
StartMenu_t (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Filters_ (this),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  changed_ (this),
  image_ (this),
  uid_ (this),
  disabled_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void StartMenu_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Filters
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Filters",
          "",
          &::xsd::cxx::tree::factory_impl< FiltersType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Filters_.present ())
        {
          ::std::unique_ptr< FiltersType > r (
            dynamic_cast< FiltersType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Filters_.set (::std::move (r));
          continue;
        }
      }
    }

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Filters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Filters",
      "");
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

StartMenu_t* StartMenu_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class StartMenu_t (*this, f, c);
}

StartMenu_t& StartMenu_t::
operator= (const StartMenu_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Filters_ = x.Filters_;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->changed_ = x.changed_;
    this->image_ = x.image_;
    this->uid_ = x.uid_;
    this->disabled_ = x.disabled_;
    this->status_ = x.status_;
  }

  return *this;
}

StartMenu_t::
~StartMenu_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, StartMenu_t >
_xsd_StartMenu_t_type_factory_init (
  "StartMenu_t",
  "");

// FilterOs_t
//

FilterOs_t::
FilterOs_t (const NotType& not_,
            const BoolType& bool_,
            const ClassType& class_,
            const VersionType& version,
            const TypeType& type,
            const EditionType& edition,
            const SpType& sp)
: ::xml_schema::Type (),
  hidden_ (this),
  not__ (not_, this),
  bool__ (bool_, this),
  class__ (class_, this),
  version_ (version, this),
  type_ (type, this),
  edition_ (edition, this),
  sp_ (sp, this)
{
}

FilterOs_t::
FilterOs_t (const FilterOs_t& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  hidden_ (x.hidden_, f, this),
  not__ (x.not__, f, this),
  bool__ (x.bool__, f, this),
  class__ (x.class__, f, this),
  version_ (x.version_, f, this),
  type_ (x.type_, f, this),
  edition_ (x.edition_, f, this),
  sp_ (x.sp_, f, this)
{
}

FilterOs_t::
FilterOs_t (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  hidden_ (this),
  not__ (this),
  bool__ (this),
  class__ (this),
  version_ (this),
  type_ (this),
  edition_ (this),
  sp_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void FilterOs_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "hidden" && n.namespace_ ().empty ())
    {
      this->hidden_.set (HiddenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "not" && n.namespace_ ().empty ())
    {
      this->not__.set (NotTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bool" && n.namespace_ ().empty ())
    {
      this->bool__.set (BoolTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "class" && n.namespace_ ().empty ())
    {
      this->class__.set (ClassTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "version" && n.namespace_ ().empty ())
    {
      this->version_.set (VersionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (TypeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "edition" && n.namespace_ ().empty ())
    {
      this->edition_.set (EditionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "sp" && n.namespace_ ().empty ())
    {
      this->sp_.set (SpTraits::create (i, f, this));
      continue;
    }
  }

  if (!not__.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "not",
      "");
  }

  if (!bool__.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "bool",
      "");
  }

  if (!class__.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "class",
      "");
  }

  if (!version_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "version",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "type",
      "");
  }

  if (!edition_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "edition",
      "");
  }

  if (!sp_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "sp",
      "");
  }
}

FilterOs_t* FilterOs_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class FilterOs_t (*this, f, c);
}

FilterOs_t& FilterOs_t::
operator= (const FilterOs_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->hidden_ = x.hidden_;
    this->not__ = x.not__;
    this->bool__ = x.bool__;
    this->class__ = x.class__;
    this->version_ = x.version_;
    this->type_ = x.type_;
    this->edition_ = x.edition_;
    this->sp_ = x.sp_;
  }

  return *this;
}

FilterOs_t::
~FilterOs_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, FilterOs_t >
_xsd_FilterOs_t_type_factory_init (
  "FilterOs_t",
  "");

// Filters2_t
//

Filters2_t::
Filters2_t (const FilterOsType& FilterOs)
: ::xml_schema::Type (),
  FilterOs_ (FilterOs, this)
{
}

Filters2_t::
Filters2_t (::std::unique_ptr< FilterOsType > FilterOs)
: ::xml_schema::Type (),
  FilterOs_ (std::move (FilterOs), this)
{
}

Filters2_t::
Filters2_t (const Filters2_t& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  FilterOs_ (x.FilterOs_, f, this)
{
}

Filters2_t::
Filters2_t (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  FilterOs_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Filters2_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // FilterOs
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FilterOs",
          "",
          &::xsd::cxx::tree::factory_impl< FilterOsType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!FilterOs_.present ())
        {
          ::std::unique_ptr< FilterOsType > r (
            dynamic_cast< FilterOsType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->FilterOs_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!FilterOs_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "FilterOs",
      "");
  }
}

Filters2_t* Filters2_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Filters2_t (*this, f, c);
}

Filters2_t& Filters2_t::
operator= (const Filters2_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->FilterOs_ = x.FilterOs_;
  }

  return *this;
}

Filters2_t::
~Filters2_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Filters2_t >
_xsd_Filters2_t_type_factory_init (
  "Filters2_t",
  "");

// StartMenuVistaProperties_t
//

StartMenuVistaProperties_t::
StartMenuVistaProperties_t ()
: ::xml_schema::Type (),
  minMFU_ (this),
  showMyComputer_ (this),
  connectTo_ (this),
  showControlPanel_ (this),
  defaultPrograms_ (this),
  showMyDocs_ (this),
  enableContextMenu_ (this),
  showFavorites_ (this),
  showGames_ (this),
  showHelp_ (this),
  highlightNew_ (this),
  showMyMusic_ (this),
  showNetPlaces_ (this),
  openSubMenus_ (this),
  personalFolders_ (this),
  showMyPics_ (this),
  showPrinters_ (this),
  runCommand_ (this),
  showSearch_ (this),
  searchCommunications_ (this),
  searchFavorites_ (this),
  searchFiles_ (this),
  searchPrograms_ (this),
  trackProgs_ (this),
  sortAllPrograms_ (this),
  systemAdmin_ (this),
  useLargeIcons_ (this),
  showRecentDocs_ (this),
  clearStartDocsList_ (this),
  cShowAdminTools_ (this),
  cShowFavorites_ (this),
  cShowLogoff_ (this),
  cShowRun_ (this),
  cEnableDragDrop_ (this),
  cCascadeControlPanel_ (this),
  cCascadeMyDocuments_ (this),
  cCascadeNetworkConnections_ (this),
  cCascadeMyPictures_ (this),
  cCascadePrinters_ (this),
  cScrollPrograms_ (this),
  cSmallIcons_ (this),
  cPersonalized_ (this)
{
}

StartMenuVistaProperties_t::
StartMenuVistaProperties_t (const StartMenuVistaProperties_t& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  minMFU_ (x.minMFU_, f, this),
  showMyComputer_ (x.showMyComputer_, f, this),
  connectTo_ (x.connectTo_, f, this),
  showControlPanel_ (x.showControlPanel_, f, this),
  defaultPrograms_ (x.defaultPrograms_, f, this),
  showMyDocs_ (x.showMyDocs_, f, this),
  enableContextMenu_ (x.enableContextMenu_, f, this),
  showFavorites_ (x.showFavorites_, f, this),
  showGames_ (x.showGames_, f, this),
  showHelp_ (x.showHelp_, f, this),
  highlightNew_ (x.highlightNew_, f, this),
  showMyMusic_ (x.showMyMusic_, f, this),
  showNetPlaces_ (x.showNetPlaces_, f, this),
  openSubMenus_ (x.openSubMenus_, f, this),
  personalFolders_ (x.personalFolders_, f, this),
  showMyPics_ (x.showMyPics_, f, this),
  showPrinters_ (x.showPrinters_, f, this),
  runCommand_ (x.runCommand_, f, this),
  showSearch_ (x.showSearch_, f, this),
  searchCommunications_ (x.searchCommunications_, f, this),
  searchFavorites_ (x.searchFavorites_, f, this),
  searchFiles_ (x.searchFiles_, f, this),
  searchPrograms_ (x.searchPrograms_, f, this),
  trackProgs_ (x.trackProgs_, f, this),
  sortAllPrograms_ (x.sortAllPrograms_, f, this),
  systemAdmin_ (x.systemAdmin_, f, this),
  useLargeIcons_ (x.useLargeIcons_, f, this),
  showRecentDocs_ (x.showRecentDocs_, f, this),
  clearStartDocsList_ (x.clearStartDocsList_, f, this),
  cShowAdminTools_ (x.cShowAdminTools_, f, this),
  cShowFavorites_ (x.cShowFavorites_, f, this),
  cShowLogoff_ (x.cShowLogoff_, f, this),
  cShowRun_ (x.cShowRun_, f, this),
  cEnableDragDrop_ (x.cEnableDragDrop_, f, this),
  cCascadeControlPanel_ (x.cCascadeControlPanel_, f, this),
  cCascadeMyDocuments_ (x.cCascadeMyDocuments_, f, this),
  cCascadeNetworkConnections_ (x.cCascadeNetworkConnections_, f, this),
  cCascadeMyPictures_ (x.cCascadeMyPictures_, f, this),
  cCascadePrinters_ (x.cCascadePrinters_, f, this),
  cScrollPrograms_ (x.cScrollPrograms_, f, this),
  cSmallIcons_ (x.cSmallIcons_, f, this),
  cPersonalized_ (x.cPersonalized_, f, this)
{
}

StartMenuVistaProperties_t::
StartMenuVistaProperties_t (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  minMFU_ (this),
  showMyComputer_ (this),
  connectTo_ (this),
  showControlPanel_ (this),
  defaultPrograms_ (this),
  showMyDocs_ (this),
  enableContextMenu_ (this),
  showFavorites_ (this),
  showGames_ (this),
  showHelp_ (this),
  highlightNew_ (this),
  showMyMusic_ (this),
  showNetPlaces_ (this),
  openSubMenus_ (this),
  personalFolders_ (this),
  showMyPics_ (this),
  showPrinters_ (this),
  runCommand_ (this),
  showSearch_ (this),
  searchCommunications_ (this),
  searchFavorites_ (this),
  searchFiles_ (this),
  searchPrograms_ (this),
  trackProgs_ (this),
  sortAllPrograms_ (this),
  systemAdmin_ (this),
  useLargeIcons_ (this),
  showRecentDocs_ (this),
  clearStartDocsList_ (this),
  cShowAdminTools_ (this),
  cShowFavorites_ (this),
  cShowLogoff_ (this),
  cShowRun_ (this),
  cEnableDragDrop_ (this),
  cCascadeControlPanel_ (this),
  cCascadeMyDocuments_ (this),
  cCascadeNetworkConnections_ (this),
  cCascadeMyPictures_ (this),
  cCascadePrinters_ (this),
  cScrollPrograms_ (this),
  cSmallIcons_ (this),
  cPersonalized_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void StartMenuVistaProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "minMFU" && n.namespace_ ().empty ())
    {
      this->minMFU_.set (MinMFUTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyComputer" && n.namespace_ ().empty ())
    {
      this->showMyComputer_.set (ShowMyComputerTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "connectTo" && n.namespace_ ().empty ())
    {
      this->connectTo_.set (ConnectToTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showControlPanel" && n.namespace_ ().empty ())
    {
      this->showControlPanel_.set (ShowControlPanelTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "defaultPrograms" && n.namespace_ ().empty ())
    {
      this->defaultPrograms_.set (DefaultProgramsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyDocs" && n.namespace_ ().empty ())
    {
      this->showMyDocs_.set (ShowMyDocsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "enableContextMenu" && n.namespace_ ().empty ())
    {
      this->enableContextMenu_.set (EnableContextMenuTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showFavorites" && n.namespace_ ().empty ())
    {
      this->showFavorites_.set (ShowFavoritesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showGames" && n.namespace_ ().empty ())
    {
      this->showGames_.set (ShowGamesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showHelp" && n.namespace_ ().empty ())
    {
      this->showHelp_.set (ShowHelpTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "highlightNew" && n.namespace_ ().empty ())
    {
      this->highlightNew_.set (HighlightNewTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyMusic" && n.namespace_ ().empty ())
    {
      this->showMyMusic_.set (ShowMyMusicTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showNetPlaces" && n.namespace_ ().empty ())
    {
      this->showNetPlaces_.set (ShowNetPlacesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "openSubMenus" && n.namespace_ ().empty ())
    {
      this->openSubMenus_.set (OpenSubMenusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "personalFolders" && n.namespace_ ().empty ())
    {
      this->personalFolders_.set (PersonalFoldersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showMyPics" && n.namespace_ ().empty ())
    {
      this->showMyPics_.set (ShowMyPicsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showPrinters" && n.namespace_ ().empty ())
    {
      this->showPrinters_.set (ShowPrintersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "runCommand" && n.namespace_ ().empty ())
    {
      this->runCommand_.set (RunCommandTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showSearch" && n.namespace_ ().empty ())
    {
      this->showSearch_.set (ShowSearchTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "searchCommunications" && n.namespace_ ().empty ())
    {
      this->searchCommunications_.set (SearchCommunicationsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "searchFavorites" && n.namespace_ ().empty ())
    {
      this->searchFavorites_.set (SearchFavoritesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "searchFiles" && n.namespace_ ().empty ())
    {
      this->searchFiles_.set (SearchFilesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "searchPrograms" && n.namespace_ ().empty ())
    {
      this->searchPrograms_.set (SearchProgramsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "trackProgs" && n.namespace_ ().empty ())
    {
      this->trackProgs_.set (TrackProgsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "sortAllPrograms" && n.namespace_ ().empty ())
    {
      this->sortAllPrograms_.set (SortAllProgramsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "systemAdmin" && n.namespace_ ().empty ())
    {
      this->systemAdmin_.set (SystemAdminTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useLargeIcons" && n.namespace_ ().empty ())
    {
      this->useLargeIcons_.set (UseLargeIconsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showRecentDocs" && n.namespace_ ().empty ())
    {
      this->showRecentDocs_.set (ShowRecentDocsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "clearStartDocsList" && n.namespace_ ().empty ())
    {
      this->clearStartDocsList_.set (ClearStartDocsListTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cShowAdminTools" && n.namespace_ ().empty ())
    {
      this->cShowAdminTools_.set (CShowAdminToolsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cShowFavorites" && n.namespace_ ().empty ())
    {
      this->cShowFavorites_.set (CShowFavoritesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cShowLogoff" && n.namespace_ ().empty ())
    {
      this->cShowLogoff_.set (CShowLogoffTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cShowRun" && n.namespace_ ().empty ())
    {
      this->cShowRun_.set (CShowRunTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cEnableDragDrop" && n.namespace_ ().empty ())
    {
      this->cEnableDragDrop_.set (CEnableDragDropTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeControlPanel" && n.namespace_ ().empty ())
    {
      this->cCascadeControlPanel_.set (CCascadeControlPanelTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeMyDocuments" && n.namespace_ ().empty ())
    {
      this->cCascadeMyDocuments_.set (CCascadeMyDocumentsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeNetworkConnections" && n.namespace_ ().empty ())
    {
      this->cCascadeNetworkConnections_.set (CCascadeNetworkConnectionsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadeMyPictures" && n.namespace_ ().empty ())
    {
      this->cCascadeMyPictures_.set (CCascadeMyPicturesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cCascadePrinters" && n.namespace_ ().empty ())
    {
      this->cCascadePrinters_.set (CCascadePrintersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cScrollPrograms" && n.namespace_ ().empty ())
    {
      this->cScrollPrograms_.set (CScrollProgramsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cSmallIcons" && n.namespace_ ().empty ())
    {
      this->cSmallIcons_.set (CSmallIconsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cPersonalized" && n.namespace_ ().empty ())
    {
      this->cPersonalized_.set (CPersonalizedTraits::create (i, f, this));
      continue;
    }
  }
}

StartMenuVistaProperties_t* StartMenuVistaProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class StartMenuVistaProperties_t (*this, f, c);
}

StartMenuVistaProperties_t& StartMenuVistaProperties_t::
operator= (const StartMenuVistaProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->minMFU_ = x.minMFU_;
    this->showMyComputer_ = x.showMyComputer_;
    this->connectTo_ = x.connectTo_;
    this->showControlPanel_ = x.showControlPanel_;
    this->defaultPrograms_ = x.defaultPrograms_;
    this->showMyDocs_ = x.showMyDocs_;
    this->enableContextMenu_ = x.enableContextMenu_;
    this->showFavorites_ = x.showFavorites_;
    this->showGames_ = x.showGames_;
    this->showHelp_ = x.showHelp_;
    this->highlightNew_ = x.highlightNew_;
    this->showMyMusic_ = x.showMyMusic_;
    this->showNetPlaces_ = x.showNetPlaces_;
    this->openSubMenus_ = x.openSubMenus_;
    this->personalFolders_ = x.personalFolders_;
    this->showMyPics_ = x.showMyPics_;
    this->showPrinters_ = x.showPrinters_;
    this->runCommand_ = x.runCommand_;
    this->showSearch_ = x.showSearch_;
    this->searchCommunications_ = x.searchCommunications_;
    this->searchFavorites_ = x.searchFavorites_;
    this->searchFiles_ = x.searchFiles_;
    this->searchPrograms_ = x.searchPrograms_;
    this->trackProgs_ = x.trackProgs_;
    this->sortAllPrograms_ = x.sortAllPrograms_;
    this->systemAdmin_ = x.systemAdmin_;
    this->useLargeIcons_ = x.useLargeIcons_;
    this->showRecentDocs_ = x.showRecentDocs_;
    this->clearStartDocsList_ = x.clearStartDocsList_;
    this->cShowAdminTools_ = x.cShowAdminTools_;
    this->cShowFavorites_ = x.cShowFavorites_;
    this->cShowLogoff_ = x.cShowLogoff_;
    this->cShowRun_ = x.cShowRun_;
    this->cEnableDragDrop_ = x.cEnableDragDrop_;
    this->cCascadeControlPanel_ = x.cCascadeControlPanel_;
    this->cCascadeMyDocuments_ = x.cCascadeMyDocuments_;
    this->cCascadeNetworkConnections_ = x.cCascadeNetworkConnections_;
    this->cCascadeMyPictures_ = x.cCascadeMyPictures_;
    this->cCascadePrinters_ = x.cCascadePrinters_;
    this->cScrollPrograms_ = x.cScrollPrograms_;
    this->cSmallIcons_ = x.cSmallIcons_;
    this->cPersonalized_ = x.cPersonalized_;
  }

  return *this;
}

StartMenuVistaProperties_t::
~StartMenuVistaProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, StartMenuVistaProperties_t >
_xsd_StartMenuVistaProperties_t_type_factory_init (
  "StartMenuVistaProperties_t",
  "");

// StartMenuVista_t
//

StartMenuVista_t::
StartMenuVista_t (const FiltersType& Filters,
                  const PropertiesType& Properties,
                  const ClsidType& clsid,
                  const NameType& name,
                  const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (Filters, this),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  changed_ (this),
  image_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  disabled_ (this),
  status_ (this)
{
}

StartMenuVista_t::
StartMenuVista_t (::std::unique_ptr< FiltersType > Filters,
                  ::std::unique_ptr< PropertiesType > Properties,
                  const ClsidType& clsid,
                  const NameType& name,
                  const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (std::move (Filters), this),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  changed_ (this),
  image_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  disabled_ (this),
  status_ (this)
{
}

StartMenuVista_t::
StartMenuVista_t (const StartMenuVista_t& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Filters_ (x.Filters_, f, this),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  changed_ (x.changed_, f, this),
  image_ (x.image_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  disabled_ (x.disabled_, f, this),
  status_ (x.status_, f, this)
{
}

StartMenuVista_t::
StartMenuVista_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Filters_ (this),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  changed_ (this),
  image_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  disabled_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void StartMenuVista_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Filters
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Filters",
          "",
          &::xsd::cxx::tree::factory_impl< FiltersType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Filters_.present ())
        {
          ::std::unique_ptr< FiltersType > r (
            dynamic_cast< FiltersType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Filters_.set (::std::move (r));
          continue;
        }
      }
    }

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Filters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Filters",
      "");
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

StartMenuVista_t* StartMenuVista_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class StartMenuVista_t (*this, f, c);
}

StartMenuVista_t& StartMenuVista_t::
operator= (const StartMenuVista_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Filters_ = x.Filters_;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->changed_ = x.changed_;
    this->image_ = x.image_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->disabled_ = x.disabled_;
    this->status_ = x.status_;
  }

  return *this;
}

StartMenuVista_t::
~StartMenuVista_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, StartMenuVista_t >
_xsd_StartMenuVista_t_type_factory_init (
  "StartMenuVista_t",
  "");

// StartMenuTaskbar
//

StartMenuTaskbar::
StartMenuTaskbar (const StartMenuType& StartMenu,
                  const StartMenuVistaType& StartMenuVista,
                  const ClsidType& clsid)
: ::xml_schema::Type (),
  StartMenu_ (StartMenu, this),
  StartMenuVista_ (StartMenuVista, this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

StartMenuTaskbar::
StartMenuTaskbar (::std::unique_ptr< StartMenuType > StartMenu,
                  ::std::unique_ptr< StartMenuVistaType > StartMenuVista,
                  const ClsidType& clsid)
: ::xml_schema::Type (),
  StartMenu_ (std::move (StartMenu), this),
  StartMenuVista_ (std::move (StartMenuVista), this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

StartMenuTaskbar::
StartMenuTaskbar (const StartMenuTaskbar& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  StartMenu_ (x.StartMenu_, f, this),
  StartMenuVista_ (x.StartMenuVista_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

StartMenuTaskbar::
StartMenuTaskbar (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  StartMenu_ (this),
  StartMenuVista_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void StartMenuTaskbar::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // StartMenu
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StartMenu",
          "",
          &::xsd::cxx::tree::factory_impl< StartMenuType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!StartMenu_.present ())
        {
          ::std::unique_ptr< StartMenuType > r (
            dynamic_cast< StartMenuType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->StartMenu_.set (::std::move (r));
          continue;
        }
      }
    }

    // StartMenuVista
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "StartMenuVista",
          "",
          &::xsd::cxx::tree::factory_impl< StartMenuVistaType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!StartMenuVista_.present ())
        {
          ::std::unique_ptr< StartMenuVistaType > r (
            dynamic_cast< StartMenuVistaType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->StartMenuVista_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!StartMenu_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "StartMenu",
      "");
  }

  if (!StartMenuVista_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "StartMenuVista",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

StartMenuTaskbar* StartMenuTaskbar::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class StartMenuTaskbar (*this, f, c);
}

StartMenuTaskbar& StartMenuTaskbar::
operator= (const StartMenuTaskbar& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->StartMenu_ = x.StartMenu_;
    this->StartMenuVista_ = x.StartMenuVista_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

StartMenuTaskbar::
~StartMenuTaskbar ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const StartMenuProperties_t& i)
{
  if (i.largeMFUIcons ())
  {
    o << ::std::endl << "largeMFUIcons: " << *i.largeMFUIcons ();
  }

  if (i.minMFU ())
  {
    o << ::std::endl << "minMFU: " << *i.minMFU ();
  }

  if (i.autoCascade ())
  {
    o << ::std::endl << "autoCascade: " << *i.autoCascade ();
  }

  if (i.notifyNewApps ())
  {
    o << ::std::endl << "notifyNewApps: " << *i.notifyNewApps ();
  }

  if (i.showControlPanel ())
  {
    o << ::std::endl << "showControlPanel: " << *i.showControlPanel ();
  }

  if (i.enableDragDrop ())
  {
    o << ::std::endl << "enableDragDrop: " << *i.enableDragDrop ();
  }

  if (i.startMenuFavorites ())
  {
    o << ::std::endl << "startMenuFavorites: " << *i.startMenuFavorites ();
  }

  if (i.showHelp ())
  {
    o << ::std::endl << "showHelp: " << *i.showHelp ();
  }

  if (i.showMyComputer ())
  {
    o << ::std::endl << "showMyComputer: " << *i.showMyComputer ();
  }

  if (i.showMyDocs ())
  {
    o << ::std::endl << "showMyDocs: " << *i.showMyDocs ();
  }

  if (i.showMyMusic ())
  {
    o << ::std::endl << "showMyMusic: " << *i.showMyMusic ();
  }

  if (i.showNetPlaces ())
  {
    o << ::std::endl << "showNetPlaces: " << *i.showNetPlaces ();
  }

  if (i.showMyPics ())
  {
    o << ::std::endl << "showMyPics: " << *i.showMyPics ();
  }

  if (i.showNetConn ())
  {
    o << ::std::endl << "showNetConn: " << *i.showNetConn ();
  }

  if (i.showPrinters ())
  {
    o << ::std::endl << "showPrinters: " << *i.showPrinters ();
  }

  if (i.showRun ())
  {
    o << ::std::endl << "showRun: " << *i.showRun ();
  }

  if (i.scrollPrograms ())
  {
    o << ::std::endl << "scrollPrograms: " << *i.scrollPrograms ();
  }

  if (i.showSearch ())
  {
    o << ::std::endl << "showSearch: " << *i.showSearch ();
  }

  if (i.showRecentDocs ())
  {
    o << ::std::endl << "showRecentDocs: " << *i.showRecentDocs ();
  }

  if (i.clearStartDocsList ())
  {
    o << ::std::endl << "clearStartDocsList: " << *i.clearStartDocsList ();
  }

  if (i.cShowLogoff ())
  {
    o << ::std::endl << "cShowLogoff: " << *i.cShowLogoff ();
  }

  if (i.cShowRun ())
  {
    o << ::std::endl << "cShowRun: " << *i.cShowRun ();
  }

  if (i.cEnableDragDrop ())
  {
    o << ::std::endl << "cEnableDragDrop: " << *i.cEnableDragDrop ();
  }

  if (i.cCascadeControlPanel ())
  {
    o << ::std::endl << "cCascadeControlPanel: " << *i.cCascadeControlPanel ();
  }

  if (i.cCascadeMyDocuments ())
  {
    o << ::std::endl << "cCascadeMyDocuments: " << *i.cCascadeMyDocuments ();
  }

  if (i.cCascadeMyPictures ())
  {
    o << ::std::endl << "cCascadeMyPictures: " << *i.cCascadeMyPictures ();
  }

  if (i.cCascadeNetworkConnections ())
  {
    o << ::std::endl << "cCascadeNetworkConnections: " << *i.cCascadeNetworkConnections ();
  }

  if (i.cCascadePrinters ())
  {
    o << ::std::endl << "cCascadePrinters: " << *i.cCascadePrinters ();
  }

  if (i.cScrollPrograms ())
  {
    o << ::std::endl << "cScrollPrograms: " << *i.cScrollPrograms ();
  }

  if (i.cPersonalized ())
  {
    o << ::std::endl << "cPersonalized: " << *i.cPersonalized ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StartMenuProperties_t >
_xsd_StartMenuProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const StartMenu_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Filters: ";
    om.insert (o, i.Filters ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StartMenu_t >
_xsd_StartMenu_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const FilterOs_t& i)
{
  if (i.hidden ())
  {
    o << ::std::endl << "hidden: " << *i.hidden ();
  }

  o << ::std::endl << "not: " << i.not_ ();
  o << ::std::endl << "bool: " << i.bool_ ();
  o << ::std::endl << "class: " << i.class_ ();
  o << ::std::endl << "version: " << i.version ();
  o << ::std::endl << "type: " << i.type ();
  o << ::std::endl << "edition: " << i.edition ();
  o << ::std::endl << "sp: " << i.sp ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FilterOs_t >
_xsd_FilterOs_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Filters2_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "FilterOs: ";
    om.insert (o, i.FilterOs ());
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Filters2_t >
_xsd_Filters2_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const StartMenuVistaProperties_t& i)
{
  if (i.minMFU ())
  {
    o << ::std::endl << "minMFU: " << *i.minMFU ();
  }

  if (i.showMyComputer ())
  {
    o << ::std::endl << "showMyComputer: " << *i.showMyComputer ();
  }

  if (i.connectTo ())
  {
    o << ::std::endl << "connectTo: " << *i.connectTo ();
  }

  if (i.showControlPanel ())
  {
    o << ::std::endl << "showControlPanel: " << *i.showControlPanel ();
  }

  if (i.defaultPrograms ())
  {
    o << ::std::endl << "defaultPrograms: " << *i.defaultPrograms ();
  }

  if (i.showMyDocs ())
  {
    o << ::std::endl << "showMyDocs: " << *i.showMyDocs ();
  }

  if (i.enableContextMenu ())
  {
    o << ::std::endl << "enableContextMenu: " << *i.enableContextMenu ();
  }

  if (i.showFavorites ())
  {
    o << ::std::endl << "showFavorites: " << *i.showFavorites ();
  }

  if (i.showGames ())
  {
    o << ::std::endl << "showGames: " << *i.showGames ();
  }

  if (i.showHelp ())
  {
    o << ::std::endl << "showHelp: " << *i.showHelp ();
  }

  if (i.highlightNew ())
  {
    o << ::std::endl << "highlightNew: " << *i.highlightNew ();
  }

  if (i.showMyMusic ())
  {
    o << ::std::endl << "showMyMusic: " << *i.showMyMusic ();
  }

  if (i.showNetPlaces ())
  {
    o << ::std::endl << "showNetPlaces: " << *i.showNetPlaces ();
  }

  if (i.openSubMenus ())
  {
    o << ::std::endl << "openSubMenus: " << *i.openSubMenus ();
  }

  if (i.personalFolders ())
  {
    o << ::std::endl << "personalFolders: " << *i.personalFolders ();
  }

  if (i.showMyPics ())
  {
    o << ::std::endl << "showMyPics: " << *i.showMyPics ();
  }

  if (i.showPrinters ())
  {
    o << ::std::endl << "showPrinters: " << *i.showPrinters ();
  }

  if (i.runCommand ())
  {
    o << ::std::endl << "runCommand: " << *i.runCommand ();
  }

  if (i.showSearch ())
  {
    o << ::std::endl << "showSearch: " << *i.showSearch ();
  }

  if (i.searchCommunications ())
  {
    o << ::std::endl << "searchCommunications: " << *i.searchCommunications ();
  }

  if (i.searchFavorites ())
  {
    o << ::std::endl << "searchFavorites: " << *i.searchFavorites ();
  }

  if (i.searchFiles ())
  {
    o << ::std::endl << "searchFiles: " << *i.searchFiles ();
  }

  if (i.searchPrograms ())
  {
    o << ::std::endl << "searchPrograms: " << *i.searchPrograms ();
  }

  if (i.trackProgs ())
  {
    o << ::std::endl << "trackProgs: " << *i.trackProgs ();
  }

  if (i.sortAllPrograms ())
  {
    o << ::std::endl << "sortAllPrograms: " << *i.sortAllPrograms ();
  }

  if (i.systemAdmin ())
  {
    o << ::std::endl << "systemAdmin: " << *i.systemAdmin ();
  }

  if (i.useLargeIcons ())
  {
    o << ::std::endl << "useLargeIcons: " << *i.useLargeIcons ();
  }

  if (i.showRecentDocs ())
  {
    o << ::std::endl << "showRecentDocs: " << *i.showRecentDocs ();
  }

  if (i.clearStartDocsList ())
  {
    o << ::std::endl << "clearStartDocsList: " << *i.clearStartDocsList ();
  }

  if (i.cShowAdminTools ())
  {
    o << ::std::endl << "cShowAdminTools: " << *i.cShowAdminTools ();
  }

  if (i.cShowFavorites ())
  {
    o << ::std::endl << "cShowFavorites: " << *i.cShowFavorites ();
  }

  if (i.cShowLogoff ())
  {
    o << ::std::endl << "cShowLogoff: " << *i.cShowLogoff ();
  }

  if (i.cShowRun ())
  {
    o << ::std::endl << "cShowRun: " << *i.cShowRun ();
  }

  if (i.cEnableDragDrop ())
  {
    o << ::std::endl << "cEnableDragDrop: " << *i.cEnableDragDrop ();
  }

  if (i.cCascadeControlPanel ())
  {
    o << ::std::endl << "cCascadeControlPanel: " << *i.cCascadeControlPanel ();
  }

  if (i.cCascadeMyDocuments ())
  {
    o << ::std::endl << "cCascadeMyDocuments: " << *i.cCascadeMyDocuments ();
  }

  if (i.cCascadeNetworkConnections ())
  {
    o << ::std::endl << "cCascadeNetworkConnections: " << *i.cCascadeNetworkConnections ();
  }

  if (i.cCascadeMyPictures ())
  {
    o << ::std::endl << "cCascadeMyPictures: " << *i.cCascadeMyPictures ();
  }

  if (i.cCascadePrinters ())
  {
    o << ::std::endl << "cCascadePrinters: " << *i.cCascadePrinters ();
  }

  if (i.cScrollPrograms ())
  {
    o << ::std::endl << "cScrollPrograms: " << *i.cScrollPrograms ();
  }

  if (i.cSmallIcons ())
  {
    o << ::std::endl << "cSmallIcons: " << *i.cSmallIcons ();
  }

  if (i.cPersonalized ())
  {
    o << ::std::endl << "cPersonalized: " << *i.cPersonalized ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StartMenuVistaProperties_t >
_xsd_StartMenuVistaProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const StartMenuVista_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Filters: ";
    om.insert (o, i.Filters ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, StartMenuVista_t >
_xsd_StartMenuVista_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const StartMenuTaskbar& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "StartMenu: ";
    om.insert (o, i.StartMenu ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "StartMenuVista: ";
    om.insert (o, i.StartMenuVista ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::StartMenuTaskbar > (
    ::StartMenuTaskbar_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::StartMenuTaskbar > (
    ::StartMenuTaskbar_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::StartMenuTaskbar > (
    ::StartMenuTaskbar_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::StartMenuTaskbar_ (isrc, f, p);
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::StartMenuTaskbar_ (isrc, h, f, p);
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::StartMenuTaskbar_ (isrc, h, f, p);
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::StartMenuTaskbar_ (isrc, f, p);
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::StartMenuTaskbar_ (isrc, h, f, p);
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::StartMenuTaskbar_ (isrc, h, f, p);
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::StartMenuTaskbar > (
    ::StartMenuTaskbar_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::StartMenuTaskbar > (
    ::StartMenuTaskbar_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::StartMenuTaskbar > (
    ::StartMenuTaskbar_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::StartMenuTaskbar > (
      ::StartMenuTaskbar_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "StartMenuTaskbar" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::StartMenuTaskbar > r (
      ::xsd::cxx::tree::traits< ::StartMenuTaskbar, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "StartMenuTaskbar",
    "");
}

::std::unique_ptr< ::StartMenuTaskbar >
StartMenuTaskbar_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "StartMenuTaskbar" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::StartMenuTaskbar > r (
      ::xsd::cxx::tree::traits< ::StartMenuTaskbar, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "StartMenuTaskbar",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const StartMenuProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // largeMFUIcons
  //
  if (i.largeMFUIcons ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "largeMFUIcons",
        e));

    a << *i.largeMFUIcons ();
  }

  // minMFU
  //
  if (i.minMFU ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "minMFU",
        e));

    a << *i.minMFU ();
  }

  // autoCascade
  //
  if (i.autoCascade ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "autoCascade",
        e));

    a << *i.autoCascade ();
  }

  // notifyNewApps
  //
  if (i.notifyNewApps ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "notifyNewApps",
        e));

    a << *i.notifyNewApps ();
  }

  // showControlPanel
  //
  if (i.showControlPanel ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showControlPanel",
        e));

    a << *i.showControlPanel ();
  }

  // enableDragDrop
  //
  if (i.enableDragDrop ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "enableDragDrop",
        e));

    a << *i.enableDragDrop ();
  }

  // startMenuFavorites
  //
  if (i.startMenuFavorites ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "startMenuFavorites",
        e));

    a << *i.startMenuFavorites ();
  }

  // showHelp
  //
  if (i.showHelp ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showHelp",
        e));

    a << *i.showHelp ();
  }

  // showMyComputer
  //
  if (i.showMyComputer ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyComputer",
        e));

    a << *i.showMyComputer ();
  }

  // showMyDocs
  //
  if (i.showMyDocs ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyDocs",
        e));

    a << *i.showMyDocs ();
  }

  // showMyMusic
  //
  if (i.showMyMusic ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyMusic",
        e));

    a << *i.showMyMusic ();
  }

  // showNetPlaces
  //
  if (i.showNetPlaces ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showNetPlaces",
        e));

    a << *i.showNetPlaces ();
  }

  // showMyPics
  //
  if (i.showMyPics ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyPics",
        e));

    a << *i.showMyPics ();
  }

  // showNetConn
  //
  if (i.showNetConn ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showNetConn",
        e));

    a << *i.showNetConn ();
  }

  // showPrinters
  //
  if (i.showPrinters ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showPrinters",
        e));

    a << *i.showPrinters ();
  }

  // showRun
  //
  if (i.showRun ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showRun",
        e));

    a << *i.showRun ();
  }

  // scrollPrograms
  //
  if (i.scrollPrograms ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "scrollPrograms",
        e));

    a << *i.scrollPrograms ();
  }

  // showSearch
  //
  if (i.showSearch ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showSearch",
        e));

    a << *i.showSearch ();
  }

  // showRecentDocs
  //
  if (i.showRecentDocs ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showRecentDocs",
        e));

    a << *i.showRecentDocs ();
  }

  // clearStartDocsList
  //
  if (i.clearStartDocsList ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clearStartDocsList",
        e));

    a << *i.clearStartDocsList ();
  }

  // cShowLogoff
  //
  if (i.cShowLogoff ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cShowLogoff",
        e));

    a << *i.cShowLogoff ();
  }

  // cShowRun
  //
  if (i.cShowRun ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cShowRun",
        e));

    a << *i.cShowRun ();
  }

  // cEnableDragDrop
  //
  if (i.cEnableDragDrop ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cEnableDragDrop",
        e));

    a << *i.cEnableDragDrop ();
  }

  // cCascadeControlPanel
  //
  if (i.cCascadeControlPanel ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeControlPanel",
        e));

    a << *i.cCascadeControlPanel ();
  }

  // cCascadeMyDocuments
  //
  if (i.cCascadeMyDocuments ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeMyDocuments",
        e));

    a << *i.cCascadeMyDocuments ();
  }

  // cCascadeMyPictures
  //
  if (i.cCascadeMyPictures ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeMyPictures",
        e));

    a << *i.cCascadeMyPictures ();
  }

  // cCascadeNetworkConnections
  //
  if (i.cCascadeNetworkConnections ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeNetworkConnections",
        e));

    a << *i.cCascadeNetworkConnections ();
  }

  // cCascadePrinters
  //
  if (i.cCascadePrinters ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadePrinters",
        e));

    a << *i.cCascadePrinters ();
  }

  // cScrollPrograms
  //
  if (i.cScrollPrograms ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cScrollPrograms",
        e));

    a << *i.cScrollPrograms ();
  }

  // cPersonalized
  //
  if (i.cPersonalized ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cPersonalized",
        e));

    a << *i.cPersonalized ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StartMenuProperties_t >
_xsd_StartMenuProperties_t_type_serializer_init (
  "StartMenuProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const StartMenu_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Filters
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const StartMenu_t::FiltersType& x (i.Filters ());
    if (typeid (StartMenu_t::FiltersType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filters",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Filters",
        "",
        false, true, e, x);
  }

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const StartMenu_t::PropertiesType& x (i.Properties ());
    if (typeid (StartMenu_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StartMenu_t >
_xsd_StartMenu_t_type_serializer_init (
  "StartMenu_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const FilterOs_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // hidden
  //
  if (i.hidden ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hidden",
        e));

    a << *i.hidden ();
  }

  // not
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "not",
        e));

    a << i.not_ ();
  }

  // bool
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bool",
        e));

    a << i.bool_ ();
  }

  // class
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "class",
        e));

    a << i.class_ ();
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "version",
        e));

    a << i.version ();
  }

  // type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << i.type ();
  }

  // edition
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "edition",
        e));

    a << i.edition ();
  }

  // sp
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sp",
        e));

    a << i.sp ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FilterOs_t >
_xsd_FilterOs_t_type_serializer_init (
  "FilterOs_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Filters2_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // FilterOs
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Filters2_t::FilterOsType& x (i.FilterOs ());
    if (typeid (Filters2_t::FilterOsType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FilterOs",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "FilterOs",
        "",
        false, true, e, x);
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Filters2_t >
_xsd_Filters2_t_type_serializer_init (
  "Filters2_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const StartMenuVistaProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // minMFU
  //
  if (i.minMFU ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "minMFU",
        e));

    a << *i.minMFU ();
  }

  // showMyComputer
  //
  if (i.showMyComputer ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyComputer",
        e));

    a << *i.showMyComputer ();
  }

  // connectTo
  //
  if (i.connectTo ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "connectTo",
        e));

    a << *i.connectTo ();
  }

  // showControlPanel
  //
  if (i.showControlPanel ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showControlPanel",
        e));

    a << *i.showControlPanel ();
  }

  // defaultPrograms
  //
  if (i.defaultPrograms ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "defaultPrograms",
        e));

    a << *i.defaultPrograms ();
  }

  // showMyDocs
  //
  if (i.showMyDocs ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyDocs",
        e));

    a << *i.showMyDocs ();
  }

  // enableContextMenu
  //
  if (i.enableContextMenu ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "enableContextMenu",
        e));

    a << *i.enableContextMenu ();
  }

  // showFavorites
  //
  if (i.showFavorites ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showFavorites",
        e));

    a << *i.showFavorites ();
  }

  // showGames
  //
  if (i.showGames ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showGames",
        e));

    a << *i.showGames ();
  }

  // showHelp
  //
  if (i.showHelp ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showHelp",
        e));

    a << *i.showHelp ();
  }

  // highlightNew
  //
  if (i.highlightNew ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "highlightNew",
        e));

    a << *i.highlightNew ();
  }

  // showMyMusic
  //
  if (i.showMyMusic ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyMusic",
        e));

    a << *i.showMyMusic ();
  }

  // showNetPlaces
  //
  if (i.showNetPlaces ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showNetPlaces",
        e));

    a << *i.showNetPlaces ();
  }

  // openSubMenus
  //
  if (i.openSubMenus ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "openSubMenus",
        e));

    a << *i.openSubMenus ();
  }

  // personalFolders
  //
  if (i.personalFolders ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "personalFolders",
        e));

    a << *i.personalFolders ();
  }

  // showMyPics
  //
  if (i.showMyPics ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showMyPics",
        e));

    a << *i.showMyPics ();
  }

  // showPrinters
  //
  if (i.showPrinters ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showPrinters",
        e));

    a << *i.showPrinters ();
  }

  // runCommand
  //
  if (i.runCommand ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "runCommand",
        e));

    a << *i.runCommand ();
  }

  // showSearch
  //
  if (i.showSearch ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showSearch",
        e));

    a << *i.showSearch ();
  }

  // searchCommunications
  //
  if (i.searchCommunications ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "searchCommunications",
        e));

    a << *i.searchCommunications ();
  }

  // searchFavorites
  //
  if (i.searchFavorites ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "searchFavorites",
        e));

    a << *i.searchFavorites ();
  }

  // searchFiles
  //
  if (i.searchFiles ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "searchFiles",
        e));

    a << *i.searchFiles ();
  }

  // searchPrograms
  //
  if (i.searchPrograms ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "searchPrograms",
        e));

    a << *i.searchPrograms ();
  }

  // trackProgs
  //
  if (i.trackProgs ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "trackProgs",
        e));

    a << *i.trackProgs ();
  }

  // sortAllPrograms
  //
  if (i.sortAllPrograms ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sortAllPrograms",
        e));

    a << *i.sortAllPrograms ();
  }

  // systemAdmin
  //
  if (i.systemAdmin ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "systemAdmin",
        e));

    a << *i.systemAdmin ();
  }

  // useLargeIcons
  //
  if (i.useLargeIcons ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useLargeIcons",
        e));

    a << *i.useLargeIcons ();
  }

  // showRecentDocs
  //
  if (i.showRecentDocs ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showRecentDocs",
        e));

    a << *i.showRecentDocs ();
  }

  // clearStartDocsList
  //
  if (i.clearStartDocsList ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clearStartDocsList",
        e));

    a << *i.clearStartDocsList ();
  }

  // cShowAdminTools
  //
  if (i.cShowAdminTools ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cShowAdminTools",
        e));

    a << *i.cShowAdminTools ();
  }

  // cShowFavorites
  //
  if (i.cShowFavorites ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cShowFavorites",
        e));

    a << *i.cShowFavorites ();
  }

  // cShowLogoff
  //
  if (i.cShowLogoff ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cShowLogoff",
        e));

    a << *i.cShowLogoff ();
  }

  // cShowRun
  //
  if (i.cShowRun ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cShowRun",
        e));

    a << *i.cShowRun ();
  }

  // cEnableDragDrop
  //
  if (i.cEnableDragDrop ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cEnableDragDrop",
        e));

    a << *i.cEnableDragDrop ();
  }

  // cCascadeControlPanel
  //
  if (i.cCascadeControlPanel ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeControlPanel",
        e));

    a << *i.cCascadeControlPanel ();
  }

  // cCascadeMyDocuments
  //
  if (i.cCascadeMyDocuments ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeMyDocuments",
        e));

    a << *i.cCascadeMyDocuments ();
  }

  // cCascadeNetworkConnections
  //
  if (i.cCascadeNetworkConnections ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeNetworkConnections",
        e));

    a << *i.cCascadeNetworkConnections ();
  }

  // cCascadeMyPictures
  //
  if (i.cCascadeMyPictures ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadeMyPictures",
        e));

    a << *i.cCascadeMyPictures ();
  }

  // cCascadePrinters
  //
  if (i.cCascadePrinters ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cCascadePrinters",
        e));

    a << *i.cCascadePrinters ();
  }

  // cScrollPrograms
  //
  if (i.cScrollPrograms ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cScrollPrograms",
        e));

    a << *i.cScrollPrograms ();
  }

  // cSmallIcons
  //
  if (i.cSmallIcons ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cSmallIcons",
        e));

    a << *i.cSmallIcons ();
  }

  // cPersonalized
  //
  if (i.cPersonalized ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cPersonalized",
        e));

    a << *i.cPersonalized ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StartMenuVistaProperties_t >
_xsd_StartMenuVistaProperties_t_type_serializer_init (
  "StartMenuVistaProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const StartMenuVista_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Filters
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const StartMenuVista_t::FiltersType& x (i.Filters ());
    if (typeid (StartMenuVista_t::FiltersType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filters",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Filters",
        "",
        false, true, e, x);
  }

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const StartMenuVista_t::PropertiesType& x (i.Properties ());
    if (typeid (StartMenuVista_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StartMenuVista_t >
_xsd_StartMenuVista_t_type_serializer_init (
  "StartMenuVista_t",
  "");


void
StartMenuTaskbar_ (::std::ostream& o,
                   const ::StartMenuTaskbar& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::StartMenuTaskbar_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
StartMenuTaskbar_ (::std::ostream& o,
                   const ::StartMenuTaskbar& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::StartMenuTaskbar_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
StartMenuTaskbar_ (::std::ostream& o,
                   const ::StartMenuTaskbar& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::StartMenuTaskbar_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
StartMenuTaskbar_ (::xercesc::XMLFormatTarget& t,
                   const ::StartMenuTaskbar& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::StartMenuTaskbar_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
StartMenuTaskbar_ (::xercesc::XMLFormatTarget& t,
                   const ::StartMenuTaskbar& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::StartMenuTaskbar_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
StartMenuTaskbar_ (::xercesc::XMLFormatTarget& t,
                   const ::StartMenuTaskbar& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::StartMenuTaskbar_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
StartMenuTaskbar_ (::xercesc::DOMDocument& d,
                   const ::StartMenuTaskbar& s,
                   ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "StartMenuTaskbar" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StartMenuTaskbar",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
StartMenuTaskbar_ (const ::StartMenuTaskbar& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "StartMenuTaskbar",
      "",
      m, f));

  ::StartMenuTaskbar_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const StartMenuTaskbar& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // StartMenu
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const StartMenuTaskbar::StartMenuType& x (i.StartMenu ());
    if (typeid (StartMenuTaskbar::StartMenuType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "StartMenu",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "StartMenu",
        "",
        false, true, e, x);
  }

  // StartMenuVista
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const StartMenuTaskbar::StartMenuVistaType& x (i.StartMenuVista ());
    if (typeid (StartMenuTaskbar::StartMenuVistaType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "StartMenuVista",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "StartMenuVista",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


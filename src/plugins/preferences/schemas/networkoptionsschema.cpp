// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "networkoptionsschema.h"

// VPNProperties_t
// 

const VPNProperties_t::ActionOptional& VPNProperties_t::
action () const
{
  return this->action_;
}

VPNProperties_t::ActionOptional& VPNProperties_t::
action ()
{
  return this->action_;
}

void VPNProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void VPNProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void VPNProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const VPNProperties_t::UserType& VPNProperties_t::
user () const
{
  return this->user_.get ();
}

VPNProperties_t::UserType& VPNProperties_t::
user ()
{
  return this->user_.get ();
}

void VPNProperties_t::
user (const UserType& x)
{
  this->user_.set (x);
}

const VPNProperties_t::NameType& VPNProperties_t::
name () const
{
  return this->name_.get ();
}

VPNProperties_t::NameType& VPNProperties_t::
name ()
{
  return this->name_.get ();
}

void VPNProperties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void VPNProperties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const VPNProperties_t::IpAddressOptional& VPNProperties_t::
ipAddress () const
{
  return this->ipAddress_;
}

VPNProperties_t::IpAddressOptional& VPNProperties_t::
ipAddress ()
{
  return this->ipAddress_;
}

void VPNProperties_t::
ipAddress (const IpAddressType& x)
{
  this->ipAddress_.set (x);
}

void VPNProperties_t::
ipAddress (const IpAddressOptional& x)
{
  this->ipAddress_ = x;
}

void VPNProperties_t::
ipAddress (::std::unique_ptr< IpAddressType > x)
{
  this->ipAddress_.set (std::move (x));
}

const VPNProperties_t::UseDNSOptional& VPNProperties_t::
useDNS () const
{
  return this->useDNS_;
}

VPNProperties_t::UseDNSOptional& VPNProperties_t::
useDNS ()
{
  return this->useDNS_;
}

void VPNProperties_t::
useDNS (const UseDNSType& x)
{
  this->useDNS_.set (x);
}

void VPNProperties_t::
useDNS (const UseDNSOptional& x)
{
  this->useDNS_ = x;
}

const VPNProperties_t::DialFirstOptional& VPNProperties_t::
dialFirst () const
{
  return this->dialFirst_;
}

VPNProperties_t::DialFirstOptional& VPNProperties_t::
dialFirst ()
{
  return this->dialFirst_;
}

void VPNProperties_t::
dialFirst (const DialFirstType& x)
{
  this->dialFirst_.set (x);
}

void VPNProperties_t::
dialFirst (const DialFirstOptional& x)
{
  this->dialFirst_ = x;
}

void VPNProperties_t::
dialFirst (::std::unique_ptr< DialFirstType > x)
{
  this->dialFirst_.set (std::move (x));
}

const VPNProperties_t::TrayIconOptional& VPNProperties_t::
trayIcon () const
{
  return this->trayIcon_;
}

VPNProperties_t::TrayIconOptional& VPNProperties_t::
trayIcon ()
{
  return this->trayIcon_;
}

void VPNProperties_t::
trayIcon (const TrayIconType& x)
{
  this->trayIcon_.set (x);
}

void VPNProperties_t::
trayIcon (const TrayIconOptional& x)
{
  this->trayIcon_ = x;
}

const VPNProperties_t::ShowProgressOptional& VPNProperties_t::
showProgress () const
{
  return this->showProgress_;
}

VPNProperties_t::ShowProgressOptional& VPNProperties_t::
showProgress ()
{
  return this->showProgress_;
}

void VPNProperties_t::
showProgress (const ShowProgressType& x)
{
  this->showProgress_.set (x);
}

void VPNProperties_t::
showProgress (const ShowProgressOptional& x)
{
  this->showProgress_ = x;
}

const VPNProperties_t::ShowPasswordOptional& VPNProperties_t::
showPassword () const
{
  return this->showPassword_;
}

VPNProperties_t::ShowPasswordOptional& VPNProperties_t::
showPassword ()
{
  return this->showPassword_;
}

void VPNProperties_t::
showPassword (const ShowPasswordType& x)
{
  this->showPassword_.set (x);
}

void VPNProperties_t::
showPassword (const ShowPasswordOptional& x)
{
  this->showPassword_ = x;
}

const VPNProperties_t::ShowDomainOptional& VPNProperties_t::
showDomain () const
{
  return this->showDomain_;
}

VPNProperties_t::ShowDomainOptional& VPNProperties_t::
showDomain ()
{
  return this->showDomain_;
}

void VPNProperties_t::
showDomain (const ShowDomainType& x)
{
  this->showDomain_.set (x);
}

void VPNProperties_t::
showDomain (const ShowDomainOptional& x)
{
  this->showDomain_ = x;
}

const VPNProperties_t::RedialCountOptional& VPNProperties_t::
redialCount () const
{
  return this->redialCount_;
}

VPNProperties_t::RedialCountOptional& VPNProperties_t::
redialCount ()
{
  return this->redialCount_;
}

void VPNProperties_t::
redialCount (const RedialCountType& x)
{
  this->redialCount_.set (x);
}

void VPNProperties_t::
redialCount (const RedialCountOptional& x)
{
  this->redialCount_ = x;
}

const VPNProperties_t::RedialPauseOptional& VPNProperties_t::
redialPause () const
{
  return this->redialPause_;
}

VPNProperties_t::RedialPauseOptional& VPNProperties_t::
redialPause ()
{
  return this->redialPause_;
}

void VPNProperties_t::
redialPause (const RedialPauseType& x)
{
  this->redialPause_.set (x);
}

void VPNProperties_t::
redialPause (const RedialPauseOptional& x)
{
  this->redialPause_ = x;
}

void VPNProperties_t::
redialPause (::std::unique_ptr< RedialPauseType > x)
{
  this->redialPause_.set (std::move (x));
}

const VPNProperties_t::IdleDisconnectOptional& VPNProperties_t::
idleDisconnect () const
{
  return this->idleDisconnect_;
}

VPNProperties_t::IdleDisconnectOptional& VPNProperties_t::
idleDisconnect ()
{
  return this->idleDisconnect_;
}

void VPNProperties_t::
idleDisconnect (const IdleDisconnectType& x)
{
  this->idleDisconnect_.set (x);
}

void VPNProperties_t::
idleDisconnect (const IdleDisconnectOptional& x)
{
  this->idleDisconnect_ = x;
}

const VPNProperties_t::ReconnectOptional& VPNProperties_t::
reconnect () const
{
  return this->reconnect_;
}

VPNProperties_t::ReconnectOptional& VPNProperties_t::
reconnect ()
{
  return this->reconnect_;
}

void VPNProperties_t::
reconnect (const ReconnectType& x)
{
  this->reconnect_.set (x);
}

void VPNProperties_t::
reconnect (const ReconnectOptional& x)
{
  this->reconnect_ = x;
}

const VPNProperties_t::CustomSettingsOptional& VPNProperties_t::
customSettings () const
{
  return this->customSettings_;
}

VPNProperties_t::CustomSettingsOptional& VPNProperties_t::
customSettings ()
{
  return this->customSettings_;
}

void VPNProperties_t::
customSettings (const CustomSettingsType& x)
{
  this->customSettings_.set (x);
}

void VPNProperties_t::
customSettings (const CustomSettingsOptional& x)
{
  this->customSettings_ = x;
}

const VPNProperties_t::SecurePasswordOptional& VPNProperties_t::
securePassword () const
{
  return this->securePassword_;
}

VPNProperties_t::SecurePasswordOptional& VPNProperties_t::
securePassword ()
{
  return this->securePassword_;
}

void VPNProperties_t::
securePassword (const SecurePasswordType& x)
{
  this->securePassword_.set (x);
}

void VPNProperties_t::
securePassword (const SecurePasswordOptional& x)
{
  this->securePassword_ = x;
}

const VPNProperties_t::SecureDataOptional& VPNProperties_t::
secureData () const
{
  return this->secureData_;
}

VPNProperties_t::SecureDataOptional& VPNProperties_t::
secureData ()
{
  return this->secureData_;
}

void VPNProperties_t::
secureData (const SecureDataType& x)
{
  this->secureData_.set (x);
}

void VPNProperties_t::
secureData (const SecureDataOptional& x)
{
  this->secureData_ = x;
}

const VPNProperties_t::UseLogonOptional& VPNProperties_t::
useLogon () const
{
  return this->useLogon_;
}

VPNProperties_t::UseLogonOptional& VPNProperties_t::
useLogon ()
{
  return this->useLogon_;
}

void VPNProperties_t::
useLogon (const UseLogonType& x)
{
  this->useLogon_.set (x);
}

void VPNProperties_t::
useLogon (const UseLogonOptional& x)
{
  this->useLogon_ = x;
}

const VPNProperties_t::VpnStrategyOptional& VPNProperties_t::
vpnStrategy () const
{
  return this->vpnStrategy_;
}

VPNProperties_t::VpnStrategyOptional& VPNProperties_t::
vpnStrategy ()
{
  return this->vpnStrategy_;
}

void VPNProperties_t::
vpnStrategy (const VpnStrategyType& x)
{
  this->vpnStrategy_.set (x);
}

void VPNProperties_t::
vpnStrategy (const VpnStrategyOptional& x)
{
  this->vpnStrategy_ = x;
}

void VPNProperties_t::
vpnStrategy (::std::unique_ptr< VpnStrategyType > x)
{
  this->vpnStrategy_.set (std::move (x));
}

const VPNProperties_t::EncryptionTypeOptional& VPNProperties_t::
encryptionType () const
{
  return this->encryptionType_;
}

VPNProperties_t::EncryptionTypeOptional& VPNProperties_t::
encryptionType ()
{
  return this->encryptionType_;
}

void VPNProperties_t::
encryptionType (const EncryptionTypeType& x)
{
  this->encryptionType_.set (x);
}

void VPNProperties_t::
encryptionType (const EncryptionTypeOptional& x)
{
  this->encryptionType_ = x;
}

void VPNProperties_t::
encryptionType (::std::unique_ptr< EncryptionTypeType > x)
{
  this->encryptionType_.set (std::move (x));
}

const VPNProperties_t::EapOptional& VPNProperties_t::
eap () const
{
  return this->eap_;
}

VPNProperties_t::EapOptional& VPNProperties_t::
eap ()
{
  return this->eap_;
}

void VPNProperties_t::
eap (const EapType& x)
{
  this->eap_.set (x);
}

void VPNProperties_t::
eap (const EapOptional& x)
{
  this->eap_ = x;
}

const VPNProperties_t::PapOptional& VPNProperties_t::
pap () const
{
  return this->pap_;
}

VPNProperties_t::PapOptional& VPNProperties_t::
pap ()
{
  return this->pap_;
}

void VPNProperties_t::
pap (const PapType& x)
{
  this->pap_.set (x);
}

void VPNProperties_t::
pap (const PapOptional& x)
{
  this->pap_ = x;
}

const VPNProperties_t::SpapOptional& VPNProperties_t::
spap () const
{
  return this->spap_;
}

VPNProperties_t::SpapOptional& VPNProperties_t::
spap ()
{
  return this->spap_;
}

void VPNProperties_t::
spap (const SpapType& x)
{
  this->spap_.set (x);
}

void VPNProperties_t::
spap (const SpapOptional& x)
{
  this->spap_ = x;
}

const VPNProperties_t::ChapOptional& VPNProperties_t::
chap () const
{
  return this->chap_;
}

VPNProperties_t::ChapOptional& VPNProperties_t::
chap ()
{
  return this->chap_;
}

void VPNProperties_t::
chap (const ChapType& x)
{
  this->chap_.set (x);
}

void VPNProperties_t::
chap (const ChapOptional& x)
{
  this->chap_ = x;
}

const VPNProperties_t::MsChapOptional& VPNProperties_t::
msChap () const
{
  return this->msChap_;
}

VPNProperties_t::MsChapOptional& VPNProperties_t::
msChap ()
{
  return this->msChap_;
}

void VPNProperties_t::
msChap (const MsChapType& x)
{
  this->msChap_.set (x);
}

void VPNProperties_t::
msChap (const MsChapOptional& x)
{
  this->msChap_ = x;
}

const VPNProperties_t::OldMsChapOptional& VPNProperties_t::
oldMsChap () const
{
  return this->oldMsChap_;
}

VPNProperties_t::OldMsChapOptional& VPNProperties_t::
oldMsChap ()
{
  return this->oldMsChap_;
}

void VPNProperties_t::
oldMsChap (const OldMsChapType& x)
{
  this->oldMsChap_.set (x);
}

void VPNProperties_t::
oldMsChap (const OldMsChapOptional& x)
{
  this->oldMsChap_ = x;
}

const VPNProperties_t::MsChapV2Optional& VPNProperties_t::
msChapV2 () const
{
  return this->msChapV2_;
}

VPNProperties_t::MsChapV2Optional& VPNProperties_t::
msChapV2 ()
{
  return this->msChapV2_;
}

void VPNProperties_t::
msChapV2 (const MsChapV2Type& x)
{
  this->msChapV2_.set (x);
}

void VPNProperties_t::
msChapV2 (const MsChapV2Optional& x)
{
  this->msChapV2_ = x;
}

const VPNProperties_t::DisabledOptional& VPNProperties_t::
disabled () const
{
  return this->disabled_;
}

VPNProperties_t::DisabledOptional& VPNProperties_t::
disabled ()
{
  return this->disabled_;
}

void VPNProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void VPNProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// VPN_t
// 

const VPN_t::PropertiesSequence& VPN_t::
Properties () const
{
  return this->Properties_;
}

VPN_t::PropertiesSequence& VPN_t::
Properties ()
{
  return this->Properties_;
}

void VPN_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const VPN_t::ClsidType& VPN_t::
clsid () const
{
  return this->clsid_.get ();
}

VPN_t::ClsidType& VPN_t::
clsid ()
{
  return this->clsid_.get ();
}

void VPN_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void VPN_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const VPN_t::NameType& VPN_t::
name () const
{
  return this->name_.get ();
}

VPN_t::NameType& VPN_t::
name ()
{
  return this->name_.get ();
}

void VPN_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void VPN_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const VPN_t::ImageOptional& VPN_t::
image () const
{
  return this->image_;
}

VPN_t::ImageOptional& VPN_t::
image ()
{
  return this->image_;
}

void VPN_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void VPN_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const VPN_t::ChangedOptional& VPN_t::
changed () const
{
  return this->changed_;
}

VPN_t::ChangedOptional& VPN_t::
changed ()
{
  return this->changed_;
}

void VPN_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void VPN_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void VPN_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const VPN_t::UidType& VPN_t::
uid () const
{
  return this->uid_.get ();
}

VPN_t::UidType& VPN_t::
uid ()
{
  return this->uid_.get ();
}

void VPN_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void VPN_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const VPN_t::DescOptional& VPN_t::
desc () const
{
  return this->desc_;
}

VPN_t::DescOptional& VPN_t::
desc ()
{
  return this->desc_;
}

void VPN_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void VPN_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void VPN_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const VPN_t::BypassErrorsOptional& VPN_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

VPN_t::BypassErrorsOptional& VPN_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void VPN_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void VPN_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const VPN_t::UserContextOptional& VPN_t::
userContext () const
{
  return this->userContext_;
}

VPN_t::UserContextOptional& VPN_t::
userContext ()
{
  return this->userContext_;
}

void VPN_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void VPN_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const VPN_t::RemovePolicyOptional& VPN_t::
removePolicy () const
{
  return this->removePolicy_;
}

VPN_t::RemovePolicyOptional& VPN_t::
removePolicy ()
{
  return this->removePolicy_;
}

void VPN_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void VPN_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const VPN_t::StatusOptional& VPN_t::
status () const
{
  return this->status_;
}

VPN_t::StatusOptional& VPN_t::
status ()
{
  return this->status_;
}

void VPN_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void VPN_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void VPN_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// DUNProperties_t
// 

const DUNProperties_t::ActionOptional& DUNProperties_t::
action () const
{
  return this->action_;
}

DUNProperties_t::ActionOptional& DUNProperties_t::
action ()
{
  return this->action_;
}

void DUNProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void DUNProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void DUNProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const DUNProperties_t::UserType& DUNProperties_t::
user () const
{
  return this->user_.get ();
}

DUNProperties_t::UserType& DUNProperties_t::
user ()
{
  return this->user_.get ();
}

void DUNProperties_t::
user (const UserType& x)
{
  this->user_.set (x);
}

const DUNProperties_t::NameType& DUNProperties_t::
name () const
{
  return this->name_.get ();
}

DUNProperties_t::NameType& DUNProperties_t::
name ()
{
  return this->name_.get ();
}

void DUNProperties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void DUNProperties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const DUNProperties_t::PhoneNumberType& DUNProperties_t::
phoneNumber () const
{
  return this->phoneNumber_.get ();
}

DUNProperties_t::PhoneNumberType& DUNProperties_t::
phoneNumber ()
{
  return this->phoneNumber_.get ();
}

void DUNProperties_t::
phoneNumber (const PhoneNumberType& x)
{
  this->phoneNumber_.set (x);
}

void DUNProperties_t::
phoneNumber (::std::unique_ptr< PhoneNumberType > x)
{
  this->phoneNumber_.set (std::move (x));
}

const DUNProperties_t::DisabledOptional& DUNProperties_t::
disabled () const
{
  return this->disabled_;
}

DUNProperties_t::DisabledOptional& DUNProperties_t::
disabled ()
{
  return this->disabled_;
}

void DUNProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void DUNProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// DUN_t
// 

const DUN_t::PropertiesSequence& DUN_t::
Properties () const
{
  return this->Properties_;
}

DUN_t::PropertiesSequence& DUN_t::
Properties ()
{
  return this->Properties_;
}

void DUN_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const DUN_t::ClsidType& DUN_t::
clsid () const
{
  return this->clsid_.get ();
}

DUN_t::ClsidType& DUN_t::
clsid ()
{
  return this->clsid_.get ();
}

void DUN_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void DUN_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const DUN_t::NameType& DUN_t::
name () const
{
  return this->name_.get ();
}

DUN_t::NameType& DUN_t::
name ()
{
  return this->name_.get ();
}

void DUN_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void DUN_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const DUN_t::ImageOptional& DUN_t::
image () const
{
  return this->image_;
}

DUN_t::ImageOptional& DUN_t::
image ()
{
  return this->image_;
}

void DUN_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void DUN_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const DUN_t::ChangedOptional& DUN_t::
changed () const
{
  return this->changed_;
}

DUN_t::ChangedOptional& DUN_t::
changed ()
{
  return this->changed_;
}

void DUN_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void DUN_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void DUN_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const DUN_t::UidType& DUN_t::
uid () const
{
  return this->uid_.get ();
}

DUN_t::UidType& DUN_t::
uid ()
{
  return this->uid_.get ();
}

void DUN_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void DUN_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const DUN_t::DescOptional& DUN_t::
desc () const
{
  return this->desc_;
}

DUN_t::DescOptional& DUN_t::
desc ()
{
  return this->desc_;
}

void DUN_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void DUN_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void DUN_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const DUN_t::BypassErrorsOptional& DUN_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

DUN_t::BypassErrorsOptional& DUN_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void DUN_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void DUN_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const DUN_t::UserContextOptional& DUN_t::
userContext () const
{
  return this->userContext_;
}

DUN_t::UserContextOptional& DUN_t::
userContext ()
{
  return this->userContext_;
}

void DUN_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void DUN_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const DUN_t::RemovePolicyOptional& DUN_t::
removePolicy () const
{
  return this->removePolicy_;
}

DUN_t::RemovePolicyOptional& DUN_t::
removePolicy ()
{
  return this->removePolicy_;
}

void DUN_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void DUN_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const DUN_t::StatusOptional& DUN_t::
status () const
{
  return this->status_;
}

DUN_t::StatusOptional& DUN_t::
status ()
{
  return this->status_;
}

void DUN_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void DUN_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void DUN_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// NetworkOptions
// 

const NetworkOptions::VPNSequence& NetworkOptions::
VPN () const
{
  return this->VPN_;
}

NetworkOptions::VPNSequence& NetworkOptions::
VPN ()
{
  return this->VPN_;
}

void NetworkOptions::
VPN (const VPNSequence& s)
{
  this->VPN_ = s;
}

const NetworkOptions::DUNSequence& NetworkOptions::
DUN () const
{
  return this->DUN_;
}

NetworkOptions::DUNSequence& NetworkOptions::
DUN ()
{
  return this->DUN_;
}

void NetworkOptions::
DUN (const DUNSequence& s)
{
  this->DUN_ = s;
}

const NetworkOptions::ClsidType& NetworkOptions::
clsid () const
{
  return this->clsid_.get ();
}

NetworkOptions::ClsidType& NetworkOptions::
clsid ()
{
  return this->clsid_.get ();
}

void NetworkOptions::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void NetworkOptions::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const NetworkOptions::DisabledOptional& NetworkOptions::
disabled () const
{
  return this->disabled_;
}

NetworkOptions::DisabledOptional& NetworkOptions::
disabled ()
{
  return this->disabled_;
}

void NetworkOptions::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void NetworkOptions::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// VPNProperties_t
//

VPNProperties_t::
VPNProperties_t (const UserType& user,
                 const NameType& name)
: ::xml_schema::Type (),
  action_ (this),
  user_ (user, this),
  name_ (name, this),
  ipAddress_ (this),
  useDNS_ (this),
  dialFirst_ (this),
  trayIcon_ (this),
  showProgress_ (this),
  showPassword_ (this),
  showDomain_ (this),
  redialCount_ (this),
  redialPause_ (this),
  idleDisconnect_ (this),
  reconnect_ (this),
  customSettings_ (this),
  securePassword_ (this),
  secureData_ (this),
  useLogon_ (this),
  vpnStrategy_ (this),
  encryptionType_ (this),
  eap_ (this),
  pap_ (this),
  spap_ (this),
  chap_ (this),
  msChap_ (this),
  oldMsChap_ (this),
  msChapV2_ (this),
  disabled_ (this)
{
}

VPNProperties_t::
VPNProperties_t (const VPNProperties_t& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  user_ (x.user_, f, this),
  name_ (x.name_, f, this),
  ipAddress_ (x.ipAddress_, f, this),
  useDNS_ (x.useDNS_, f, this),
  dialFirst_ (x.dialFirst_, f, this),
  trayIcon_ (x.trayIcon_, f, this),
  showProgress_ (x.showProgress_, f, this),
  showPassword_ (x.showPassword_, f, this),
  showDomain_ (x.showDomain_, f, this),
  redialCount_ (x.redialCount_, f, this),
  redialPause_ (x.redialPause_, f, this),
  idleDisconnect_ (x.idleDisconnect_, f, this),
  reconnect_ (x.reconnect_, f, this),
  customSettings_ (x.customSettings_, f, this),
  securePassword_ (x.securePassword_, f, this),
  secureData_ (x.secureData_, f, this),
  useLogon_ (x.useLogon_, f, this),
  vpnStrategy_ (x.vpnStrategy_, f, this),
  encryptionType_ (x.encryptionType_, f, this),
  eap_ (x.eap_, f, this),
  pap_ (x.pap_, f, this),
  spap_ (x.spap_, f, this),
  chap_ (x.chap_, f, this),
  msChap_ (x.msChap_, f, this),
  oldMsChap_ (x.oldMsChap_, f, this),
  msChapV2_ (x.msChapV2_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

VPNProperties_t::
VPNProperties_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  user_ (this),
  name_ (this),
  ipAddress_ (this),
  useDNS_ (this),
  dialFirst_ (this),
  trayIcon_ (this),
  showProgress_ (this),
  showPassword_ (this),
  showDomain_ (this),
  redialCount_ (this),
  redialPause_ (this),
  idleDisconnect_ (this),
  reconnect_ (this),
  customSettings_ (this),
  securePassword_ (this),
  secureData_ (this),
  useLogon_ (this),
  vpnStrategy_ (this),
  encryptionType_ (this),
  eap_ (this),
  pap_ (this),
  spap_ (this),
  chap_ (this),
  msChap_ (this),
  oldMsChap_ (this),
  msChapV2_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void VPNProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "user" && n.namespace_ ().empty ())
    {
      this->user_.set (UserTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "ipAddress" && n.namespace_ ().empty ())
    {
      this->ipAddress_.set (IpAddressTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useDNS" && n.namespace_ ().empty ())
    {
      this->useDNS_.set (UseDNSTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "dialFirst" && n.namespace_ ().empty ())
    {
      this->dialFirst_.set (DialFirstTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "trayIcon" && n.namespace_ ().empty ())
    {
      this->trayIcon_.set (TrayIconTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showProgress" && n.namespace_ ().empty ())
    {
      this->showProgress_.set (ShowProgressTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showPassword" && n.namespace_ ().empty ())
    {
      this->showPassword_.set (ShowPasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showDomain" && n.namespace_ ().empty ())
    {
      this->showDomain_.set (ShowDomainTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "redialCount" && n.namespace_ ().empty ())
    {
      this->redialCount_.set (RedialCountTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "redialPause" && n.namespace_ ().empty ())
    {
      this->redialPause_.set (RedialPauseTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "idleDisconnect" && n.namespace_ ().empty ())
    {
      this->idleDisconnect_.set (IdleDisconnectTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "reconnect" && n.namespace_ ().empty ())
    {
      this->reconnect_.set (ReconnectTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "customSettings" && n.namespace_ ().empty ())
    {
      this->customSettings_.set (CustomSettingsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "securePassword" && n.namespace_ ().empty ())
    {
      this->securePassword_.set (SecurePasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "secureData" && n.namespace_ ().empty ())
    {
      this->secureData_.set (SecureDataTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useLogon" && n.namespace_ ().empty ())
    {
      this->useLogon_.set (UseLogonTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "vpnStrategy" && n.namespace_ ().empty ())
    {
      this->vpnStrategy_.set (VpnStrategyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "encryptionType" && n.namespace_ ().empty ())
    {
      this->encryptionType_.set (EncryptionTypeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "eap" && n.namespace_ ().empty ())
    {
      this->eap_.set (EapTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "pap" && n.namespace_ ().empty ())
    {
      this->pap_.set (PapTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "spap" && n.namespace_ ().empty ())
    {
      this->spap_.set (SpapTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "chap" && n.namespace_ ().empty ())
    {
      this->chap_.set (ChapTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "msChap" && n.namespace_ ().empty ())
    {
      this->msChap_.set (MsChapTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "oldMsChap" && n.namespace_ ().empty ())
    {
      this->oldMsChap_.set (OldMsChapTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "msChapV2" && n.namespace_ ().empty ())
    {
      this->msChapV2_.set (MsChapV2Traits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!user_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "user",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

VPNProperties_t* VPNProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class VPNProperties_t (*this, f, c);
}

VPNProperties_t& VPNProperties_t::
operator= (const VPNProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->user_ = x.user_;
    this->name_ = x.name_;
    this->ipAddress_ = x.ipAddress_;
    this->useDNS_ = x.useDNS_;
    this->dialFirst_ = x.dialFirst_;
    this->trayIcon_ = x.trayIcon_;
    this->showProgress_ = x.showProgress_;
    this->showPassword_ = x.showPassword_;
    this->showDomain_ = x.showDomain_;
    this->redialCount_ = x.redialCount_;
    this->redialPause_ = x.redialPause_;
    this->idleDisconnect_ = x.idleDisconnect_;
    this->reconnect_ = x.reconnect_;
    this->customSettings_ = x.customSettings_;
    this->securePassword_ = x.securePassword_;
    this->secureData_ = x.secureData_;
    this->useLogon_ = x.useLogon_;
    this->vpnStrategy_ = x.vpnStrategy_;
    this->encryptionType_ = x.encryptionType_;
    this->eap_ = x.eap_;
    this->pap_ = x.pap_;
    this->spap_ = x.spap_;
    this->chap_ = x.chap_;
    this->msChap_ = x.msChap_;
    this->oldMsChap_ = x.oldMsChap_;
    this->msChapV2_ = x.msChapV2_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

VPNProperties_t::
~VPNProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, VPNProperties_t >
_xsd_VPNProperties_t_type_factory_init (
  "VPNProperties_t",
  "");

// VPN_t
//

VPN_t::
VPN_t (const ClsidType& clsid,
       const NameType& name,
       const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

VPN_t::
VPN_t (const VPN_t& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

VPN_t::
VPN_t (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void VPN_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

VPN_t* VPN_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class VPN_t (*this, f, c);
}

VPN_t& VPN_t::
operator= (const VPN_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

VPN_t::
~VPN_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, VPN_t >
_xsd_VPN_t_type_factory_init (
  "VPN_t",
  "");

// DUNProperties_t
//

DUNProperties_t::
DUNProperties_t (const UserType& user,
                 const NameType& name,
                 const PhoneNumberType& phoneNumber)
: ::xml_schema::Type (),
  action_ (this),
  user_ (user, this),
  name_ (name, this),
  phoneNumber_ (phoneNumber, this),
  disabled_ (this)
{
}

DUNProperties_t::
DUNProperties_t (const DUNProperties_t& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  user_ (x.user_, f, this),
  name_ (x.name_, f, this),
  phoneNumber_ (x.phoneNumber_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

DUNProperties_t::
DUNProperties_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  user_ (this),
  name_ (this),
  phoneNumber_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void DUNProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "user" && n.namespace_ ().empty ())
    {
      this->user_.set (UserTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "phoneNumber" && n.namespace_ ().empty ())
    {
      this->phoneNumber_.set (PhoneNumberTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!user_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "user",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!phoneNumber_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "phoneNumber",
      "");
  }
}

DUNProperties_t* DUNProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class DUNProperties_t (*this, f, c);
}

DUNProperties_t& DUNProperties_t::
operator= (const DUNProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->user_ = x.user_;
    this->name_ = x.name_;
    this->phoneNumber_ = x.phoneNumber_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

DUNProperties_t::
~DUNProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, DUNProperties_t >
_xsd_DUNProperties_t_type_factory_init (
  "DUNProperties_t",
  "");

// DUN_t
//

DUN_t::
DUN_t (const ClsidType& clsid,
       const NameType& name,
       const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

DUN_t::
DUN_t (const DUN_t& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

DUN_t::
DUN_t (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void DUN_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

DUN_t* DUN_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class DUN_t (*this, f, c);
}

DUN_t& DUN_t::
operator= (const DUN_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

DUN_t::
~DUN_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, DUN_t >
_xsd_DUN_t_type_factory_init (
  "DUN_t",
  "");

// NetworkOptions
//

NetworkOptions::
NetworkOptions (const ClsidType& clsid)
: ::xml_schema::Type (),
  VPN_ (this),
  DUN_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

NetworkOptions::
NetworkOptions (const NetworkOptions& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  VPN_ (x.VPN_, f, this),
  DUN_ (x.DUN_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

NetworkOptions::
NetworkOptions (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  VPN_ (this),
  DUN_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void NetworkOptions::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // VPN
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "VPN",
          "",
          &::xsd::cxx::tree::factory_impl< VPNType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< VPNType > r (
          dynamic_cast< VPNType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->VPN_.push_back (::std::move (r));
        continue;
      }
    }

    // DUN
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "DUN",
          "",
          &::xsd::cxx::tree::factory_impl< DUNType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< DUNType > r (
          dynamic_cast< DUNType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->DUN_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

NetworkOptions* NetworkOptions::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class NetworkOptions (*this, f, c);
}

NetworkOptions& NetworkOptions::
operator= (const NetworkOptions& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->VPN_ = x.VPN_;
    this->DUN_ = x.DUN_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

NetworkOptions::
~NetworkOptions ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const VPNProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "user: " << i.user ();
  o << ::std::endl << "name: " << i.name ();
  if (i.ipAddress ())
  {
    o << ::std::endl << "ipAddress: " << *i.ipAddress ();
  }

  if (i.useDNS ())
  {
    o << ::std::endl << "useDNS: " << *i.useDNS ();
  }

  if (i.dialFirst ())
  {
    o << ::std::endl << "dialFirst: " << *i.dialFirst ();
  }

  if (i.trayIcon ())
  {
    o << ::std::endl << "trayIcon: " << *i.trayIcon ();
  }

  if (i.showProgress ())
  {
    o << ::std::endl << "showProgress: " << *i.showProgress ();
  }

  if (i.showPassword ())
  {
    o << ::std::endl << "showPassword: " << *i.showPassword ();
  }

  if (i.showDomain ())
  {
    o << ::std::endl << "showDomain: " << *i.showDomain ();
  }

  if (i.redialCount ())
  {
    o << ::std::endl << "redialCount: " << *i.redialCount ();
  }

  if (i.redialPause ())
  {
    o << ::std::endl << "redialPause: " << *i.redialPause ();
  }

  if (i.idleDisconnect ())
  {
    o << ::std::endl << "idleDisconnect: " << *i.idleDisconnect ();
  }

  if (i.reconnect ())
  {
    o << ::std::endl << "reconnect: " << *i.reconnect ();
  }

  if (i.customSettings ())
  {
    o << ::std::endl << "customSettings: " << *i.customSettings ();
  }

  if (i.securePassword ())
  {
    o << ::std::endl << "securePassword: " << *i.securePassword ();
  }

  if (i.secureData ())
  {
    o << ::std::endl << "secureData: " << *i.secureData ();
  }

  if (i.useLogon ())
  {
    o << ::std::endl << "useLogon: " << *i.useLogon ();
  }

  if (i.vpnStrategy ())
  {
    o << ::std::endl << "vpnStrategy: " << *i.vpnStrategy ();
  }

  if (i.encryptionType ())
  {
    o << ::std::endl << "encryptionType: " << *i.encryptionType ();
  }

  if (i.eap ())
  {
    o << ::std::endl << "eap: " << *i.eap ();
  }

  if (i.pap ())
  {
    o << ::std::endl << "pap: " << *i.pap ();
  }

  if (i.spap ())
  {
    o << ::std::endl << "spap: " << *i.spap ();
  }

  if (i.chap ())
  {
    o << ::std::endl << "chap: " << *i.chap ();
  }

  if (i.msChap ())
  {
    o << ::std::endl << "msChap: " << *i.msChap ();
  }

  if (i.oldMsChap ())
  {
    o << ::std::endl << "oldMsChap: " << *i.oldMsChap ();
  }

  if (i.msChapV2 ())
  {
    o << ::std::endl << "msChapV2: " << *i.msChapV2 ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VPNProperties_t >
_xsd_VPNProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const VPN_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (VPN_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, VPN_t >
_xsd_VPN_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const DUNProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "user: " << i.user ();
  o << ::std::endl << "name: " << i.name ();
  o << ::std::endl << "phoneNumber: " << i.phoneNumber ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DUNProperties_t >
_xsd_DUNProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const DUN_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (DUN_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DUN_t >
_xsd_DUN_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const NetworkOptions& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (NetworkOptions::VPNConstIterator
         b (i.VPN ().begin ()), e (i.VPN ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "VPN: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (NetworkOptions::DUNConstIterator
         b (i.DUN ().begin ()), e (i.DUN ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "DUN: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::std::string& u,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::NetworkOptions > (
    ::NetworkOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::std::string& u,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::NetworkOptions > (
    ::NetworkOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::NetworkOptions > (
    ::NetworkOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::NetworkOptions_ (isrc, f, p);
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::NetworkOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::NetworkOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::NetworkOptions_ (isrc, f, p);
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::NetworkOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::NetworkOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xercesc::InputSource& i,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::NetworkOptions > (
    ::NetworkOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xercesc::InputSource& i,
                 ::xml_schema::ErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::NetworkOptions > (
    ::NetworkOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::NetworkOptions > (
    ::NetworkOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::NetworkOptions > (
      ::NetworkOptions_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "NetworkOptions" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::NetworkOptions > r (
      ::xsd::cxx::tree::traits< ::NetworkOptions, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "NetworkOptions",
    "");
}

::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f,
                 const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "NetworkOptions" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::NetworkOptions > r (
      ::xsd::cxx::tree::traits< ::NetworkOptions, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "NetworkOptions",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const VPNProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // user
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "user",
        e));

    a << i.user ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // ipAddress
  //
  if (i.ipAddress ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ipAddress",
        e));

    a << *i.ipAddress ();
  }

  // useDNS
  //
  if (i.useDNS ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useDNS",
        e));

    a << *i.useDNS ();
  }

  // dialFirst
  //
  if (i.dialFirst ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialFirst",
        e));

    a << *i.dialFirst ();
  }

  // trayIcon
  //
  if (i.trayIcon ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "trayIcon",
        e));

    a << *i.trayIcon ();
  }

  // showProgress
  //
  if (i.showProgress ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showProgress",
        e));

    a << *i.showProgress ();
  }

  // showPassword
  //
  if (i.showPassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showPassword",
        e));

    a << *i.showPassword ();
  }

  // showDomain
  //
  if (i.showDomain ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showDomain",
        e));

    a << *i.showDomain ();
  }

  // redialCount
  //
  if (i.redialCount ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "redialCount",
        e));

    a << *i.redialCount ();
  }

  // redialPause
  //
  if (i.redialPause ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "redialPause",
        e));

    a << *i.redialPause ();
  }

  // idleDisconnect
  //
  if (i.idleDisconnect ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "idleDisconnect",
        e));

    a << *i.idleDisconnect ();
  }

  // reconnect
  //
  if (i.reconnect ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "reconnect",
        e));

    a << *i.reconnect ();
  }

  // customSettings
  //
  if (i.customSettings ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "customSettings",
        e));

    a << *i.customSettings ();
  }

  // securePassword
  //
  if (i.securePassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "securePassword",
        e));

    a << *i.securePassword ();
  }

  // secureData
  //
  if (i.secureData ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "secureData",
        e));

    a << *i.secureData ();
  }

  // useLogon
  //
  if (i.useLogon ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useLogon",
        e));

    a << *i.useLogon ();
  }

  // vpnStrategy
  //
  if (i.vpnStrategy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "vpnStrategy",
        e));

    a << *i.vpnStrategy ();
  }

  // encryptionType
  //
  if (i.encryptionType ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "encryptionType",
        e));

    a << *i.encryptionType ();
  }

  // eap
  //
  if (i.eap ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "eap",
        e));

    a << *i.eap ();
  }

  // pap
  //
  if (i.pap ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "pap",
        e));

    a << *i.pap ();
  }

  // spap
  //
  if (i.spap ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "spap",
        e));

    a << *i.spap ();
  }

  // chap
  //
  if (i.chap ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "chap",
        e));

    a << *i.chap ();
  }

  // msChap
  //
  if (i.msChap ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "msChap",
        e));

    a << *i.msChap ();
  }

  // oldMsChap
  //
  if (i.oldMsChap ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "oldMsChap",
        e));

    a << *i.oldMsChap ();
  }

  // msChapV2
  //
  if (i.msChapV2 ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "msChapV2",
        e));

    a << *i.msChapV2 ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VPNProperties_t >
_xsd_VPNProperties_t_type_serializer_init (
  "VPNProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const VPN_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (VPN_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (VPN_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VPN_t >
_xsd_VPN_t_type_serializer_init (
  "VPN_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const DUNProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // user
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "user",
        e));

    a << i.user ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // phoneNumber
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "phoneNumber",
        e));

    a << i.phoneNumber ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DUNProperties_t >
_xsd_DUNProperties_t_type_serializer_init (
  "DUNProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const DUN_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (DUN_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (DUN_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DUN_t >
_xsd_DUN_t_type_serializer_init (
  "DUN_t",
  "");


void
NetworkOptions_ (::std::ostream& o,
                 const ::NetworkOptions& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::NetworkOptions_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
NetworkOptions_ (::std::ostream& o,
                 const ::NetworkOptions& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::NetworkOptions_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
NetworkOptions_ (::std::ostream& o,
                 const ::NetworkOptions& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::NetworkOptions_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
NetworkOptions_ (::xercesc::XMLFormatTarget& t,
                 const ::NetworkOptions& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::NetworkOptions_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
NetworkOptions_ (::xercesc::XMLFormatTarget& t,
                 const ::NetworkOptions& s,
                 ::xml_schema::ErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::NetworkOptions_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
NetworkOptions_ (::xercesc::XMLFormatTarget& t,
                 const ::NetworkOptions& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::NamespaceInfomap& m,
                 const ::std::string& e,
                 ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::NetworkOptions_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
NetworkOptions_ (::xercesc::DOMDocument& d,
                 const ::NetworkOptions& s,
                 ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "NetworkOptions" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "NetworkOptions",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
NetworkOptions_ (const ::NetworkOptions& s,
                 const ::xml_schema::NamespaceInfomap& m,
                 ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "NetworkOptions",
      "",
      m, f));

  ::NetworkOptions_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const NetworkOptions& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // VPN
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (NetworkOptions::VPNConstIterator
         b (i.VPN ().begin ()), n (i.VPN ().end ());
         b != n; ++b)
    {
      if (typeid (NetworkOptions::VPNType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "VPN",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "VPN",
          "",
          false, true, e, *b);
    }
  }

  // DUN
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (NetworkOptions::DUNConstIterator
         b (i.DUN ().begin ()), n (i.DUN ().end ());
         b != n; ++b)
    {
      if (typeid (NetworkOptions::DUNType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "DUN",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "DUN",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


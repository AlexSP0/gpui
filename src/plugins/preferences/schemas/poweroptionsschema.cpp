// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "poweroptionsschema.h"

// PowerSchemeProperties_t
// 

const PowerSchemeProperties_t::ActionOptional& PowerSchemeProperties_t::
action () const
{
  return this->action_;
}

PowerSchemeProperties_t::ActionOptional& PowerSchemeProperties_t::
action ()
{
  return this->action_;
}

void PowerSchemeProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void PowerSchemeProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void PowerSchemeProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const PowerSchemeProperties_t::NameType& PowerSchemeProperties_t::
name () const
{
  return this->name_.get ();
}

PowerSchemeProperties_t::NameType& PowerSchemeProperties_t::
name ()
{
  return this->name_.get ();
}

void PowerSchemeProperties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void PowerSchemeProperties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const PowerSchemeProperties_t::DefaultOptional& PowerSchemeProperties_t::
default_ () const
{
  return this->default__;
}

PowerSchemeProperties_t::DefaultOptional& PowerSchemeProperties_t::
default_ ()
{
  return this->default__;
}

void PowerSchemeProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void PowerSchemeProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const PowerSchemeProperties_t::MonitorAcOptional& PowerSchemeProperties_t::
monitorAc () const
{
  return this->monitorAc_;
}

PowerSchemeProperties_t::MonitorAcOptional& PowerSchemeProperties_t::
monitorAc ()
{
  return this->monitorAc_;
}

void PowerSchemeProperties_t::
monitorAc (const MonitorAcType& x)
{
  this->monitorAc_.set (x);
}

void PowerSchemeProperties_t::
monitorAc (const MonitorAcOptional& x)
{
  this->monitorAc_ = x;
}

const PowerSchemeProperties_t::MonitorDcOptional& PowerSchemeProperties_t::
monitorDc () const
{
  return this->monitorDc_;
}

PowerSchemeProperties_t::MonitorDcOptional& PowerSchemeProperties_t::
monitorDc ()
{
  return this->monitorDc_;
}

void PowerSchemeProperties_t::
monitorDc (const MonitorDcType& x)
{
  this->monitorDc_.set (x);
}

void PowerSchemeProperties_t::
monitorDc (const MonitorDcOptional& x)
{
  this->monitorDc_ = x;
}

const PowerSchemeProperties_t::HardDiskAcOptional& PowerSchemeProperties_t::
hardDiskAc () const
{
  return this->hardDiskAc_;
}

PowerSchemeProperties_t::HardDiskAcOptional& PowerSchemeProperties_t::
hardDiskAc ()
{
  return this->hardDiskAc_;
}

void PowerSchemeProperties_t::
hardDiskAc (const HardDiskAcType& x)
{
  this->hardDiskAc_.set (x);
}

void PowerSchemeProperties_t::
hardDiskAc (const HardDiskAcOptional& x)
{
  this->hardDiskAc_ = x;
}

const PowerSchemeProperties_t::HardDiskDcOptional& PowerSchemeProperties_t::
hardDiskDc () const
{
  return this->hardDiskDc_;
}

PowerSchemeProperties_t::HardDiskDcOptional& PowerSchemeProperties_t::
hardDiskDc ()
{
  return this->hardDiskDc_;
}

void PowerSchemeProperties_t::
hardDiskDc (const HardDiskDcType& x)
{
  this->hardDiskDc_.set (x);
}

void PowerSchemeProperties_t::
hardDiskDc (const HardDiskDcOptional& x)
{
  this->hardDiskDc_ = x;
}

const PowerSchemeProperties_t::StandbyAcOptional& PowerSchemeProperties_t::
standbyAc () const
{
  return this->standbyAc_;
}

PowerSchemeProperties_t::StandbyAcOptional& PowerSchemeProperties_t::
standbyAc ()
{
  return this->standbyAc_;
}

void PowerSchemeProperties_t::
standbyAc (const StandbyAcType& x)
{
  this->standbyAc_.set (x);
}

void PowerSchemeProperties_t::
standbyAc (const StandbyAcOptional& x)
{
  this->standbyAc_ = x;
}

const PowerSchemeProperties_t::StandbyDcOptional& PowerSchemeProperties_t::
standbyDc () const
{
  return this->standbyDc_;
}

PowerSchemeProperties_t::StandbyDcOptional& PowerSchemeProperties_t::
standbyDc ()
{
  return this->standbyDc_;
}

void PowerSchemeProperties_t::
standbyDc (const StandbyDcType& x)
{
  this->standbyDc_.set (x);
}

void PowerSchemeProperties_t::
standbyDc (const StandbyDcOptional& x)
{
  this->standbyDc_ = x;
}

const PowerSchemeProperties_t::HibernateAcOptional& PowerSchemeProperties_t::
hibernateAc () const
{
  return this->hibernateAc_;
}

PowerSchemeProperties_t::HibernateAcOptional& PowerSchemeProperties_t::
hibernateAc ()
{
  return this->hibernateAc_;
}

void PowerSchemeProperties_t::
hibernateAc (const HibernateAcType& x)
{
  this->hibernateAc_.set (x);
}

void PowerSchemeProperties_t::
hibernateAc (const HibernateAcOptional& x)
{
  this->hibernateAc_ = x;
}

const PowerSchemeProperties_t::HibernateDcOptional& PowerSchemeProperties_t::
hibernateDc () const
{
  return this->hibernateDc_;
}

PowerSchemeProperties_t::HibernateDcOptional& PowerSchemeProperties_t::
hibernateDc ()
{
  return this->hibernateDc_;
}

void PowerSchemeProperties_t::
hibernateDc (const HibernateDcType& x)
{
  this->hibernateDc_.set (x);
}

void PowerSchemeProperties_t::
hibernateDc (const HibernateDcOptional& x)
{
  this->hibernateDc_ = x;
}

const PowerSchemeProperties_t::DisabledOptional& PowerSchemeProperties_t::
disabled () const
{
  return this->disabled_;
}

PowerSchemeProperties_t::DisabledOptional& PowerSchemeProperties_t::
disabled ()
{
  return this->disabled_;
}

void PowerSchemeProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void PowerSchemeProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// PowerScheme_t
// 

const PowerScheme_t::PropertiesSequence& PowerScheme_t::
Properties () const
{
  return this->Properties_;
}

PowerScheme_t::PropertiesSequence& PowerScheme_t::
Properties ()
{
  return this->Properties_;
}

void PowerScheme_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const PowerScheme_t::ClsidType& PowerScheme_t::
clsid () const
{
  return this->clsid_.get ();
}

PowerScheme_t::ClsidType& PowerScheme_t::
clsid ()
{
  return this->clsid_.get ();
}

void PowerScheme_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void PowerScheme_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const PowerScheme_t::NameType& PowerScheme_t::
name () const
{
  return this->name_.get ();
}

PowerScheme_t::NameType& PowerScheme_t::
name ()
{
  return this->name_.get ();
}

void PowerScheme_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void PowerScheme_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const PowerScheme_t::ImageOptional& PowerScheme_t::
image () const
{
  return this->image_;
}

PowerScheme_t::ImageOptional& PowerScheme_t::
image ()
{
  return this->image_;
}

void PowerScheme_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void PowerScheme_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const PowerScheme_t::ChangedOptional& PowerScheme_t::
changed () const
{
  return this->changed_;
}

PowerScheme_t::ChangedOptional& PowerScheme_t::
changed ()
{
  return this->changed_;
}

void PowerScheme_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void PowerScheme_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void PowerScheme_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const PowerScheme_t::UidType& PowerScheme_t::
uid () const
{
  return this->uid_.get ();
}

PowerScheme_t::UidType& PowerScheme_t::
uid ()
{
  return this->uid_.get ();
}

void PowerScheme_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void PowerScheme_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const PowerScheme_t::DescOptional& PowerScheme_t::
desc () const
{
  return this->desc_;
}

PowerScheme_t::DescOptional& PowerScheme_t::
desc ()
{
  return this->desc_;
}

void PowerScheme_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void PowerScheme_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void PowerScheme_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const PowerScheme_t::BypassErrorsOptional& PowerScheme_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

PowerScheme_t::BypassErrorsOptional& PowerScheme_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void PowerScheme_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void PowerScheme_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const PowerScheme_t::UserContextOptional& PowerScheme_t::
userContext () const
{
  return this->userContext_;
}

PowerScheme_t::UserContextOptional& PowerScheme_t::
userContext ()
{
  return this->userContext_;
}

void PowerScheme_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void PowerScheme_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const PowerScheme_t::RemovePolicyOptional& PowerScheme_t::
removePolicy () const
{
  return this->removePolicy_;
}

PowerScheme_t::RemovePolicyOptional& PowerScheme_t::
removePolicy ()
{
  return this->removePolicy_;
}

void PowerScheme_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void PowerScheme_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const PowerScheme_t::StatusOptional& PowerScheme_t::
status () const
{
  return this->status_;
}

PowerScheme_t::StatusOptional& PowerScheme_t::
status ()
{
  return this->status_;
}

void PowerScheme_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void PowerScheme_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void PowerScheme_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// GlobalPowerOptionsProperties_t
// 

const GlobalPowerOptionsProperties_t::ShowIconOptional& GlobalPowerOptionsProperties_t::
showIcon () const
{
  return this->showIcon_;
}

GlobalPowerOptionsProperties_t::ShowIconOptional& GlobalPowerOptionsProperties_t::
showIcon ()
{
  return this->showIcon_;
}

void GlobalPowerOptionsProperties_t::
showIcon (const ShowIconType& x)
{
  this->showIcon_.set (x);
}

void GlobalPowerOptionsProperties_t::
showIcon (const ShowIconOptional& x)
{
  this->showIcon_ = x;
}

const GlobalPowerOptionsProperties_t::PromptPasswordOptional& GlobalPowerOptionsProperties_t::
promptPassword () const
{
  return this->promptPassword_;
}

GlobalPowerOptionsProperties_t::PromptPasswordOptional& GlobalPowerOptionsProperties_t::
promptPassword ()
{
  return this->promptPassword_;
}

void GlobalPowerOptionsProperties_t::
promptPassword (const PromptPasswordType& x)
{
  this->promptPassword_.set (x);
}

void GlobalPowerOptionsProperties_t::
promptPassword (const PromptPasswordOptional& x)
{
  this->promptPassword_ = x;
}

const GlobalPowerOptionsProperties_t::EnableHibernationOptional& GlobalPowerOptionsProperties_t::
enableHibernation () const
{
  return this->enableHibernation_;
}

GlobalPowerOptionsProperties_t::EnableHibernationOptional& GlobalPowerOptionsProperties_t::
enableHibernation ()
{
  return this->enableHibernation_;
}

void GlobalPowerOptionsProperties_t::
enableHibernation (const EnableHibernationType& x)
{
  this->enableHibernation_.set (x);
}

void GlobalPowerOptionsProperties_t::
enableHibernation (const EnableHibernationOptional& x)
{
  this->enableHibernation_ = x;
}

const GlobalPowerOptionsProperties_t::CloseLidOptional& GlobalPowerOptionsProperties_t::
closeLid () const
{
  return this->closeLid_;
}

GlobalPowerOptionsProperties_t::CloseLidOptional& GlobalPowerOptionsProperties_t::
closeLid ()
{
  return this->closeLid_;
}

void GlobalPowerOptionsProperties_t::
closeLid (const CloseLidType& x)
{
  this->closeLid_.set (x);
}

void GlobalPowerOptionsProperties_t::
closeLid (const CloseLidOptional& x)
{
  this->closeLid_ = x;
}

void GlobalPowerOptionsProperties_t::
closeLid (::std::unique_ptr< CloseLidType > x)
{
  this->closeLid_.set (std::move (x));
}

const GlobalPowerOptionsProperties_t::PressPowerBtnOptional& GlobalPowerOptionsProperties_t::
pressPowerBtn () const
{
  return this->pressPowerBtn_;
}

GlobalPowerOptionsProperties_t::PressPowerBtnOptional& GlobalPowerOptionsProperties_t::
pressPowerBtn ()
{
  return this->pressPowerBtn_;
}

void GlobalPowerOptionsProperties_t::
pressPowerBtn (const PressPowerBtnType& x)
{
  this->pressPowerBtn_.set (x);
}

void GlobalPowerOptionsProperties_t::
pressPowerBtn (const PressPowerBtnOptional& x)
{
  this->pressPowerBtn_ = x;
}

void GlobalPowerOptionsProperties_t::
pressPowerBtn (::std::unique_ptr< PressPowerBtnType > x)
{
  this->pressPowerBtn_.set (std::move (x));
}

const GlobalPowerOptionsProperties_t::PressSleepBtnOptional& GlobalPowerOptionsProperties_t::
pressSleepBtn () const
{
  return this->pressSleepBtn_;
}

GlobalPowerOptionsProperties_t::PressSleepBtnOptional& GlobalPowerOptionsProperties_t::
pressSleepBtn ()
{
  return this->pressSleepBtn_;
}

void GlobalPowerOptionsProperties_t::
pressSleepBtn (const PressSleepBtnType& x)
{
  this->pressSleepBtn_.set (x);
}

void GlobalPowerOptionsProperties_t::
pressSleepBtn (const PressSleepBtnOptional& x)
{
  this->pressSleepBtn_ = x;
}

void GlobalPowerOptionsProperties_t::
pressSleepBtn (::std::unique_ptr< PressSleepBtnType > x)
{
  this->pressSleepBtn_.set (std::move (x));
}

const GlobalPowerOptionsProperties_t::DisabledOptional& GlobalPowerOptionsProperties_t::
disabled () const
{
  return this->disabled_;
}

GlobalPowerOptionsProperties_t::DisabledOptional& GlobalPowerOptionsProperties_t::
disabled ()
{
  return this->disabled_;
}

void GlobalPowerOptionsProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void GlobalPowerOptionsProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// GlobalPowerOptions_t
// 

const GlobalPowerOptions_t::PropertiesSequence& GlobalPowerOptions_t::
Properties () const
{
  return this->Properties_;
}

GlobalPowerOptions_t::PropertiesSequence& GlobalPowerOptions_t::
Properties ()
{
  return this->Properties_;
}

void GlobalPowerOptions_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const GlobalPowerOptions_t::ClsidType& GlobalPowerOptions_t::
clsid () const
{
  return this->clsid_.get ();
}

GlobalPowerOptions_t::ClsidType& GlobalPowerOptions_t::
clsid ()
{
  return this->clsid_.get ();
}

void GlobalPowerOptions_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void GlobalPowerOptions_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const GlobalPowerOptions_t::NameType& GlobalPowerOptions_t::
name () const
{
  return this->name_.get ();
}

GlobalPowerOptions_t::NameType& GlobalPowerOptions_t::
name ()
{
  return this->name_.get ();
}

void GlobalPowerOptions_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void GlobalPowerOptions_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const GlobalPowerOptions_t::ImageOptional& GlobalPowerOptions_t::
image () const
{
  return this->image_;
}

GlobalPowerOptions_t::ImageOptional& GlobalPowerOptions_t::
image ()
{
  return this->image_;
}

void GlobalPowerOptions_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void GlobalPowerOptions_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const GlobalPowerOptions_t::ChangedOptional& GlobalPowerOptions_t::
changed () const
{
  return this->changed_;
}

GlobalPowerOptions_t::ChangedOptional& GlobalPowerOptions_t::
changed ()
{
  return this->changed_;
}

void GlobalPowerOptions_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void GlobalPowerOptions_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void GlobalPowerOptions_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const GlobalPowerOptions_t::UidType& GlobalPowerOptions_t::
uid () const
{
  return this->uid_.get ();
}

GlobalPowerOptions_t::UidType& GlobalPowerOptions_t::
uid ()
{
  return this->uid_.get ();
}

void GlobalPowerOptions_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void GlobalPowerOptions_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const GlobalPowerOptions_t::DescOptional& GlobalPowerOptions_t::
desc () const
{
  return this->desc_;
}

GlobalPowerOptions_t::DescOptional& GlobalPowerOptions_t::
desc ()
{
  return this->desc_;
}

void GlobalPowerOptions_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void GlobalPowerOptions_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void GlobalPowerOptions_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const GlobalPowerOptions_t::BypassErrorsOptional& GlobalPowerOptions_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

GlobalPowerOptions_t::BypassErrorsOptional& GlobalPowerOptions_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void GlobalPowerOptions_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void GlobalPowerOptions_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const GlobalPowerOptions_t::UserContextOptional& GlobalPowerOptions_t::
userContext () const
{
  return this->userContext_;
}

GlobalPowerOptions_t::UserContextOptional& GlobalPowerOptions_t::
userContext ()
{
  return this->userContext_;
}

void GlobalPowerOptions_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void GlobalPowerOptions_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const GlobalPowerOptions_t::RemovePolicyOptional& GlobalPowerOptions_t::
removePolicy () const
{
  return this->removePolicy_;
}

GlobalPowerOptions_t::RemovePolicyOptional& GlobalPowerOptions_t::
removePolicy ()
{
  return this->removePolicy_;
}

void GlobalPowerOptions_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void GlobalPowerOptions_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const GlobalPowerOptions_t::StatusOptional& GlobalPowerOptions_t::
status () const
{
  return this->status_;
}

GlobalPowerOptions_t::StatusOptional& GlobalPowerOptions_t::
status ()
{
  return this->status_;
}

void GlobalPowerOptions_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void GlobalPowerOptions_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void GlobalPowerOptions_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// GlobalPowerOptionsV2Properties_t
// 

const GlobalPowerOptionsV2Properties_t::ActionOptional& GlobalPowerOptionsV2Properties_t::
action () const
{
  return this->action_;
}

GlobalPowerOptionsV2Properties_t::ActionOptional& GlobalPowerOptionsV2Properties_t::
action ()
{
  return this->action_;
}

void GlobalPowerOptionsV2Properties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void GlobalPowerOptionsV2Properties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::NameGuidOptional& GlobalPowerOptionsV2Properties_t::
nameGuid () const
{
  return this->nameGuid_;
}

GlobalPowerOptionsV2Properties_t::NameGuidOptional& GlobalPowerOptionsV2Properties_t::
nameGuid ()
{
  return this->nameGuid_;
}

void GlobalPowerOptionsV2Properties_t::
nameGuid (const NameGuidType& x)
{
  this->nameGuid_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
nameGuid (const NameGuidOptional& x)
{
  this->nameGuid_ = x;
}

void GlobalPowerOptionsV2Properties_t::
nameGuid (::std::unique_ptr< NameGuidType > x)
{
  this->nameGuid_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::DefaultOptional& GlobalPowerOptionsV2Properties_t::
default_ () const
{
  return this->default__;
}

GlobalPowerOptionsV2Properties_t::DefaultOptional& GlobalPowerOptionsV2Properties_t::
default_ ()
{
  return this->default__;
}

void GlobalPowerOptionsV2Properties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void GlobalPowerOptionsV2Properties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const GlobalPowerOptionsV2Properties_t::RequireWakePwdACOptional& GlobalPowerOptionsV2Properties_t::
requireWakePwdAC () const
{
  return this->requireWakePwdAC_;
}

GlobalPowerOptionsV2Properties_t::RequireWakePwdACOptional& GlobalPowerOptionsV2Properties_t::
requireWakePwdAC ()
{
  return this->requireWakePwdAC_;
}

void GlobalPowerOptionsV2Properties_t::
requireWakePwdAC (const RequireWakePwdACType& x)
{
  this->requireWakePwdAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
requireWakePwdAC (const RequireWakePwdACOptional& x)
{
  this->requireWakePwdAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
requireWakePwdAC (::std::unique_ptr< RequireWakePwdACType > x)
{
  this->requireWakePwdAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::RequireWakePwdDCOptional& GlobalPowerOptionsV2Properties_t::
requireWakePwdDC () const
{
  return this->requireWakePwdDC_;
}

GlobalPowerOptionsV2Properties_t::RequireWakePwdDCOptional& GlobalPowerOptionsV2Properties_t::
requireWakePwdDC ()
{
  return this->requireWakePwdDC_;
}

void GlobalPowerOptionsV2Properties_t::
requireWakePwdDC (const RequireWakePwdDCType& x)
{
  this->requireWakePwdDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
requireWakePwdDC (const RequireWakePwdDCOptional& x)
{
  this->requireWakePwdDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
requireWakePwdDC (::std::unique_ptr< RequireWakePwdDCType > x)
{
  this->requireWakePwdDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::TurnOffHDACOptional& GlobalPowerOptionsV2Properties_t::
turnOffHDAC () const
{
  return this->turnOffHDAC_;
}

GlobalPowerOptionsV2Properties_t::TurnOffHDACOptional& GlobalPowerOptionsV2Properties_t::
turnOffHDAC ()
{
  return this->turnOffHDAC_;
}

void GlobalPowerOptionsV2Properties_t::
turnOffHDAC (const TurnOffHDACType& x)
{
  this->turnOffHDAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
turnOffHDAC (const TurnOffHDACOptional& x)
{
  this->turnOffHDAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::TurnOffHDDCOptional& GlobalPowerOptionsV2Properties_t::
turnOffHDDC () const
{
  return this->turnOffHDDC_;
}

GlobalPowerOptionsV2Properties_t::TurnOffHDDCOptional& GlobalPowerOptionsV2Properties_t::
turnOffHDDC ()
{
  return this->turnOffHDDC_;
}

void GlobalPowerOptionsV2Properties_t::
turnOffHDDC (const TurnOffHDDCType& x)
{
  this->turnOffHDDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
turnOffHDDC (const TurnOffHDDCOptional& x)
{
  this->turnOffHDDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::SleepAfterACOptional& GlobalPowerOptionsV2Properties_t::
sleepAfterAC () const
{
  return this->sleepAfterAC_;
}

GlobalPowerOptionsV2Properties_t::SleepAfterACOptional& GlobalPowerOptionsV2Properties_t::
sleepAfterAC ()
{
  return this->sleepAfterAC_;
}

void GlobalPowerOptionsV2Properties_t::
sleepAfterAC (const SleepAfterACType& x)
{
  this->sleepAfterAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
sleepAfterAC (const SleepAfterACOptional& x)
{
  this->sleepAfterAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::SleepAfterDCOptional& GlobalPowerOptionsV2Properties_t::
sleepAfterDC () const
{
  return this->sleepAfterDC_;
}

GlobalPowerOptionsV2Properties_t::SleepAfterDCOptional& GlobalPowerOptionsV2Properties_t::
sleepAfterDC ()
{
  return this->sleepAfterDC_;
}

void GlobalPowerOptionsV2Properties_t::
sleepAfterDC (const SleepAfterDCType& x)
{
  this->sleepAfterDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
sleepAfterDC (const SleepAfterDCOptional& x)
{
  this->sleepAfterDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::AllowHybridSleepACOptional& GlobalPowerOptionsV2Properties_t::
allowHybridSleepAC () const
{
  return this->allowHybridSleepAC_;
}

GlobalPowerOptionsV2Properties_t::AllowHybridSleepACOptional& GlobalPowerOptionsV2Properties_t::
allowHybridSleepAC ()
{
  return this->allowHybridSleepAC_;
}

void GlobalPowerOptionsV2Properties_t::
allowHybridSleepAC (const AllowHybridSleepACType& x)
{
  this->allowHybridSleepAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
allowHybridSleepAC (const AllowHybridSleepACOptional& x)
{
  this->allowHybridSleepAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
allowHybridSleepAC (::std::unique_ptr< AllowHybridSleepACType > x)
{
  this->allowHybridSleepAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::AllowHybridSleepDCOptional& GlobalPowerOptionsV2Properties_t::
allowHybridSleepDC () const
{
  return this->allowHybridSleepDC_;
}

GlobalPowerOptionsV2Properties_t::AllowHybridSleepDCOptional& GlobalPowerOptionsV2Properties_t::
allowHybridSleepDC ()
{
  return this->allowHybridSleepDC_;
}

void GlobalPowerOptionsV2Properties_t::
allowHybridSleepDC (const AllowHybridSleepDCType& x)
{
  this->allowHybridSleepDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
allowHybridSleepDC (const AllowHybridSleepDCOptional& x)
{
  this->allowHybridSleepDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
allowHybridSleepDC (::std::unique_ptr< AllowHybridSleepDCType > x)
{
  this->allowHybridSleepDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::HibernateACOptional& GlobalPowerOptionsV2Properties_t::
hibernateAC () const
{
  return this->hibernateAC_;
}

GlobalPowerOptionsV2Properties_t::HibernateACOptional& GlobalPowerOptionsV2Properties_t::
hibernateAC ()
{
  return this->hibernateAC_;
}

void GlobalPowerOptionsV2Properties_t::
hibernateAC (const HibernateACType& x)
{
  this->hibernateAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
hibernateAC (const HibernateACOptional& x)
{
  this->hibernateAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::HibernateDCOptional& GlobalPowerOptionsV2Properties_t::
hibernateDC () const
{
  return this->hibernateDC_;
}

GlobalPowerOptionsV2Properties_t::HibernateDCOptional& GlobalPowerOptionsV2Properties_t::
hibernateDC ()
{
  return this->hibernateDC_;
}

void GlobalPowerOptionsV2Properties_t::
hibernateDC (const HibernateDCType& x)
{
  this->hibernateDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
hibernateDC (const HibernateDCOptional& x)
{
  this->hibernateDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::LidCloseACOptional& GlobalPowerOptionsV2Properties_t::
lidCloseAC () const
{
  return this->lidCloseAC_;
}

GlobalPowerOptionsV2Properties_t::LidCloseACOptional& GlobalPowerOptionsV2Properties_t::
lidCloseAC ()
{
  return this->lidCloseAC_;
}

void GlobalPowerOptionsV2Properties_t::
lidCloseAC (const LidCloseACType& x)
{
  this->lidCloseAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lidCloseAC (const LidCloseACOptional& x)
{
  this->lidCloseAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
lidCloseAC (::std::unique_ptr< LidCloseACType > x)
{
  this->lidCloseAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LidCloseDCOptional& GlobalPowerOptionsV2Properties_t::
lidCloseDC () const
{
  return this->lidCloseDC_;
}

GlobalPowerOptionsV2Properties_t::LidCloseDCOptional& GlobalPowerOptionsV2Properties_t::
lidCloseDC ()
{
  return this->lidCloseDC_;
}

void GlobalPowerOptionsV2Properties_t::
lidCloseDC (const LidCloseDCType& x)
{
  this->lidCloseDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lidCloseDC (const LidCloseDCOptional& x)
{
  this->lidCloseDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
lidCloseDC (::std::unique_ptr< LidCloseDCType > x)
{
  this->lidCloseDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::PbActionACOptional& GlobalPowerOptionsV2Properties_t::
pbActionAC () const
{
  return this->pbActionAC_;
}

GlobalPowerOptionsV2Properties_t::PbActionACOptional& GlobalPowerOptionsV2Properties_t::
pbActionAC ()
{
  return this->pbActionAC_;
}

void GlobalPowerOptionsV2Properties_t::
pbActionAC (const PbActionACType& x)
{
  this->pbActionAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
pbActionAC (const PbActionACOptional& x)
{
  this->pbActionAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
pbActionAC (::std::unique_ptr< PbActionACType > x)
{
  this->pbActionAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::PbActionDCOptional& GlobalPowerOptionsV2Properties_t::
pbActionDC () const
{
  return this->pbActionDC_;
}

GlobalPowerOptionsV2Properties_t::PbActionDCOptional& GlobalPowerOptionsV2Properties_t::
pbActionDC ()
{
  return this->pbActionDC_;
}

void GlobalPowerOptionsV2Properties_t::
pbActionDC (const PbActionDCType& x)
{
  this->pbActionDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
pbActionDC (const PbActionDCOptional& x)
{
  this->pbActionDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
pbActionDC (::std::unique_ptr< PbActionDCType > x)
{
  this->pbActionDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::StrtMenuActionACOptional& GlobalPowerOptionsV2Properties_t::
strtMenuActionAC () const
{
  return this->strtMenuActionAC_;
}

GlobalPowerOptionsV2Properties_t::StrtMenuActionACOptional& GlobalPowerOptionsV2Properties_t::
strtMenuActionAC ()
{
  return this->strtMenuActionAC_;
}

void GlobalPowerOptionsV2Properties_t::
strtMenuActionAC (const StrtMenuActionACType& x)
{
  this->strtMenuActionAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
strtMenuActionAC (const StrtMenuActionACOptional& x)
{
  this->strtMenuActionAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
strtMenuActionAC (::std::unique_ptr< StrtMenuActionACType > x)
{
  this->strtMenuActionAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::StrtMenuActionDCOptional& GlobalPowerOptionsV2Properties_t::
strtMenuActionDC () const
{
  return this->strtMenuActionDC_;
}

GlobalPowerOptionsV2Properties_t::StrtMenuActionDCOptional& GlobalPowerOptionsV2Properties_t::
strtMenuActionDC ()
{
  return this->strtMenuActionDC_;
}

void GlobalPowerOptionsV2Properties_t::
strtMenuActionDC (const StrtMenuActionDCType& x)
{
  this->strtMenuActionDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
strtMenuActionDC (const StrtMenuActionDCOptional& x)
{
  this->strtMenuActionDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
strtMenuActionDC (::std::unique_ptr< StrtMenuActionDCType > x)
{
  this->strtMenuActionDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LinkPwrMgmtACOptional& GlobalPowerOptionsV2Properties_t::
linkPwrMgmtAC () const
{
  return this->linkPwrMgmtAC_;
}

GlobalPowerOptionsV2Properties_t::LinkPwrMgmtACOptional& GlobalPowerOptionsV2Properties_t::
linkPwrMgmtAC ()
{
  return this->linkPwrMgmtAC_;
}

void GlobalPowerOptionsV2Properties_t::
linkPwrMgmtAC (const LinkPwrMgmtACType& x)
{
  this->linkPwrMgmtAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
linkPwrMgmtAC (const LinkPwrMgmtACOptional& x)
{
  this->linkPwrMgmtAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
linkPwrMgmtAC (::std::unique_ptr< LinkPwrMgmtACType > x)
{
  this->linkPwrMgmtAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LinkPwrMgmtDCOptional& GlobalPowerOptionsV2Properties_t::
linkPwrMgmtDC () const
{
  return this->linkPwrMgmtDC_;
}

GlobalPowerOptionsV2Properties_t::LinkPwrMgmtDCOptional& GlobalPowerOptionsV2Properties_t::
linkPwrMgmtDC ()
{
  return this->linkPwrMgmtDC_;
}

void GlobalPowerOptionsV2Properties_t::
linkPwrMgmtDC (const LinkPwrMgmtDCType& x)
{
  this->linkPwrMgmtDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
linkPwrMgmtDC (const LinkPwrMgmtDCOptional& x)
{
  this->linkPwrMgmtDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
linkPwrMgmtDC (::std::unique_ptr< LinkPwrMgmtDCType > x)
{
  this->linkPwrMgmtDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::ProcStateMinACOptional& GlobalPowerOptionsV2Properties_t::
procStateMinAC () const
{
  return this->procStateMinAC_;
}

GlobalPowerOptionsV2Properties_t::ProcStateMinACOptional& GlobalPowerOptionsV2Properties_t::
procStateMinAC ()
{
  return this->procStateMinAC_;
}

void GlobalPowerOptionsV2Properties_t::
procStateMinAC (const ProcStateMinACType& x)
{
  this->procStateMinAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
procStateMinAC (const ProcStateMinACOptional& x)
{
  this->procStateMinAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::ProcStateMinDCOptional& GlobalPowerOptionsV2Properties_t::
procStateMinDC () const
{
  return this->procStateMinDC_;
}

GlobalPowerOptionsV2Properties_t::ProcStateMinDCOptional& GlobalPowerOptionsV2Properties_t::
procStateMinDC ()
{
  return this->procStateMinDC_;
}

void GlobalPowerOptionsV2Properties_t::
procStateMinDC (const ProcStateMinDCType& x)
{
  this->procStateMinDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
procStateMinDC (const ProcStateMinDCOptional& x)
{
  this->procStateMinDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::ProcStateMaxACOptional& GlobalPowerOptionsV2Properties_t::
procStateMaxAC () const
{
  return this->procStateMaxAC_;
}

GlobalPowerOptionsV2Properties_t::ProcStateMaxACOptional& GlobalPowerOptionsV2Properties_t::
procStateMaxAC ()
{
  return this->procStateMaxAC_;
}

void GlobalPowerOptionsV2Properties_t::
procStateMaxAC (const ProcStateMaxACType& x)
{
  this->procStateMaxAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
procStateMaxAC (const ProcStateMaxACOptional& x)
{
  this->procStateMaxAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::ProcStateMaxDCOptional& GlobalPowerOptionsV2Properties_t::
procStateMaxDC () const
{
  return this->procStateMaxDC_;
}

GlobalPowerOptionsV2Properties_t::ProcStateMaxDCOptional& GlobalPowerOptionsV2Properties_t::
procStateMaxDC ()
{
  return this->procStateMaxDC_;
}

void GlobalPowerOptionsV2Properties_t::
procStateMaxDC (const ProcStateMaxDCType& x)
{
  this->procStateMaxDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
procStateMaxDC (const ProcStateMaxDCOptional& x)
{
  this->procStateMaxDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::DisplayOffACOptional& GlobalPowerOptionsV2Properties_t::
displayOffAC () const
{
  return this->displayOffAC_;
}

GlobalPowerOptionsV2Properties_t::DisplayOffACOptional& GlobalPowerOptionsV2Properties_t::
displayOffAC ()
{
  return this->displayOffAC_;
}

void GlobalPowerOptionsV2Properties_t::
displayOffAC (const DisplayOffACType& x)
{
  this->displayOffAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
displayOffAC (const DisplayOffACOptional& x)
{
  this->displayOffAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::DisplayOffDCOptional& GlobalPowerOptionsV2Properties_t::
displayOffDC () const
{
  return this->displayOffDC_;
}

GlobalPowerOptionsV2Properties_t::DisplayOffDCOptional& GlobalPowerOptionsV2Properties_t::
displayOffDC ()
{
  return this->displayOffDC_;
}

void GlobalPowerOptionsV2Properties_t::
displayOffDC (const DisplayOffDCType& x)
{
  this->displayOffDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
displayOffDC (const DisplayOffDCOptional& x)
{
  this->displayOffDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::AdaptiveACOptional& GlobalPowerOptionsV2Properties_t::
adaptiveAC () const
{
  return this->adaptiveAC_;
}

GlobalPowerOptionsV2Properties_t::AdaptiveACOptional& GlobalPowerOptionsV2Properties_t::
adaptiveAC ()
{
  return this->adaptiveAC_;
}

void GlobalPowerOptionsV2Properties_t::
adaptiveAC (const AdaptiveACType& x)
{
  this->adaptiveAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
adaptiveAC (const AdaptiveACOptional& x)
{
  this->adaptiveAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
adaptiveAC (::std::unique_ptr< AdaptiveACType > x)
{
  this->adaptiveAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::AdaptiveDCOptional& GlobalPowerOptionsV2Properties_t::
adaptiveDC () const
{
  return this->adaptiveDC_;
}

GlobalPowerOptionsV2Properties_t::AdaptiveDCOptional& GlobalPowerOptionsV2Properties_t::
adaptiveDC ()
{
  return this->adaptiveDC_;
}

void GlobalPowerOptionsV2Properties_t::
adaptiveDC (const AdaptiveDCType& x)
{
  this->adaptiveDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
adaptiveDC (const AdaptiveDCOptional& x)
{
  this->adaptiveDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
adaptiveDC (::std::unique_ptr< AdaptiveDCType > x)
{
  this->adaptiveDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::CritBatActionACOptional& GlobalPowerOptionsV2Properties_t::
critBatActionAC () const
{
  return this->critBatActionAC_;
}

GlobalPowerOptionsV2Properties_t::CritBatActionACOptional& GlobalPowerOptionsV2Properties_t::
critBatActionAC ()
{
  return this->critBatActionAC_;
}

void GlobalPowerOptionsV2Properties_t::
critBatActionAC (const CritBatActionACType& x)
{
  this->critBatActionAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
critBatActionAC (const CritBatActionACOptional& x)
{
  this->critBatActionAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
critBatActionAC (::std::unique_ptr< CritBatActionACType > x)
{
  this->critBatActionAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::CritBatActionDCOptional& GlobalPowerOptionsV2Properties_t::
critBatActionDC () const
{
  return this->critBatActionDC_;
}

GlobalPowerOptionsV2Properties_t::CritBatActionDCOptional& GlobalPowerOptionsV2Properties_t::
critBatActionDC ()
{
  return this->critBatActionDC_;
}

void GlobalPowerOptionsV2Properties_t::
critBatActionDC (const CritBatActionDCType& x)
{
  this->critBatActionDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
critBatActionDC (const CritBatActionDCOptional& x)
{
  this->critBatActionDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
critBatActionDC (::std::unique_ptr< CritBatActionDCType > x)
{
  this->critBatActionDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LowBatteryLvlACOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryLvlAC () const
{
  return this->lowBatteryLvlAC_;
}

GlobalPowerOptionsV2Properties_t::LowBatteryLvlACOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryLvlAC ()
{
  return this->lowBatteryLvlAC_;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryLvlAC (const LowBatteryLvlACType& x)
{
  this->lowBatteryLvlAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryLvlAC (const LowBatteryLvlACOptional& x)
{
  this->lowBatteryLvlAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::LowBatteryLvlDCOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryLvlDC () const
{
  return this->lowBatteryLvlDC_;
}

GlobalPowerOptionsV2Properties_t::LowBatteryLvlDCOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryLvlDC ()
{
  return this->lowBatteryLvlDC_;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryLvlDC (const LowBatteryLvlDCType& x)
{
  this->lowBatteryLvlDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryLvlDC (const LowBatteryLvlDCOptional& x)
{
  this->lowBatteryLvlDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::CritBatteryLvlACOptional& GlobalPowerOptionsV2Properties_t::
critBatteryLvlAC () const
{
  return this->critBatteryLvlAC_;
}

GlobalPowerOptionsV2Properties_t::CritBatteryLvlACOptional& GlobalPowerOptionsV2Properties_t::
critBatteryLvlAC ()
{
  return this->critBatteryLvlAC_;
}

void GlobalPowerOptionsV2Properties_t::
critBatteryLvlAC (const CritBatteryLvlACType& x)
{
  this->critBatteryLvlAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
critBatteryLvlAC (const CritBatteryLvlACOptional& x)
{
  this->critBatteryLvlAC_ = x;
}

const GlobalPowerOptionsV2Properties_t::CritBatteryLvlDCOptional& GlobalPowerOptionsV2Properties_t::
critBatteryLvlDC () const
{
  return this->critBatteryLvlDC_;
}

GlobalPowerOptionsV2Properties_t::CritBatteryLvlDCOptional& GlobalPowerOptionsV2Properties_t::
critBatteryLvlDC ()
{
  return this->critBatteryLvlDC_;
}

void GlobalPowerOptionsV2Properties_t::
critBatteryLvlDC (const CritBatteryLvlDCType& x)
{
  this->critBatteryLvlDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
critBatteryLvlDC (const CritBatteryLvlDCOptional& x)
{
  this->critBatteryLvlDC_ = x;
}

const GlobalPowerOptionsV2Properties_t::LowBatteryNotACOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryNotAC () const
{
  return this->lowBatteryNotAC_;
}

GlobalPowerOptionsV2Properties_t::LowBatteryNotACOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryNotAC ()
{
  return this->lowBatteryNotAC_;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryNotAC (const LowBatteryNotACType& x)
{
  this->lowBatteryNotAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryNotAC (const LowBatteryNotACOptional& x)
{
  this->lowBatteryNotAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryNotAC (::std::unique_ptr< LowBatteryNotACType > x)
{
  this->lowBatteryNotAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LowBatteryNotDCOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryNotDC () const
{
  return this->lowBatteryNotDC_;
}

GlobalPowerOptionsV2Properties_t::LowBatteryNotDCOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryNotDC ()
{
  return this->lowBatteryNotDC_;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryNotDC (const LowBatteryNotDCType& x)
{
  this->lowBatteryNotDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryNotDC (const LowBatteryNotDCOptional& x)
{
  this->lowBatteryNotDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryNotDC (::std::unique_ptr< LowBatteryNotDCType > x)
{
  this->lowBatteryNotDC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LowBatteryActionACOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryActionAC () const
{
  return this->lowBatteryActionAC_;
}

GlobalPowerOptionsV2Properties_t::LowBatteryActionACOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryActionAC ()
{
  return this->lowBatteryActionAC_;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryActionAC (const LowBatteryActionACType& x)
{
  this->lowBatteryActionAC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryActionAC (const LowBatteryActionACOptional& x)
{
  this->lowBatteryActionAC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryActionAC (::std::unique_ptr< LowBatteryActionACType > x)
{
  this->lowBatteryActionAC_.set (std::move (x));
}

const GlobalPowerOptionsV2Properties_t::LowBatteryActionDCOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryActionDC () const
{
  return this->lowBatteryActionDC_;
}

GlobalPowerOptionsV2Properties_t::LowBatteryActionDCOptional& GlobalPowerOptionsV2Properties_t::
lowBatteryActionDC ()
{
  return this->lowBatteryActionDC_;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryActionDC (const LowBatteryActionDCType& x)
{
  this->lowBatteryActionDC_.set (x);
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryActionDC (const LowBatteryActionDCOptional& x)
{
  this->lowBatteryActionDC_ = x;
}

void GlobalPowerOptionsV2Properties_t::
lowBatteryActionDC (::std::unique_ptr< LowBatteryActionDCType > x)
{
  this->lowBatteryActionDC_.set (std::move (x));
}


// GlobalPowerOptionsV2_t
// 

const GlobalPowerOptionsV2_t::PropertiesSequence& GlobalPowerOptionsV2_t::
Properties () const
{
  return this->Properties_;
}

GlobalPowerOptionsV2_t::PropertiesSequence& GlobalPowerOptionsV2_t::
Properties ()
{
  return this->Properties_;
}

void GlobalPowerOptionsV2_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const GlobalPowerOptionsV2_t::ClsidType& GlobalPowerOptionsV2_t::
clsid () const
{
  return this->clsid_.get ();
}

GlobalPowerOptionsV2_t::ClsidType& GlobalPowerOptionsV2_t::
clsid ()
{
  return this->clsid_.get ();
}

void GlobalPowerOptionsV2_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void GlobalPowerOptionsV2_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const GlobalPowerOptionsV2_t::NameType& GlobalPowerOptionsV2_t::
name () const
{
  return this->name_.get ();
}

GlobalPowerOptionsV2_t::NameType& GlobalPowerOptionsV2_t::
name ()
{
  return this->name_.get ();
}

void GlobalPowerOptionsV2_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void GlobalPowerOptionsV2_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const GlobalPowerOptionsV2_t::ImageOptional& GlobalPowerOptionsV2_t::
image () const
{
  return this->image_;
}

GlobalPowerOptionsV2_t::ImageOptional& GlobalPowerOptionsV2_t::
image ()
{
  return this->image_;
}

void GlobalPowerOptionsV2_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void GlobalPowerOptionsV2_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const GlobalPowerOptionsV2_t::ChangedOptional& GlobalPowerOptionsV2_t::
changed () const
{
  return this->changed_;
}

GlobalPowerOptionsV2_t::ChangedOptional& GlobalPowerOptionsV2_t::
changed ()
{
  return this->changed_;
}

void GlobalPowerOptionsV2_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void GlobalPowerOptionsV2_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void GlobalPowerOptionsV2_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const GlobalPowerOptionsV2_t::UidType& GlobalPowerOptionsV2_t::
uid () const
{
  return this->uid_.get ();
}

GlobalPowerOptionsV2_t::UidType& GlobalPowerOptionsV2_t::
uid ()
{
  return this->uid_.get ();
}

void GlobalPowerOptionsV2_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void GlobalPowerOptionsV2_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const GlobalPowerOptionsV2_t::DescOptional& GlobalPowerOptionsV2_t::
desc () const
{
  return this->desc_;
}

GlobalPowerOptionsV2_t::DescOptional& GlobalPowerOptionsV2_t::
desc ()
{
  return this->desc_;
}

void GlobalPowerOptionsV2_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void GlobalPowerOptionsV2_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void GlobalPowerOptionsV2_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const GlobalPowerOptionsV2_t::BypassErrorsOptional& GlobalPowerOptionsV2_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

GlobalPowerOptionsV2_t::BypassErrorsOptional& GlobalPowerOptionsV2_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void GlobalPowerOptionsV2_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void GlobalPowerOptionsV2_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const GlobalPowerOptionsV2_t::UserContextOptional& GlobalPowerOptionsV2_t::
userContext () const
{
  return this->userContext_;
}

GlobalPowerOptionsV2_t::UserContextOptional& GlobalPowerOptionsV2_t::
userContext ()
{
  return this->userContext_;
}

void GlobalPowerOptionsV2_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void GlobalPowerOptionsV2_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const GlobalPowerOptionsV2_t::RemovePolicyOptional& GlobalPowerOptionsV2_t::
removePolicy () const
{
  return this->removePolicy_;
}

GlobalPowerOptionsV2_t::RemovePolicyOptional& GlobalPowerOptionsV2_t::
removePolicy ()
{
  return this->removePolicy_;
}

void GlobalPowerOptionsV2_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void GlobalPowerOptionsV2_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const GlobalPowerOptionsV2_t::StatusOptional& GlobalPowerOptionsV2_t::
status () const
{
  return this->status_;
}

GlobalPowerOptionsV2_t::StatusOptional& GlobalPowerOptionsV2_t::
status ()
{
  return this->status_;
}

void GlobalPowerOptionsV2_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void GlobalPowerOptionsV2_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void GlobalPowerOptionsV2_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// PowerOptions
// 

const PowerOptions::GlobalPowerOptionsSequence& PowerOptions::
GlobalPowerOptions () const
{
  return this->GlobalPowerOptions_;
}

PowerOptions::GlobalPowerOptionsSequence& PowerOptions::
GlobalPowerOptions ()
{
  return this->GlobalPowerOptions_;
}

void PowerOptions::
GlobalPowerOptions (const GlobalPowerOptionsSequence& s)
{
  this->GlobalPowerOptions_ = s;
}

const PowerOptions::PowerSchemeSequence& PowerOptions::
PowerScheme () const
{
  return this->PowerScheme_;
}

PowerOptions::PowerSchemeSequence& PowerOptions::
PowerScheme ()
{
  return this->PowerScheme_;
}

void PowerOptions::
PowerScheme (const PowerSchemeSequence& s)
{
  this->PowerScheme_ = s;
}

const PowerOptions::GlobalPowerOptionsV2Sequence& PowerOptions::
GlobalPowerOptionsV2 () const
{
  return this->GlobalPowerOptionsV2_;
}

PowerOptions::GlobalPowerOptionsV2Sequence& PowerOptions::
GlobalPowerOptionsV2 ()
{
  return this->GlobalPowerOptionsV2_;
}

void PowerOptions::
GlobalPowerOptionsV2 (const GlobalPowerOptionsV2Sequence& s)
{
  this->GlobalPowerOptionsV2_ = s;
}

const PowerOptions::ClsidType& PowerOptions::
clsid () const
{
  return this->clsid_.get ();
}

PowerOptions::ClsidType& PowerOptions::
clsid ()
{
  return this->clsid_.get ();
}

void PowerOptions::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void PowerOptions::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const PowerOptions::DisabledOptional& PowerOptions::
disabled () const
{
  return this->disabled_;
}

PowerOptions::DisabledOptional& PowerOptions::
disabled ()
{
  return this->disabled_;
}

void PowerOptions::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void PowerOptions::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// PowerSchemeProperties_t
//

PowerSchemeProperties_t::
PowerSchemeProperties_t (const NameType& name)
: ::xml_schema::Type (),
  action_ (this),
  name_ (name, this),
  default__ (this),
  monitorAc_ (this),
  monitorDc_ (this),
  hardDiskAc_ (this),
  hardDiskDc_ (this),
  standbyAc_ (this),
  standbyDc_ (this),
  hibernateAc_ (this),
  hibernateDc_ (this),
  disabled_ (this)
{
}

PowerSchemeProperties_t::
PowerSchemeProperties_t (const PowerSchemeProperties_t& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  name_ (x.name_, f, this),
  default__ (x.default__, f, this),
  monitorAc_ (x.monitorAc_, f, this),
  monitorDc_ (x.monitorDc_, f, this),
  hardDiskAc_ (x.hardDiskAc_, f, this),
  hardDiskDc_ (x.hardDiskDc_, f, this),
  standbyAc_ (x.standbyAc_, f, this),
  standbyDc_ (x.standbyDc_, f, this),
  hibernateAc_ (x.hibernateAc_, f, this),
  hibernateDc_ (x.hibernateDc_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

PowerSchemeProperties_t::
PowerSchemeProperties_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  name_ (this),
  default__ (this),
  monitorAc_ (this),
  monitorDc_ (this),
  hardDiskAc_ (this),
  hardDiskDc_ (this),
  standbyAc_ (this),
  standbyDc_ (this),
  hibernateAc_ (this),
  hibernateDc_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void PowerSchemeProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "monitorAc" && n.namespace_ ().empty ())
    {
      this->monitorAc_.set (MonitorAcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "monitorDc" && n.namespace_ ().empty ())
    {
      this->monitorDc_.set (MonitorDcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hardDiskAc" && n.namespace_ ().empty ())
    {
      this->hardDiskAc_.set (HardDiskAcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hardDiskDc" && n.namespace_ ().empty ())
    {
      this->hardDiskDc_.set (HardDiskDcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "standbyAc" && n.namespace_ ().empty ())
    {
      this->standbyAc_.set (StandbyAcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "standbyDc" && n.namespace_ ().empty ())
    {
      this->standbyDc_.set (StandbyDcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hibernateAc" && n.namespace_ ().empty ())
    {
      this->hibernateAc_.set (HibernateAcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hibernateDc" && n.namespace_ ().empty ())
    {
      this->hibernateDc_.set (HibernateDcTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

PowerSchemeProperties_t* PowerSchemeProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class PowerSchemeProperties_t (*this, f, c);
}

PowerSchemeProperties_t& PowerSchemeProperties_t::
operator= (const PowerSchemeProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->name_ = x.name_;
    this->default__ = x.default__;
    this->monitorAc_ = x.monitorAc_;
    this->monitorDc_ = x.monitorDc_;
    this->hardDiskAc_ = x.hardDiskAc_;
    this->hardDiskDc_ = x.hardDiskDc_;
    this->standbyAc_ = x.standbyAc_;
    this->standbyDc_ = x.standbyDc_;
    this->hibernateAc_ = x.hibernateAc_;
    this->hibernateDc_ = x.hibernateDc_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

PowerSchemeProperties_t::
~PowerSchemeProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, PowerSchemeProperties_t >
_xsd_PowerSchemeProperties_t_type_factory_init (
  "PowerSchemeProperties_t",
  "");

// PowerScheme_t
//

PowerScheme_t::
PowerScheme_t (const ClsidType& clsid,
               const NameType& name,
               const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

PowerScheme_t::
PowerScheme_t (const PowerScheme_t& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

PowerScheme_t::
PowerScheme_t (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void PowerScheme_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

PowerScheme_t* PowerScheme_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class PowerScheme_t (*this, f, c);
}

PowerScheme_t& PowerScheme_t::
operator= (const PowerScheme_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

PowerScheme_t::
~PowerScheme_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, PowerScheme_t >
_xsd_PowerScheme_t_type_factory_init (
  "PowerScheme_t",
  "");

// GlobalPowerOptionsProperties_t
//

GlobalPowerOptionsProperties_t::
GlobalPowerOptionsProperties_t ()
: ::xml_schema::Type (),
  showIcon_ (this),
  promptPassword_ (this),
  enableHibernation_ (this),
  closeLid_ (this),
  pressPowerBtn_ (this),
  pressSleepBtn_ (this),
  disabled_ (this)
{
}

GlobalPowerOptionsProperties_t::
GlobalPowerOptionsProperties_t (const GlobalPowerOptionsProperties_t& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  showIcon_ (x.showIcon_, f, this),
  promptPassword_ (x.promptPassword_, f, this),
  enableHibernation_ (x.enableHibernation_, f, this),
  closeLid_ (x.closeLid_, f, this),
  pressPowerBtn_ (x.pressPowerBtn_, f, this),
  pressSleepBtn_ (x.pressSleepBtn_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

GlobalPowerOptionsProperties_t::
GlobalPowerOptionsProperties_t (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  showIcon_ (this),
  promptPassword_ (this),
  enableHibernation_ (this),
  closeLid_ (this),
  pressPowerBtn_ (this),
  pressSleepBtn_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void GlobalPowerOptionsProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "showIcon" && n.namespace_ ().empty ())
    {
      this->showIcon_.set (ShowIconTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "promptPassword" && n.namespace_ ().empty ())
    {
      this->promptPassword_.set (PromptPasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "enableHibernation" && n.namespace_ ().empty ())
    {
      this->enableHibernation_.set (EnableHibernationTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "closeLid" && n.namespace_ ().empty ())
    {
      this->closeLid_.set (CloseLidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "pressPowerBtn" && n.namespace_ ().empty ())
    {
      this->pressPowerBtn_.set (PressPowerBtnTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "pressSleepBtn" && n.namespace_ ().empty ())
    {
      this->pressSleepBtn_.set (PressSleepBtnTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }
}

GlobalPowerOptionsProperties_t* GlobalPowerOptionsProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalPowerOptionsProperties_t (*this, f, c);
}

GlobalPowerOptionsProperties_t& GlobalPowerOptionsProperties_t::
operator= (const GlobalPowerOptionsProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->showIcon_ = x.showIcon_;
    this->promptPassword_ = x.promptPassword_;
    this->enableHibernation_ = x.enableHibernation_;
    this->closeLid_ = x.closeLid_;
    this->pressPowerBtn_ = x.pressPowerBtn_;
    this->pressSleepBtn_ = x.pressSleepBtn_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

GlobalPowerOptionsProperties_t::
~GlobalPowerOptionsProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalPowerOptionsProperties_t >
_xsd_GlobalPowerOptionsProperties_t_type_factory_init (
  "GlobalPowerOptionsProperties_t",
  "");

// GlobalPowerOptions_t
//

GlobalPowerOptions_t::
GlobalPowerOptions_t (const ClsidType& clsid,
                      const NameType& name,
                      const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

GlobalPowerOptions_t::
GlobalPowerOptions_t (const GlobalPowerOptions_t& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

GlobalPowerOptions_t::
GlobalPowerOptions_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void GlobalPowerOptions_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

GlobalPowerOptions_t* GlobalPowerOptions_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalPowerOptions_t (*this, f, c);
}

GlobalPowerOptions_t& GlobalPowerOptions_t::
operator= (const GlobalPowerOptions_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

GlobalPowerOptions_t::
~GlobalPowerOptions_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalPowerOptions_t >
_xsd_GlobalPowerOptions_t_type_factory_init (
  "GlobalPowerOptions_t",
  "");

// GlobalPowerOptionsV2Properties_t
//

GlobalPowerOptionsV2Properties_t::
GlobalPowerOptionsV2Properties_t ()
: ::xml_schema::Type (),
  action_ (this),
  nameGuid_ (this),
  default__ (this),
  requireWakePwdAC_ (this),
  requireWakePwdDC_ (this),
  turnOffHDAC_ (this),
  turnOffHDDC_ (this),
  sleepAfterAC_ (this),
  sleepAfterDC_ (this),
  allowHybridSleepAC_ (this),
  allowHybridSleepDC_ (this),
  hibernateAC_ (this),
  hibernateDC_ (this),
  lidCloseAC_ (this),
  lidCloseDC_ (this),
  pbActionAC_ (this),
  pbActionDC_ (this),
  strtMenuActionAC_ (this),
  strtMenuActionDC_ (this),
  linkPwrMgmtAC_ (this),
  linkPwrMgmtDC_ (this),
  procStateMinAC_ (this),
  procStateMinDC_ (this),
  procStateMaxAC_ (this),
  procStateMaxDC_ (this),
  displayOffAC_ (this),
  displayOffDC_ (this),
  adaptiveAC_ (this),
  adaptiveDC_ (this),
  critBatActionAC_ (this),
  critBatActionDC_ (this),
  lowBatteryLvlAC_ (this),
  lowBatteryLvlDC_ (this),
  critBatteryLvlAC_ (this),
  critBatteryLvlDC_ (this),
  lowBatteryNotAC_ (this),
  lowBatteryNotDC_ (this),
  lowBatteryActionAC_ (this),
  lowBatteryActionDC_ (this)
{
}

GlobalPowerOptionsV2Properties_t::
GlobalPowerOptionsV2Properties_t (const GlobalPowerOptionsV2Properties_t& x,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  nameGuid_ (x.nameGuid_, f, this),
  default__ (x.default__, f, this),
  requireWakePwdAC_ (x.requireWakePwdAC_, f, this),
  requireWakePwdDC_ (x.requireWakePwdDC_, f, this),
  turnOffHDAC_ (x.turnOffHDAC_, f, this),
  turnOffHDDC_ (x.turnOffHDDC_, f, this),
  sleepAfterAC_ (x.sleepAfterAC_, f, this),
  sleepAfterDC_ (x.sleepAfterDC_, f, this),
  allowHybridSleepAC_ (x.allowHybridSleepAC_, f, this),
  allowHybridSleepDC_ (x.allowHybridSleepDC_, f, this),
  hibernateAC_ (x.hibernateAC_, f, this),
  hibernateDC_ (x.hibernateDC_, f, this),
  lidCloseAC_ (x.lidCloseAC_, f, this),
  lidCloseDC_ (x.lidCloseDC_, f, this),
  pbActionAC_ (x.pbActionAC_, f, this),
  pbActionDC_ (x.pbActionDC_, f, this),
  strtMenuActionAC_ (x.strtMenuActionAC_, f, this),
  strtMenuActionDC_ (x.strtMenuActionDC_, f, this),
  linkPwrMgmtAC_ (x.linkPwrMgmtAC_, f, this),
  linkPwrMgmtDC_ (x.linkPwrMgmtDC_, f, this),
  procStateMinAC_ (x.procStateMinAC_, f, this),
  procStateMinDC_ (x.procStateMinDC_, f, this),
  procStateMaxAC_ (x.procStateMaxAC_, f, this),
  procStateMaxDC_ (x.procStateMaxDC_, f, this),
  displayOffAC_ (x.displayOffAC_, f, this),
  displayOffDC_ (x.displayOffDC_, f, this),
  adaptiveAC_ (x.adaptiveAC_, f, this),
  adaptiveDC_ (x.adaptiveDC_, f, this),
  critBatActionAC_ (x.critBatActionAC_, f, this),
  critBatActionDC_ (x.critBatActionDC_, f, this),
  lowBatteryLvlAC_ (x.lowBatteryLvlAC_, f, this),
  lowBatteryLvlDC_ (x.lowBatteryLvlDC_, f, this),
  critBatteryLvlAC_ (x.critBatteryLvlAC_, f, this),
  critBatteryLvlDC_ (x.critBatteryLvlDC_, f, this),
  lowBatteryNotAC_ (x.lowBatteryNotAC_, f, this),
  lowBatteryNotDC_ (x.lowBatteryNotDC_, f, this),
  lowBatteryActionAC_ (x.lowBatteryActionAC_, f, this),
  lowBatteryActionDC_ (x.lowBatteryActionDC_, f, this)
{
}

GlobalPowerOptionsV2Properties_t::
GlobalPowerOptionsV2Properties_t (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f,
                                  ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  nameGuid_ (this),
  default__ (this),
  requireWakePwdAC_ (this),
  requireWakePwdDC_ (this),
  turnOffHDAC_ (this),
  turnOffHDDC_ (this),
  sleepAfterAC_ (this),
  sleepAfterDC_ (this),
  allowHybridSleepAC_ (this),
  allowHybridSleepDC_ (this),
  hibernateAC_ (this),
  hibernateDC_ (this),
  lidCloseAC_ (this),
  lidCloseDC_ (this),
  pbActionAC_ (this),
  pbActionDC_ (this),
  strtMenuActionAC_ (this),
  strtMenuActionDC_ (this),
  linkPwrMgmtAC_ (this),
  linkPwrMgmtDC_ (this),
  procStateMinAC_ (this),
  procStateMinDC_ (this),
  procStateMaxAC_ (this),
  procStateMaxDC_ (this),
  displayOffAC_ (this),
  displayOffDC_ (this),
  adaptiveAC_ (this),
  adaptiveDC_ (this),
  critBatActionAC_ (this),
  critBatActionDC_ (this),
  lowBatteryLvlAC_ (this),
  lowBatteryLvlDC_ (this),
  critBatteryLvlAC_ (this),
  critBatteryLvlDC_ (this),
  lowBatteryNotAC_ (this),
  lowBatteryNotDC_ (this),
  lowBatteryActionAC_ (this),
  lowBatteryActionDC_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void GlobalPowerOptionsV2Properties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "nameGuid" && n.namespace_ ().empty ())
    {
      this->nameGuid_.set (NameGuidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "requireWakePwdAC" && n.namespace_ ().empty ())
    {
      this->requireWakePwdAC_.set (RequireWakePwdACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "requireWakePwdDC" && n.namespace_ ().empty ())
    {
      this->requireWakePwdDC_.set (RequireWakePwdDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "turnOffHDAC" && n.namespace_ ().empty ())
    {
      this->turnOffHDAC_.set (TurnOffHDACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "turnOffHDDC" && n.namespace_ ().empty ())
    {
      this->turnOffHDDC_.set (TurnOffHDDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "sleepAfterAC" && n.namespace_ ().empty ())
    {
      this->sleepAfterAC_.set (SleepAfterACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "sleepAfterDC" && n.namespace_ ().empty ())
    {
      this->sleepAfterDC_.set (SleepAfterDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "allowHybridSleepAC" && n.namespace_ ().empty ())
    {
      this->allowHybridSleepAC_.set (AllowHybridSleepACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "allowHybridSleepDC" && n.namespace_ ().empty ())
    {
      this->allowHybridSleepDC_.set (AllowHybridSleepDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hibernateAC" && n.namespace_ ().empty ())
    {
      this->hibernateAC_.set (HibernateACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hibernateDC" && n.namespace_ ().empty ())
    {
      this->hibernateDC_.set (HibernateDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lidCloseAC" && n.namespace_ ().empty ())
    {
      this->lidCloseAC_.set (LidCloseACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lidCloseDC" && n.namespace_ ().empty ())
    {
      this->lidCloseDC_.set (LidCloseDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "pbActionAC" && n.namespace_ ().empty ())
    {
      this->pbActionAC_.set (PbActionACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "pbActionDC" && n.namespace_ ().empty ())
    {
      this->pbActionDC_.set (PbActionDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "strtMenuActionAC" && n.namespace_ ().empty ())
    {
      this->strtMenuActionAC_.set (StrtMenuActionACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "strtMenuActionDC" && n.namespace_ ().empty ())
    {
      this->strtMenuActionDC_.set (StrtMenuActionDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "linkPwrMgmtAC" && n.namespace_ ().empty ())
    {
      this->linkPwrMgmtAC_.set (LinkPwrMgmtACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "linkPwrMgmtDC" && n.namespace_ ().empty ())
    {
      this->linkPwrMgmtDC_.set (LinkPwrMgmtDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "procStateMinAC" && n.namespace_ ().empty ())
    {
      this->procStateMinAC_.set (ProcStateMinACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "procStateMinDC" && n.namespace_ ().empty ())
    {
      this->procStateMinDC_.set (ProcStateMinDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "procStateMaxAC" && n.namespace_ ().empty ())
    {
      this->procStateMaxAC_.set (ProcStateMaxACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "procStateMaxDC" && n.namespace_ ().empty ())
    {
      this->procStateMaxDC_.set (ProcStateMaxDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "displayOffAC" && n.namespace_ ().empty ())
    {
      this->displayOffAC_.set (DisplayOffACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "displayOffDC" && n.namespace_ ().empty ())
    {
      this->displayOffDC_.set (DisplayOffDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "adaptiveAC" && n.namespace_ ().empty ())
    {
      this->adaptiveAC_.set (AdaptiveACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "adaptiveDC" && n.namespace_ ().empty ())
    {
      this->adaptiveDC_.set (AdaptiveDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "critBatActionAC" && n.namespace_ ().empty ())
    {
      this->critBatActionAC_.set (CritBatActionACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "critBatActionDC" && n.namespace_ ().empty ())
    {
      this->critBatActionDC_.set (CritBatActionDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lowBatteryLvlAC" && n.namespace_ ().empty ())
    {
      this->lowBatteryLvlAC_.set (LowBatteryLvlACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lowBatteryLvlDC" && n.namespace_ ().empty ())
    {
      this->lowBatteryLvlDC_.set (LowBatteryLvlDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "critBatteryLvlAC" && n.namespace_ ().empty ())
    {
      this->critBatteryLvlAC_.set (CritBatteryLvlACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "critBatteryLvlDC" && n.namespace_ ().empty ())
    {
      this->critBatteryLvlDC_.set (CritBatteryLvlDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lowBatteryNotAC" && n.namespace_ ().empty ())
    {
      this->lowBatteryNotAC_.set (LowBatteryNotACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lowBatteryNotDC" && n.namespace_ ().empty ())
    {
      this->lowBatteryNotDC_.set (LowBatteryNotDCTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lowBatteryActionAC" && n.namespace_ ().empty ())
    {
      this->lowBatteryActionAC_.set (LowBatteryActionACTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lowBatteryActionDC" && n.namespace_ ().empty ())
    {
      this->lowBatteryActionDC_.set (LowBatteryActionDCTraits::create (i, f, this));
      continue;
    }
  }
}

GlobalPowerOptionsV2Properties_t* GlobalPowerOptionsV2Properties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalPowerOptionsV2Properties_t (*this, f, c);
}

GlobalPowerOptionsV2Properties_t& GlobalPowerOptionsV2Properties_t::
operator= (const GlobalPowerOptionsV2Properties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->nameGuid_ = x.nameGuid_;
    this->default__ = x.default__;
    this->requireWakePwdAC_ = x.requireWakePwdAC_;
    this->requireWakePwdDC_ = x.requireWakePwdDC_;
    this->turnOffHDAC_ = x.turnOffHDAC_;
    this->turnOffHDDC_ = x.turnOffHDDC_;
    this->sleepAfterAC_ = x.sleepAfterAC_;
    this->sleepAfterDC_ = x.sleepAfterDC_;
    this->allowHybridSleepAC_ = x.allowHybridSleepAC_;
    this->allowHybridSleepDC_ = x.allowHybridSleepDC_;
    this->hibernateAC_ = x.hibernateAC_;
    this->hibernateDC_ = x.hibernateDC_;
    this->lidCloseAC_ = x.lidCloseAC_;
    this->lidCloseDC_ = x.lidCloseDC_;
    this->pbActionAC_ = x.pbActionAC_;
    this->pbActionDC_ = x.pbActionDC_;
    this->strtMenuActionAC_ = x.strtMenuActionAC_;
    this->strtMenuActionDC_ = x.strtMenuActionDC_;
    this->linkPwrMgmtAC_ = x.linkPwrMgmtAC_;
    this->linkPwrMgmtDC_ = x.linkPwrMgmtDC_;
    this->procStateMinAC_ = x.procStateMinAC_;
    this->procStateMinDC_ = x.procStateMinDC_;
    this->procStateMaxAC_ = x.procStateMaxAC_;
    this->procStateMaxDC_ = x.procStateMaxDC_;
    this->displayOffAC_ = x.displayOffAC_;
    this->displayOffDC_ = x.displayOffDC_;
    this->adaptiveAC_ = x.adaptiveAC_;
    this->adaptiveDC_ = x.adaptiveDC_;
    this->critBatActionAC_ = x.critBatActionAC_;
    this->critBatActionDC_ = x.critBatActionDC_;
    this->lowBatteryLvlAC_ = x.lowBatteryLvlAC_;
    this->lowBatteryLvlDC_ = x.lowBatteryLvlDC_;
    this->critBatteryLvlAC_ = x.critBatteryLvlAC_;
    this->critBatteryLvlDC_ = x.critBatteryLvlDC_;
    this->lowBatteryNotAC_ = x.lowBatteryNotAC_;
    this->lowBatteryNotDC_ = x.lowBatteryNotDC_;
    this->lowBatteryActionAC_ = x.lowBatteryActionAC_;
    this->lowBatteryActionDC_ = x.lowBatteryActionDC_;
  }

  return *this;
}

GlobalPowerOptionsV2Properties_t::
~GlobalPowerOptionsV2Properties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalPowerOptionsV2Properties_t >
_xsd_GlobalPowerOptionsV2Properties_t_type_factory_init (
  "GlobalPowerOptionsV2Properties_t",
  "");

// GlobalPowerOptionsV2_t
//

GlobalPowerOptionsV2_t::
GlobalPowerOptionsV2_t (const ClsidType& clsid,
                        const NameType& name,
                        const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

GlobalPowerOptionsV2_t::
GlobalPowerOptionsV2_t (const GlobalPowerOptionsV2_t& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

GlobalPowerOptionsV2_t::
GlobalPowerOptionsV2_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void GlobalPowerOptionsV2_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

GlobalPowerOptionsV2_t* GlobalPowerOptionsV2_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalPowerOptionsV2_t (*this, f, c);
}

GlobalPowerOptionsV2_t& GlobalPowerOptionsV2_t::
operator= (const GlobalPowerOptionsV2_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

GlobalPowerOptionsV2_t::
~GlobalPowerOptionsV2_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalPowerOptionsV2_t >
_xsd_GlobalPowerOptionsV2_t_type_factory_init (
  "GlobalPowerOptionsV2_t",
  "");

// PowerOptions
//

PowerOptions::
PowerOptions (const ClsidType& clsid)
: ::xml_schema::Type (),
  GlobalPowerOptions_ (this),
  PowerScheme_ (this),
  GlobalPowerOptionsV2_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

PowerOptions::
PowerOptions (const PowerOptions& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  GlobalPowerOptions_ (x.GlobalPowerOptions_, f, this),
  PowerScheme_ (x.PowerScheme_, f, this),
  GlobalPowerOptionsV2_ (x.GlobalPowerOptionsV2_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

PowerOptions::
PowerOptions (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  GlobalPowerOptions_ (this),
  PowerScheme_ (this),
  GlobalPowerOptionsV2_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void PowerOptions::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // GlobalPowerOptions
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GlobalPowerOptions",
          "",
          &::xsd::cxx::tree::factory_impl< GlobalPowerOptionsType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< GlobalPowerOptionsType > r (
          dynamic_cast< GlobalPowerOptionsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->GlobalPowerOptions_.push_back (::std::move (r));
        continue;
      }
    }

    // PowerScheme
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "PowerScheme",
          "",
          &::xsd::cxx::tree::factory_impl< PowerSchemeType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PowerSchemeType > r (
          dynamic_cast< PowerSchemeType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->PowerScheme_.push_back (::std::move (r));
        continue;
      }
    }

    // GlobalPowerOptionsV2
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GlobalPowerOptionsV2",
          "",
          &::xsd::cxx::tree::factory_impl< GlobalPowerOptionsV2Type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< GlobalPowerOptionsV2Type > r (
          dynamic_cast< GlobalPowerOptionsV2Type* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->GlobalPowerOptionsV2_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

PowerOptions* PowerOptions::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class PowerOptions (*this, f, c);
}

PowerOptions& PowerOptions::
operator= (const PowerOptions& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->GlobalPowerOptions_ = x.GlobalPowerOptions_;
    this->PowerScheme_ = x.PowerScheme_;
    this->GlobalPowerOptionsV2_ = x.GlobalPowerOptionsV2_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

PowerOptions::
~PowerOptions ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const PowerSchemeProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "name: " << i.name ();
  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.monitorAc ())
  {
    o << ::std::endl << "monitorAc: " << *i.monitorAc ();
  }

  if (i.monitorDc ())
  {
    o << ::std::endl << "monitorDc: " << *i.monitorDc ();
  }

  if (i.hardDiskAc ())
  {
    o << ::std::endl << "hardDiskAc: " << *i.hardDiskAc ();
  }

  if (i.hardDiskDc ())
  {
    o << ::std::endl << "hardDiskDc: " << *i.hardDiskDc ();
  }

  if (i.standbyAc ())
  {
    o << ::std::endl << "standbyAc: " << *i.standbyAc ();
  }

  if (i.standbyDc ())
  {
    o << ::std::endl << "standbyDc: " << *i.standbyDc ();
  }

  if (i.hibernateAc ())
  {
    o << ::std::endl << "hibernateAc: " << *i.hibernateAc ();
  }

  if (i.hibernateDc ())
  {
    o << ::std::endl << "hibernateDc: " << *i.hibernateDc ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PowerSchemeProperties_t >
_xsd_PowerSchemeProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const PowerScheme_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (PowerScheme_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PowerScheme_t >
_xsd_PowerScheme_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalPowerOptionsProperties_t& i)
{
  if (i.showIcon ())
  {
    o << ::std::endl << "showIcon: " << *i.showIcon ();
  }

  if (i.promptPassword ())
  {
    o << ::std::endl << "promptPassword: " << *i.promptPassword ();
  }

  if (i.enableHibernation ())
  {
    o << ::std::endl << "enableHibernation: " << *i.enableHibernation ();
  }

  if (i.closeLid ())
  {
    o << ::std::endl << "closeLid: " << *i.closeLid ();
  }

  if (i.pressPowerBtn ())
  {
    o << ::std::endl << "pressPowerBtn: " << *i.pressPowerBtn ();
  }

  if (i.pressSleepBtn ())
  {
    o << ::std::endl << "pressSleepBtn: " << *i.pressSleepBtn ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalPowerOptionsProperties_t >
_xsd_GlobalPowerOptionsProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalPowerOptions_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (GlobalPowerOptions_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalPowerOptions_t >
_xsd_GlobalPowerOptions_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalPowerOptionsV2Properties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.nameGuid ())
  {
    o << ::std::endl << "nameGuid: " << *i.nameGuid ();
  }

  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.requireWakePwdAC ())
  {
    o << ::std::endl << "requireWakePwdAC: " << *i.requireWakePwdAC ();
  }

  if (i.requireWakePwdDC ())
  {
    o << ::std::endl << "requireWakePwdDC: " << *i.requireWakePwdDC ();
  }

  if (i.turnOffHDAC ())
  {
    o << ::std::endl << "turnOffHDAC: " << *i.turnOffHDAC ();
  }

  if (i.turnOffHDDC ())
  {
    o << ::std::endl << "turnOffHDDC: " << *i.turnOffHDDC ();
  }

  if (i.sleepAfterAC ())
  {
    o << ::std::endl << "sleepAfterAC: " << *i.sleepAfterAC ();
  }

  if (i.sleepAfterDC ())
  {
    o << ::std::endl << "sleepAfterDC: " << *i.sleepAfterDC ();
  }

  if (i.allowHybridSleepAC ())
  {
    o << ::std::endl << "allowHybridSleepAC: " << *i.allowHybridSleepAC ();
  }

  if (i.allowHybridSleepDC ())
  {
    o << ::std::endl << "allowHybridSleepDC: " << *i.allowHybridSleepDC ();
  }

  if (i.hibernateAC ())
  {
    o << ::std::endl << "hibernateAC: " << *i.hibernateAC ();
  }

  if (i.hibernateDC ())
  {
    o << ::std::endl << "hibernateDC: " << *i.hibernateDC ();
  }

  if (i.lidCloseAC ())
  {
    o << ::std::endl << "lidCloseAC: " << *i.lidCloseAC ();
  }

  if (i.lidCloseDC ())
  {
    o << ::std::endl << "lidCloseDC: " << *i.lidCloseDC ();
  }

  if (i.pbActionAC ())
  {
    o << ::std::endl << "pbActionAC: " << *i.pbActionAC ();
  }

  if (i.pbActionDC ())
  {
    o << ::std::endl << "pbActionDC: " << *i.pbActionDC ();
  }

  if (i.strtMenuActionAC ())
  {
    o << ::std::endl << "strtMenuActionAC: " << *i.strtMenuActionAC ();
  }

  if (i.strtMenuActionDC ())
  {
    o << ::std::endl << "strtMenuActionDC: " << *i.strtMenuActionDC ();
  }

  if (i.linkPwrMgmtAC ())
  {
    o << ::std::endl << "linkPwrMgmtAC: " << *i.linkPwrMgmtAC ();
  }

  if (i.linkPwrMgmtDC ())
  {
    o << ::std::endl << "linkPwrMgmtDC: " << *i.linkPwrMgmtDC ();
  }

  if (i.procStateMinAC ())
  {
    o << ::std::endl << "procStateMinAC: " << *i.procStateMinAC ();
  }

  if (i.procStateMinDC ())
  {
    o << ::std::endl << "procStateMinDC: " << *i.procStateMinDC ();
  }

  if (i.procStateMaxAC ())
  {
    o << ::std::endl << "procStateMaxAC: " << *i.procStateMaxAC ();
  }

  if (i.procStateMaxDC ())
  {
    o << ::std::endl << "procStateMaxDC: " << *i.procStateMaxDC ();
  }

  if (i.displayOffAC ())
  {
    o << ::std::endl << "displayOffAC: " << *i.displayOffAC ();
  }

  if (i.displayOffDC ())
  {
    o << ::std::endl << "displayOffDC: " << *i.displayOffDC ();
  }

  if (i.adaptiveAC ())
  {
    o << ::std::endl << "adaptiveAC: " << *i.adaptiveAC ();
  }

  if (i.adaptiveDC ())
  {
    o << ::std::endl << "adaptiveDC: " << *i.adaptiveDC ();
  }

  if (i.critBatActionAC ())
  {
    o << ::std::endl << "critBatActionAC: " << *i.critBatActionAC ();
  }

  if (i.critBatActionDC ())
  {
    o << ::std::endl << "critBatActionDC: " << *i.critBatActionDC ();
  }

  if (i.lowBatteryLvlAC ())
  {
    o << ::std::endl << "lowBatteryLvlAC: " << *i.lowBatteryLvlAC ();
  }

  if (i.lowBatteryLvlDC ())
  {
    o << ::std::endl << "lowBatteryLvlDC: " << *i.lowBatteryLvlDC ();
  }

  if (i.critBatteryLvlAC ())
  {
    o << ::std::endl << "critBatteryLvlAC: " << *i.critBatteryLvlAC ();
  }

  if (i.critBatteryLvlDC ())
  {
    o << ::std::endl << "critBatteryLvlDC: " << *i.critBatteryLvlDC ();
  }

  if (i.lowBatteryNotAC ())
  {
    o << ::std::endl << "lowBatteryNotAC: " << *i.lowBatteryNotAC ();
  }

  if (i.lowBatteryNotDC ())
  {
    o << ::std::endl << "lowBatteryNotDC: " << *i.lowBatteryNotDC ();
  }

  if (i.lowBatteryActionAC ())
  {
    o << ::std::endl << "lowBatteryActionAC: " << *i.lowBatteryActionAC ();
  }

  if (i.lowBatteryActionDC ())
  {
    o << ::std::endl << "lowBatteryActionDC: " << *i.lowBatteryActionDC ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalPowerOptionsV2Properties_t >
_xsd_GlobalPowerOptionsV2Properties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalPowerOptionsV2_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (GlobalPowerOptionsV2_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalPowerOptionsV2_t >
_xsd_GlobalPowerOptionsV2_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const PowerOptions& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (PowerOptions::GlobalPowerOptionsConstIterator
         b (i.GlobalPowerOptions ().begin ()), e (i.GlobalPowerOptions ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "GlobalPowerOptions: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (PowerOptions::PowerSchemeConstIterator
         b (i.PowerScheme ().begin ()), e (i.PowerScheme ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "PowerScheme: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (PowerOptions::GlobalPowerOptionsV2ConstIterator
         b (i.GlobalPowerOptionsV2 ().begin ()), e (i.GlobalPowerOptionsV2 ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "GlobalPowerOptionsV2: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::PowerOptions > (
    ::PowerOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PowerOptions > (
    ::PowerOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PowerOptions > (
    ::PowerOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PowerOptions_ (isrc, f, p);
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PowerOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::PowerOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PowerOptions_ (isrc, f, p);
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PowerOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::PowerOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::PowerOptions > (
    ::PowerOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PowerOptions > (
    ::PowerOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::PowerOptions > (
    ::PowerOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::PowerOptions > (
      ::PowerOptions_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "PowerOptions" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::PowerOptions > r (
      ::xsd::cxx::tree::traits< ::PowerOptions, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "PowerOptions",
    "");
}

::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "PowerOptions" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::PowerOptions > r (
      ::xsd::cxx::tree::traits< ::PowerOptions, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "PowerOptions",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const PowerSchemeProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // monitorAc
  //
  if (i.monitorAc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "monitorAc",
        e));

    a << *i.monitorAc ();
  }

  // monitorDc
  //
  if (i.monitorDc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "monitorDc",
        e));

    a << *i.monitorDc ();
  }

  // hardDiskAc
  //
  if (i.hardDiskAc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hardDiskAc",
        e));

    a << *i.hardDiskAc ();
  }

  // hardDiskDc
  //
  if (i.hardDiskDc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hardDiskDc",
        e));

    a << *i.hardDiskDc ();
  }

  // standbyAc
  //
  if (i.standbyAc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "standbyAc",
        e));

    a << *i.standbyAc ();
  }

  // standbyDc
  //
  if (i.standbyDc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "standbyDc",
        e));

    a << *i.standbyDc ();
  }

  // hibernateAc
  //
  if (i.hibernateAc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hibernateAc",
        e));

    a << *i.hibernateAc ();
  }

  // hibernateDc
  //
  if (i.hibernateDc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hibernateDc",
        e));

    a << *i.hibernateDc ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PowerSchemeProperties_t >
_xsd_PowerSchemeProperties_t_type_serializer_init (
  "PowerSchemeProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const PowerScheme_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (PowerScheme_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (PowerScheme_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PowerScheme_t >
_xsd_PowerScheme_t_type_serializer_init (
  "PowerScheme_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalPowerOptionsProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // showIcon
  //
  if (i.showIcon ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showIcon",
        e));

    a << *i.showIcon ();
  }

  // promptPassword
  //
  if (i.promptPassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "promptPassword",
        e));

    a << *i.promptPassword ();
  }

  // enableHibernation
  //
  if (i.enableHibernation ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "enableHibernation",
        e));

    a << *i.enableHibernation ();
  }

  // closeLid
  //
  if (i.closeLid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "closeLid",
        e));

    a << *i.closeLid ();
  }

  // pressPowerBtn
  //
  if (i.pressPowerBtn ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "pressPowerBtn",
        e));

    a << *i.pressPowerBtn ();
  }

  // pressSleepBtn
  //
  if (i.pressSleepBtn ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "pressSleepBtn",
        e));

    a << *i.pressSleepBtn ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalPowerOptionsProperties_t >
_xsd_GlobalPowerOptionsProperties_t_type_serializer_init (
  "GlobalPowerOptionsProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalPowerOptions_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (GlobalPowerOptions_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (GlobalPowerOptions_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalPowerOptions_t >
_xsd_GlobalPowerOptions_t_type_serializer_init (
  "GlobalPowerOptions_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalPowerOptionsV2Properties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // nameGuid
  //
  if (i.nameGuid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "nameGuid",
        e));

    a << *i.nameGuid ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // requireWakePwdAC
  //
  if (i.requireWakePwdAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "requireWakePwdAC",
        e));

    a << *i.requireWakePwdAC ();
  }

  // requireWakePwdDC
  //
  if (i.requireWakePwdDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "requireWakePwdDC",
        e));

    a << *i.requireWakePwdDC ();
  }

  // turnOffHDAC
  //
  if (i.turnOffHDAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "turnOffHDAC",
        e));

    a << *i.turnOffHDAC ();
  }

  // turnOffHDDC
  //
  if (i.turnOffHDDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "turnOffHDDC",
        e));

    a << *i.turnOffHDDC ();
  }

  // sleepAfterAC
  //
  if (i.sleepAfterAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sleepAfterAC",
        e));

    a << *i.sleepAfterAC ();
  }

  // sleepAfterDC
  //
  if (i.sleepAfterDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sleepAfterDC",
        e));

    a << *i.sleepAfterDC ();
  }

  // allowHybridSleepAC
  //
  if (i.allowHybridSleepAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "allowHybridSleepAC",
        e));

    a << *i.allowHybridSleepAC ();
  }

  // allowHybridSleepDC
  //
  if (i.allowHybridSleepDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "allowHybridSleepDC",
        e));

    a << *i.allowHybridSleepDC ();
  }

  // hibernateAC
  //
  if (i.hibernateAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hibernateAC",
        e));

    a << *i.hibernateAC ();
  }

  // hibernateDC
  //
  if (i.hibernateDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hibernateDC",
        e));

    a << *i.hibernateDC ();
  }

  // lidCloseAC
  //
  if (i.lidCloseAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lidCloseAC",
        e));

    a << *i.lidCloseAC ();
  }

  // lidCloseDC
  //
  if (i.lidCloseDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lidCloseDC",
        e));

    a << *i.lidCloseDC ();
  }

  // pbActionAC
  //
  if (i.pbActionAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "pbActionAC",
        e));

    a << *i.pbActionAC ();
  }

  // pbActionDC
  //
  if (i.pbActionDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "pbActionDC",
        e));

    a << *i.pbActionDC ();
  }

  // strtMenuActionAC
  //
  if (i.strtMenuActionAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "strtMenuActionAC",
        e));

    a << *i.strtMenuActionAC ();
  }

  // strtMenuActionDC
  //
  if (i.strtMenuActionDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "strtMenuActionDC",
        e));

    a << *i.strtMenuActionDC ();
  }

  // linkPwrMgmtAC
  //
  if (i.linkPwrMgmtAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "linkPwrMgmtAC",
        e));

    a << *i.linkPwrMgmtAC ();
  }

  // linkPwrMgmtDC
  //
  if (i.linkPwrMgmtDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "linkPwrMgmtDC",
        e));

    a << *i.linkPwrMgmtDC ();
  }

  // procStateMinAC
  //
  if (i.procStateMinAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "procStateMinAC",
        e));

    a << *i.procStateMinAC ();
  }

  // procStateMinDC
  //
  if (i.procStateMinDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "procStateMinDC",
        e));

    a << *i.procStateMinDC ();
  }

  // procStateMaxAC
  //
  if (i.procStateMaxAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "procStateMaxAC",
        e));

    a << *i.procStateMaxAC ();
  }

  // procStateMaxDC
  //
  if (i.procStateMaxDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "procStateMaxDC",
        e));

    a << *i.procStateMaxDC ();
  }

  // displayOffAC
  //
  if (i.displayOffAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "displayOffAC",
        e));

    a << *i.displayOffAC ();
  }

  // displayOffDC
  //
  if (i.displayOffDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "displayOffDC",
        e));

    a << *i.displayOffDC ();
  }

  // adaptiveAC
  //
  if (i.adaptiveAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "adaptiveAC",
        e));

    a << *i.adaptiveAC ();
  }

  // adaptiveDC
  //
  if (i.adaptiveDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "adaptiveDC",
        e));

    a << *i.adaptiveDC ();
  }

  // critBatActionAC
  //
  if (i.critBatActionAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "critBatActionAC",
        e));

    a << *i.critBatActionAC ();
  }

  // critBatActionDC
  //
  if (i.critBatActionDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "critBatActionDC",
        e));

    a << *i.critBatActionDC ();
  }

  // lowBatteryLvlAC
  //
  if (i.lowBatteryLvlAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lowBatteryLvlAC",
        e));

    a << *i.lowBatteryLvlAC ();
  }

  // lowBatteryLvlDC
  //
  if (i.lowBatteryLvlDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lowBatteryLvlDC",
        e));

    a << *i.lowBatteryLvlDC ();
  }

  // critBatteryLvlAC
  //
  if (i.critBatteryLvlAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "critBatteryLvlAC",
        e));

    a << *i.critBatteryLvlAC ();
  }

  // critBatteryLvlDC
  //
  if (i.critBatteryLvlDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "critBatteryLvlDC",
        e));

    a << *i.critBatteryLvlDC ();
  }

  // lowBatteryNotAC
  //
  if (i.lowBatteryNotAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lowBatteryNotAC",
        e));

    a << *i.lowBatteryNotAC ();
  }

  // lowBatteryNotDC
  //
  if (i.lowBatteryNotDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lowBatteryNotDC",
        e));

    a << *i.lowBatteryNotDC ();
  }

  // lowBatteryActionAC
  //
  if (i.lowBatteryActionAC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lowBatteryActionAC",
        e));

    a << *i.lowBatteryActionAC ();
  }

  // lowBatteryActionDC
  //
  if (i.lowBatteryActionDC ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lowBatteryActionDC",
        e));

    a << *i.lowBatteryActionDC ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalPowerOptionsV2Properties_t >
_xsd_GlobalPowerOptionsV2Properties_t_type_serializer_init (
  "GlobalPowerOptionsV2Properties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalPowerOptionsV2_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (GlobalPowerOptionsV2_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (GlobalPowerOptionsV2_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalPowerOptionsV2_t >
_xsd_GlobalPowerOptionsV2_t_type_serializer_init (
  "GlobalPowerOptionsV2_t",
  "");


void
PowerOptions_ (::std::ostream& o,
               const ::PowerOptions& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::PowerOptions_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
PowerOptions_ (::std::ostream& o,
               const ::PowerOptions& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::PowerOptions_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PowerOptions_ (::std::ostream& o,
               const ::PowerOptions& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::PowerOptions_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PowerOptions_ (::xercesc::XMLFormatTarget& t,
               const ::PowerOptions& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::PowerOptions_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
PowerOptions_ (::xercesc::XMLFormatTarget& t,
               const ::PowerOptions& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::PowerOptions_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PowerOptions_ (::xercesc::XMLFormatTarget& t,
               const ::PowerOptions& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::PowerOptions_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
PowerOptions_ (::xercesc::DOMDocument& d,
               const ::PowerOptions& s,
               ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "PowerOptions" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PowerOptions",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
PowerOptions_ (const ::PowerOptions& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "PowerOptions",
      "",
      m, f));

  ::PowerOptions_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const PowerOptions& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // GlobalPowerOptions
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (PowerOptions::GlobalPowerOptionsConstIterator
         b (i.GlobalPowerOptions ().begin ()), n (i.GlobalPowerOptions ().end ());
         b != n; ++b)
    {
      if (typeid (PowerOptions::GlobalPowerOptionsType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "GlobalPowerOptions",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "GlobalPowerOptions",
          "",
          false, true, e, *b);
    }
  }

  // PowerScheme
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (PowerOptions::PowerSchemeConstIterator
         b (i.PowerScheme ().begin ()), n (i.PowerScheme ().end ());
         b != n; ++b)
    {
      if (typeid (PowerOptions::PowerSchemeType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PowerScheme",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "PowerScheme",
          "",
          false, true, e, *b);
    }
  }

  // GlobalPowerOptionsV2
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (PowerOptions::GlobalPowerOptionsV2ConstIterator
         b (i.GlobalPowerOptionsV2 ().begin ()), n (i.GlobalPowerOptionsV2 ().end ());
         b != n; ++b)
    {
      if (typeid (PowerOptions::GlobalPowerOptionsV2Type) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "GlobalPowerOptionsV2",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "GlobalPowerOptionsV2",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


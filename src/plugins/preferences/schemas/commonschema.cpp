// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "commonschema.h"

// Properties_t
// 

const Properties_t::ActionOptional& Properties_t::
action () const
{
  return this->action_;
}

Properties_t::ActionOptional& Properties_t::
action ()
{
  return this->action_;
}

void Properties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void Properties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void Properties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const Properties_t::ThisDriveOptional& Properties_t::
thisDrive () const
{
  return this->thisDrive_;
}

Properties_t::ThisDriveOptional& Properties_t::
thisDrive ()
{
  return this->thisDrive_;
}

void Properties_t::
thisDrive (const ThisDriveType& x)
{
  this->thisDrive_.set (x);
}

void Properties_t::
thisDrive (const ThisDriveOptional& x)
{
  this->thisDrive_ = x;
}

void Properties_t::
thisDrive (::std::unique_ptr< ThisDriveType > x)
{
  this->thisDrive_.set (std::move (x));
}

const Properties_t::AllDrivesOptional& Properties_t::
allDrives () const
{
  return this->allDrives_;
}

Properties_t::AllDrivesOptional& Properties_t::
allDrives ()
{
  return this->allDrives_;
}

void Properties_t::
allDrives (const AllDrivesType& x)
{
  this->allDrives_.set (x);
}

void Properties_t::
allDrives (const AllDrivesOptional& x)
{
  this->allDrives_ = x;
}

void Properties_t::
allDrives (::std::unique_ptr< AllDrivesType > x)
{
  this->allDrives_.set (std::move (x));
}

const Properties_t::UserNameOptional& Properties_t::
userName () const
{
  return this->userName_;
}

Properties_t::UserNameOptional& Properties_t::
userName ()
{
  return this->userName_;
}

void Properties_t::
userName (const UserNameType& x)
{
  this->userName_.set (x);
}

void Properties_t::
userName (const UserNameOptional& x)
{
  this->userName_ = x;
}

void Properties_t::
userName (::std::unique_ptr< UserNameType > x)
{
  this->userName_.set (std::move (x));
}

const Properties_t::CpasswordOptional& Properties_t::
cpassword () const
{
  return this->cpassword_;
}

Properties_t::CpasswordOptional& Properties_t::
cpassword ()
{
  return this->cpassword_;
}

void Properties_t::
cpassword (const CpasswordType& x)
{
  this->cpassword_.set (x);
}

void Properties_t::
cpassword (const CpasswordOptional& x)
{
  this->cpassword_ = x;
}

void Properties_t::
cpassword (::std::unique_ptr< CpasswordType > x)
{
  this->cpassword_.set (std::move (x));
}

const Properties_t::PathType& Properties_t::
path () const
{
  return this->path_.get ();
}

Properties_t::PathType& Properties_t::
path ()
{
  return this->path_.get ();
}

void Properties_t::
path (const PathType& x)
{
  this->path_.set (x);
}

void Properties_t::
path (::std::unique_ptr< PathType > x)
{
  this->path_.set (std::move (x));
}

const Properties_t::LabelOptional& Properties_t::
label () const
{
  return this->label_;
}

Properties_t::LabelOptional& Properties_t::
label ()
{
  return this->label_;
}

void Properties_t::
label (const LabelType& x)
{
  this->label_.set (x);
}

void Properties_t::
label (const LabelOptional& x)
{
  this->label_ = x;
}

void Properties_t::
label (::std::unique_ptr< LabelType > x)
{
  this->label_.set (std::move (x));
}

const Properties_t::PersistentType& Properties_t::
persistent () const
{
  return this->persistent_.get ();
}

Properties_t::PersistentType& Properties_t::
persistent ()
{
  return this->persistent_.get ();
}

void Properties_t::
persistent (const PersistentType& x)
{
  this->persistent_.set (x);
}

const Properties_t::UseLetterType& Properties_t::
useLetter () const
{
  return this->useLetter_.get ();
}

Properties_t::UseLetterType& Properties_t::
useLetter ()
{
  return this->useLetter_.get ();
}

void Properties_t::
useLetter (const UseLetterType& x)
{
  this->useLetter_.set (x);
}

const Properties_t::LetterType& Properties_t::
letter () const
{
  return this->letter_.get ();
}

Properties_t::LetterType& Properties_t::
letter ()
{
  return this->letter_.get ();
}

void Properties_t::
letter (const LetterType& x)
{
  this->letter_.set (x);
}

void Properties_t::
letter (::std::unique_ptr< LetterType > x)
{
  this->letter_.set (std::move (x));
}

const Properties_t::DisabledOptional& Properties_t::
disabled () const
{
  return this->disabled_;
}

Properties_t::DisabledOptional& Properties_t::
disabled ()
{
  return this->disabled_;
}

void Properties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Properties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// Properties_t
//

Properties_t::
Properties_t (const PathType& path,
              const PersistentType& persistent,
              const UseLetterType& useLetter,
              const LetterType& letter)
: ::xml_schema::Type (),
  action_ (this),
  thisDrive_ (this),
  allDrives_ (this),
  userName_ (this),
  cpassword_ (this),
  path_ (path, this),
  label_ (this),
  persistent_ (persistent, this),
  useLetter_ (useLetter, this),
  letter_ (letter, this),
  disabled_ (this)
{
}

Properties_t::
Properties_t (const Properties_t& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  thisDrive_ (x.thisDrive_, f, this),
  allDrives_ (x.allDrives_, f, this),
  userName_ (x.userName_, f, this),
  cpassword_ (x.cpassword_, f, this),
  path_ (x.path_, f, this),
  label_ (x.label_, f, this),
  persistent_ (x.persistent_, f, this),
  useLetter_ (x.useLetter_, f, this),
  letter_ (x.letter_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Properties_t::
Properties_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  thisDrive_ (this),
  allDrives_ (this),
  userName_ (this),
  cpassword_ (this),
  path_ (this),
  label_ (this),
  persistent_ (this),
  useLetter_ (this),
  letter_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Properties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "thisDrive" && n.namespace_ ().empty ())
    {
      this->thisDrive_.set (ThisDriveTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "allDrives" && n.namespace_ ().empty ())
    {
      this->allDrives_.set (AllDrivesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userName" && n.namespace_ ().empty ())
    {
      this->userName_.set (UserNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cpassword" && n.namespace_ ().empty ())
    {
      this->cpassword_.set (CpasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      this->path_.set (PathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "label" && n.namespace_ ().empty ())
    {
      this->label_.set (LabelTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "persistent" && n.namespace_ ().empty ())
    {
      this->persistent_.set (PersistentTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useLetter" && n.namespace_ ().empty ())
    {
      this->useLetter_.set (UseLetterTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "letter" && n.namespace_ ().empty ())
    {
      this->letter_.set (LetterTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!path_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "path",
      "");
  }

  if (!persistent_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "persistent",
      "");
  }

  if (!useLetter_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "useLetter",
      "");
  }

  if (!letter_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "letter",
      "");
  }
}

Properties_t* Properties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Properties_t (*this, f, c);
}

Properties_t& Properties_t::
operator= (const Properties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->thisDrive_ = x.thisDrive_;
    this->allDrives_ = x.allDrives_;
    this->userName_ = x.userName_;
    this->cpassword_ = x.cpassword_;
    this->path_ = x.path_;
    this->label_ = x.label_;
    this->persistent_ = x.persistent_;
    this->useLetter_ = x.useLetter_;
    this->letter_ = x.letter_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Properties_t::
~Properties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Properties_t >
_xsd_Properties_t_type_factory_init (
  "Properties_t",
  "");

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const Properties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.thisDrive ())
  {
    o << ::std::endl << "thisDrive: " << *i.thisDrive ();
  }

  if (i.allDrives ())
  {
    o << ::std::endl << "allDrives: " << *i.allDrives ();
  }

  if (i.userName ())
  {
    o << ::std::endl << "userName: " << *i.userName ();
  }

  if (i.cpassword ())
  {
    o << ::std::endl << "cpassword: " << *i.cpassword ();
  }

  o << ::std::endl << "path: " << i.path ();
  if (i.label ())
  {
    o << ::std::endl << "label: " << *i.label ();
  }

  o << ::std::endl << "persistent: " << i.persistent ();
  o << ::std::endl << "useLetter: " << i.useLetter ();
  o << ::std::endl << "letter: " << i.letter ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Properties_t >
_xsd_Properties_t_std_ostream_init;

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


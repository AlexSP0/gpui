// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "registryschema.h"

// SubProp_t
// 

const SubProp_t::IdType& SubProp_t::
id () const
{
  return this->id_.get ();
}

SubProp_t::IdType& SubProp_t::
id ()
{
  return this->id_.get ();
}

void SubProp_t::
id (const IdType& x)
{
  this->id_.set (x);
}

void SubProp_t::
id (::std::unique_ptr< IdType > x)
{
  this->id_.set (std::move (x));
}

const SubProp_t::ValueType& SubProp_t::
value () const
{
  return this->value_.get ();
}

SubProp_t::ValueType& SubProp_t::
value ()
{
  return this->value_.get ();
}

void SubProp_t::
value (const ValueType& x)
{
  this->value_.set (x);
}

const SubProp_t::MaskType& SubProp_t::
mask () const
{
  return this->mask_.get ();
}

SubProp_t::MaskType& SubProp_t::
mask ()
{
  return this->mask_.get ();
}

void SubProp_t::
mask (const MaskType& x)
{
  this->mask_.set (x);
}


// RegistryProperties_t
// 

const RegistryProperties_t::SubPropType& RegistryProperties_t::
SubProp () const
{
  return this->SubProp_.get ();
}

RegistryProperties_t::SubPropType& RegistryProperties_t::
SubProp ()
{
  return this->SubProp_.get ();
}

void RegistryProperties_t::
SubProp (const SubPropType& x)
{
  this->SubProp_.set (x);
}

void RegistryProperties_t::
SubProp (::std::unique_ptr< SubPropType > x)
{
  this->SubProp_.set (std::move (x));
}

const RegistryProperties_t::ActionOptional& RegistryProperties_t::
action () const
{
  return this->action_;
}

RegistryProperties_t::ActionOptional& RegistryProperties_t::
action ()
{
  return this->action_;
}

void RegistryProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void RegistryProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void RegistryProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const RegistryProperties_t::DefaultOptional& RegistryProperties_t::
default_ () const
{
  return this->default__;
}

RegistryProperties_t::DefaultOptional& RegistryProperties_t::
default_ ()
{
  return this->default__;
}

void RegistryProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void RegistryProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const RegistryProperties_t::HiveType& RegistryProperties_t::
hive () const
{
  return this->hive_.get ();
}

RegistryProperties_t::HiveType& RegistryProperties_t::
hive ()
{
  return this->hive_.get ();
}

void RegistryProperties_t::
hive (const HiveType& x)
{
  this->hive_.set (x);
}

void RegistryProperties_t::
hive (::std::unique_ptr< HiveType > x)
{
  this->hive_.set (std::move (x));
}

const RegistryProperties_t::KeyType& RegistryProperties_t::
key () const
{
  return this->key_.get ();
}

RegistryProperties_t::KeyType& RegistryProperties_t::
key ()
{
  return this->key_.get ();
}

void RegistryProperties_t::
key (const KeyType& x)
{
  this->key_.set (x);
}

void RegistryProperties_t::
key (::std::unique_ptr< KeyType > x)
{
  this->key_.set (std::move (x));
}

const RegistryProperties_t::NameOptional& RegistryProperties_t::
name () const
{
  return this->name_;
}

RegistryProperties_t::NameOptional& RegistryProperties_t::
name ()
{
  return this->name_;
}

void RegistryProperties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void RegistryProperties_t::
name (const NameOptional& x)
{
  this->name_ = x;
}

void RegistryProperties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const RegistryProperties_t::TypeOptional& RegistryProperties_t::
type () const
{
  return this->type_;
}

RegistryProperties_t::TypeOptional& RegistryProperties_t::
type ()
{
  return this->type_;
}

void RegistryProperties_t::
type (const TypeType& x)
{
  this->type_.set (x);
}

void RegistryProperties_t::
type (const TypeOptional& x)
{
  this->type_ = x;
}

void RegistryProperties_t::
type (::std::unique_ptr< TypeType > x)
{
  this->type_.set (std::move (x));
}

const RegistryProperties_t::ValueOptional& RegistryProperties_t::
value () const
{
  return this->value_;
}

RegistryProperties_t::ValueOptional& RegistryProperties_t::
value ()
{
  return this->value_;
}

void RegistryProperties_t::
value (const ValueType& x)
{
  this->value_.set (x);
}

void RegistryProperties_t::
value (const ValueOptional& x)
{
  this->value_ = x;
}

const RegistryProperties_t::DisplayDecimalOptional& RegistryProperties_t::
displayDecimal () const
{
  return this->displayDecimal_;
}

RegistryProperties_t::DisplayDecimalOptional& RegistryProperties_t::
displayDecimal ()
{
  return this->displayDecimal_;
}

void RegistryProperties_t::
displayDecimal (const DisplayDecimalType& x)
{
  this->displayDecimal_.set (x);
}

void RegistryProperties_t::
displayDecimal (const DisplayDecimalOptional& x)
{
  this->displayDecimal_ = x;
}

const RegistryProperties_t::DefaultValueOptional& RegistryProperties_t::
defaultValue () const
{
  return this->defaultValue_;
}

RegistryProperties_t::DefaultValueOptional& RegistryProperties_t::
defaultValue ()
{
  return this->defaultValue_;
}

void RegistryProperties_t::
defaultValue (const DefaultValueType& x)
{
  this->defaultValue_.set (x);
}

void RegistryProperties_t::
defaultValue (const DefaultValueOptional& x)
{
  this->defaultValue_ = x;
}

const RegistryProperties_t::BitfieldOptional& RegistryProperties_t::
bitfield () const
{
  return this->bitfield_;
}

RegistryProperties_t::BitfieldOptional& RegistryProperties_t::
bitfield ()
{
  return this->bitfield_;
}

void RegistryProperties_t::
bitfield (const BitfieldType& x)
{
  this->bitfield_.set (x);
}

void RegistryProperties_t::
bitfield (const BitfieldOptional& x)
{
  this->bitfield_ = x;
}

const RegistryProperties_t::DisabledOptional& RegistryProperties_t::
disabled () const
{
  return this->disabled_;
}

RegistryProperties_t::DisabledOptional& RegistryProperties_t::
disabled ()
{
  return this->disabled_;
}

void RegistryProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void RegistryProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Registry_t
// 

const Registry_t::PropertiesType& Registry_t::
Properties () const
{
  return this->Properties_.get ();
}

Registry_t::PropertiesType& Registry_t::
Properties ()
{
  return this->Properties_.get ();
}

void Registry_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void Registry_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const Registry_t::ClsidType& Registry_t::
clsid () const
{
  return this->clsid_.get ();
}

Registry_t::ClsidType& Registry_t::
clsid ()
{
  return this->clsid_.get ();
}

void Registry_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Registry_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Registry_t::NameType& Registry_t::
name () const
{
  return this->name_.get ();
}

Registry_t::NameType& Registry_t::
name ()
{
  return this->name_.get ();
}

void Registry_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Registry_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Registry_t::StatusOptional& Registry_t::
status () const
{
  return this->status_;
}

Registry_t::StatusOptional& Registry_t::
status ()
{
  return this->status_;
}

void Registry_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Registry_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Registry_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}

const Registry_t::ImageOptional& Registry_t::
image () const
{
  return this->image_;
}

Registry_t::ImageOptional& Registry_t::
image ()
{
  return this->image_;
}

void Registry_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Registry_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Registry_t::ChangedOptional& Registry_t::
changed () const
{
  return this->changed_;
}

Registry_t::ChangedOptional& Registry_t::
changed ()
{
  return this->changed_;
}

void Registry_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Registry_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Registry_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Registry_t::UidType& Registry_t::
uid () const
{
  return this->uid_.get ();
}

Registry_t::UidType& Registry_t::
uid ()
{
  return this->uid_.get ();
}

void Registry_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Registry_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}


// Collection2_t
// 

const Collection2_t::RegistryType& Collection2_t::
Registry () const
{
  return this->Registry_.get ();
}

Collection2_t::RegistryType& Collection2_t::
Registry ()
{
  return this->Registry_.get ();
}

void Collection2_t::
Registry (const RegistryType& x)
{
  this->Registry_.set (x);
}

void Collection2_t::
Registry (::std::unique_ptr< RegistryType > x)
{
  this->Registry_.set (std::move (x));
}

const Collection2_t::ClsidType& Collection2_t::
clsid () const
{
  return this->clsid_.get ();
}

Collection2_t::ClsidType& Collection2_t::
clsid ()
{
  return this->clsid_.get ();
}

void Collection2_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Collection2_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Collection2_t::NameType& Collection2_t::
name () const
{
  return this->name_.get ();
}

Collection2_t::NameType& Collection2_t::
name ()
{
  return this->name_.get ();
}

void Collection2_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Collection2_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Collection2_t::DisabledOptional& Collection2_t::
disabled () const
{
  return this->disabled_;
}

Collection2_t::DisabledOptional& Collection2_t::
disabled ()
{
  return this->disabled_;
}

void Collection2_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Collection2_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Collection3_t
// 

const Collection3_t::CollectionType& Collection3_t::
Collection () const
{
  return this->Collection_.get ();
}

Collection3_t::CollectionType& Collection3_t::
Collection ()
{
  return this->Collection_.get ();
}

void Collection3_t::
Collection (const CollectionType& x)
{
  this->Collection_.set (x);
}

void Collection3_t::
Collection (::std::unique_ptr< CollectionType > x)
{
  this->Collection_.set (std::move (x));
}

const Collection3_t::ClsidType& Collection3_t::
clsid () const
{
  return this->clsid_.get ();
}

Collection3_t::ClsidType& Collection3_t::
clsid ()
{
  return this->clsid_.get ();
}

void Collection3_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Collection3_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Collection3_t::NameType& Collection3_t::
name () const
{
  return this->name_.get ();
}

Collection3_t::NameType& Collection3_t::
name ()
{
  return this->name_.get ();
}

void Collection3_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Collection3_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}


// Collection4_t
// 

const Collection4_t::CollectionType& Collection4_t::
Collection () const
{
  return this->Collection_.get ();
}

Collection4_t::CollectionType& Collection4_t::
Collection ()
{
  return this->Collection_.get ();
}

void Collection4_t::
Collection (const CollectionType& x)
{
  this->Collection_.set (x);
}

void Collection4_t::
Collection (::std::unique_ptr< CollectionType > x)
{
  this->Collection_.set (std::move (x));
}

const Collection4_t::ClsidType& Collection4_t::
clsid () const
{
  return this->clsid_.get ();
}

Collection4_t::ClsidType& Collection4_t::
clsid ()
{
  return this->clsid_.get ();
}

void Collection4_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Collection4_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Collection4_t::NameType& Collection4_t::
name () const
{
  return this->name_.get ();
}

Collection4_t::NameType& Collection4_t::
name ()
{
  return this->name_.get ();
}

void Collection4_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Collection4_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}


// Collection_t
// 

const Collection_t::CollectionOptional& Collection_t::
Collection () const
{
  return this->Collection_;
}

Collection_t::CollectionOptional& Collection_t::
Collection ()
{
  return this->Collection_;
}

void Collection_t::
Collection (const CollectionType& x)
{
  this->Collection_.set (x);
}

void Collection_t::
Collection (const CollectionOptional& x)
{
  this->Collection_ = x;
}

void Collection_t::
Collection (::std::unique_ptr< CollectionType > x)
{
  this->Collection_.set (std::move (x));
}

const Collection_t::ClsidType& Collection_t::
clsid () const
{
  return this->clsid_.get ();
}

Collection_t::ClsidType& Collection_t::
clsid ()
{
  return this->clsid_.get ();
}

void Collection_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Collection_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Collection_t::NameType& Collection_t::
name () const
{
  return this->name_.get ();
}

Collection_t::NameType& Collection_t::
name ()
{
  return this->name_.get ();
}

void Collection_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Collection_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Collection_t::ImageOptional& Collection_t::
image () const
{
  return this->image_;
}

Collection_t::ImageOptional& Collection_t::
image ()
{
  return this->image_;
}

void Collection_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Collection_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Collection_t::ChangedOptional& Collection_t::
changed () const
{
  return this->changed_;
}

Collection_t::ChangedOptional& Collection_t::
changed ()
{
  return this->changed_;
}

void Collection_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Collection_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Collection_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Collection_t::UidType& Collection_t::
uid () const
{
  return this->uid_.get ();
}

Collection_t::UidType& Collection_t::
uid ()
{
  return this->uid_.get ();
}

void Collection_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Collection_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const Collection_t::DescOptional& Collection_t::
desc () const
{
  return this->desc_;
}

Collection_t::DescOptional& Collection_t::
desc ()
{
  return this->desc_;
}

void Collection_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void Collection_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void Collection_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const Collection_t::BypassErrorsOptional& Collection_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

Collection_t::BypassErrorsOptional& Collection_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void Collection_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void Collection_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const Collection_t::UserContextOptional& Collection_t::
userContext () const
{
  return this->userContext_;
}

Collection_t::UserContextOptional& Collection_t::
userContext ()
{
  return this->userContext_;
}

void Collection_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void Collection_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const Collection_t::RemovePolicyOptional& Collection_t::
removePolicy () const
{
  return this->removePolicy_;
}

Collection_t::RemovePolicyOptional& Collection_t::
removePolicy ()
{
  return this->removePolicy_;
}

void Collection_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void Collection_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const Collection_t::StatusOptional& Collection_t::
status () const
{
  return this->status_;
}

Collection_t::StatusOptional& Collection_t::
status ()
{
  return this->status_;
}

void Collection_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Collection_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Collection_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// RegistrySettings
// 

const RegistrySettings::RegistrySequence& RegistrySettings::
Registry () const
{
  return this->Registry_;
}

RegistrySettings::RegistrySequence& RegistrySettings::
Registry ()
{
  return this->Registry_;
}

void RegistrySettings::
Registry (const RegistrySequence& s)
{
  this->Registry_ = s;
}

const RegistrySettings::CollectionSequence& RegistrySettings::
Collection () const
{
  return this->Collection_;
}

RegistrySettings::CollectionSequence& RegistrySettings::
Collection ()
{
  return this->Collection_;
}

void RegistrySettings::
Collection (const CollectionSequence& s)
{
  this->Collection_ = s;
}

const RegistrySettings::ClsidType& RegistrySettings::
clsid () const
{
  return this->clsid_.get ();
}

RegistrySettings::ClsidType& RegistrySettings::
clsid ()
{
  return this->clsid_.get ();
}

void RegistrySettings::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void RegistrySettings::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const RegistrySettings::DisabledOptional& RegistrySettings::
disabled () const
{
  return this->disabled_;
}

RegistrySettings::DisabledOptional& RegistrySettings::
disabled ()
{
  return this->disabled_;
}

void RegistrySettings::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void RegistrySettings::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// SubProp_t
//

SubProp_t::
SubProp_t (const IdType& id,
           const ValueType& value,
           const MaskType& mask)
: ::xml_schema::Type (),
  id_ (id, this),
  value_ (value, this),
  mask_ (mask, this)
{
}

SubProp_t::
SubProp_t (const SubProp_t& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  id_ (x.id_, f, this),
  value_ (x.value_, f, this),
  mask_ (x.mask_, f, this)
{
}

SubProp_t::
SubProp_t (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  id_ (this),
  value_ (this),
  mask_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void SubProp_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      this->id_.set (IdTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (ValueTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "mask" && n.namespace_ ().empty ())
    {
      this->mask_.set (MaskTraits::create (i, f, this));
      continue;
    }
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "id",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "value",
      "");
  }

  if (!mask_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "mask",
      "");
  }
}

SubProp_t* SubProp_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class SubProp_t (*this, f, c);
}

SubProp_t& SubProp_t::
operator= (const SubProp_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->id_ = x.id_;
    this->value_ = x.value_;
    this->mask_ = x.mask_;
  }

  return *this;
}

SubProp_t::
~SubProp_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, SubProp_t >
_xsd_SubProp_t_type_factory_init (
  "SubProp_t",
  "");

// RegistryProperties_t
//

RegistryProperties_t::
RegistryProperties_t (const SubPropType& SubProp,
                      const HiveType& hive,
                      const KeyType& key)
: ::xml_schema::Type (),
  SubProp_ (SubProp, this),
  action_ (this),
  default__ (this),
  hive_ (hive, this),
  key_ (key, this),
  name_ (this),
  type_ (this),
  value_ (this),
  displayDecimal_ (this),
  defaultValue_ (this),
  bitfield_ (this),
  disabled_ (this)
{
}

RegistryProperties_t::
RegistryProperties_t (::std::unique_ptr< SubPropType > SubProp,
                      const HiveType& hive,
                      const KeyType& key)
: ::xml_schema::Type (),
  SubProp_ (std::move (SubProp), this),
  action_ (this),
  default__ (this),
  hive_ (hive, this),
  key_ (key, this),
  name_ (this),
  type_ (this),
  value_ (this),
  displayDecimal_ (this),
  defaultValue_ (this),
  bitfield_ (this),
  disabled_ (this)
{
}

RegistryProperties_t::
RegistryProperties_t (const RegistryProperties_t& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  SubProp_ (x.SubProp_, f, this),
  action_ (x.action_, f, this),
  default__ (x.default__, f, this),
  hive_ (x.hive_, f, this),
  key_ (x.key_, f, this),
  name_ (x.name_, f, this),
  type_ (x.type_, f, this),
  value_ (x.value_, f, this),
  displayDecimal_ (x.displayDecimal_, f, this),
  defaultValue_ (x.defaultValue_, f, this),
  bitfield_ (x.bitfield_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

RegistryProperties_t::
RegistryProperties_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  SubProp_ (this),
  action_ (this),
  default__ (this),
  hive_ (this),
  key_ (this),
  name_ (this),
  type_ (this),
  value_ (this),
  displayDecimal_ (this),
  defaultValue_ (this),
  bitfield_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RegistryProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // SubProp
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SubProp",
          "",
          &::xsd::cxx::tree::factory_impl< SubPropType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!SubProp_.present ())
        {
          ::std::unique_ptr< SubPropType > r (
            dynamic_cast< SubPropType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->SubProp_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!SubProp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SubProp",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hive" && n.namespace_ ().empty ())
    {
      this->hive_.set (HiveTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "key" && n.namespace_ ().empty ())
    {
      this->key_.set (KeyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      this->type_.set (TypeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (ValueTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "displayDecimal" && n.namespace_ ().empty ())
    {
      this->displayDecimal_.set (DisplayDecimalTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "defaultValue" && n.namespace_ ().empty ())
    {
      this->defaultValue_.set (DefaultValueTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bitfield" && n.namespace_ ().empty ())
    {
      this->bitfield_.set (BitfieldTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!hive_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hive",
      "");
  }

  if (!key_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "key",
      "");
  }
}

RegistryProperties_t* RegistryProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class RegistryProperties_t (*this, f, c);
}

RegistryProperties_t& RegistryProperties_t::
operator= (const RegistryProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->SubProp_ = x.SubProp_;
    this->action_ = x.action_;
    this->default__ = x.default__;
    this->hive_ = x.hive_;
    this->key_ = x.key_;
    this->name_ = x.name_;
    this->type_ = x.type_;
    this->value_ = x.value_;
    this->displayDecimal_ = x.displayDecimal_;
    this->defaultValue_ = x.defaultValue_;
    this->bitfield_ = x.bitfield_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

RegistryProperties_t::
~RegistryProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, RegistryProperties_t >
_xsd_RegistryProperties_t_type_factory_init (
  "RegistryProperties_t",
  "");

// Registry_t
//

Registry_t::
Registry_t (const PropertiesType& Properties,
            const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this)
{
}

Registry_t::
Registry_t (::std::unique_ptr< PropertiesType > Properties,
            const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this)
{
}

Registry_t::
Registry_t (const Registry_t& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  status_ (x.status_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this)
{
}

Registry_t::
Registry_t (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Registry_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Registry_t* Registry_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Registry_t (*this, f, c);
}

Registry_t& Registry_t::
operator= (const Registry_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->status_ = x.status_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
  }

  return *this;
}

Registry_t::
~Registry_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Registry_t >
_xsd_Registry_t_type_factory_init (
  "Registry_t",
  "");

// Collection2_t
//

Collection2_t::
Collection2_t (const RegistryType& Registry,
               const ClsidType& clsid,
               const NameType& name)
: ::xml_schema::Type (),
  Registry_ (Registry, this),
  clsid_ (clsid, this),
  name_ (name, this),
  disabled_ (this)
{
}

Collection2_t::
Collection2_t (::std::unique_ptr< RegistryType > Registry,
               const ClsidType& clsid,
               const NameType& name)
: ::xml_schema::Type (),
  Registry_ (std::move (Registry), this),
  clsid_ (clsid, this),
  name_ (name, this),
  disabled_ (this)
{
}

Collection2_t::
Collection2_t (const Collection2_t& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Registry_ (x.Registry_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Collection2_t::
Collection2_t (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Registry_ (this),
  clsid_ (this),
  name_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Collection2_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Registry
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Registry",
          "",
          &::xsd::cxx::tree::factory_impl< RegistryType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Registry_.present ())
        {
          ::std::unique_ptr< RegistryType > r (
            dynamic_cast< RegistryType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Registry_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Registry_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Registry",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

Collection2_t* Collection2_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Collection2_t (*this, f, c);
}

Collection2_t& Collection2_t::
operator= (const Collection2_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Registry_ = x.Registry_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Collection2_t::
~Collection2_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Collection2_t >
_xsd_Collection2_t_type_factory_init (
  "Collection2_t",
  "");

// Collection3_t
//

Collection3_t::
Collection3_t (const CollectionType& Collection,
               const ClsidType& clsid,
               const NameType& name)
: ::xml_schema::Type (),
  Collection_ (Collection, this),
  clsid_ (clsid, this),
  name_ (name, this)
{
}

Collection3_t::
Collection3_t (::std::unique_ptr< CollectionType > Collection,
               const ClsidType& clsid,
               const NameType& name)
: ::xml_schema::Type (),
  Collection_ (std::move (Collection), this),
  clsid_ (clsid, this),
  name_ (name, this)
{
}

Collection3_t::
Collection3_t (const Collection3_t& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Collection_ (x.Collection_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this)
{
}

Collection3_t::
Collection3_t (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Collection_ (this),
  clsid_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Collection3_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Collection
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Collection",
          "",
          &::xsd::cxx::tree::factory_impl< CollectionType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Collection_.present ())
        {
          ::std::unique_ptr< CollectionType > r (
            dynamic_cast< CollectionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Collection_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Collection_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Collection",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

Collection3_t* Collection3_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Collection3_t (*this, f, c);
}

Collection3_t& Collection3_t::
operator= (const Collection3_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Collection_ = x.Collection_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
  }

  return *this;
}

Collection3_t::
~Collection3_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Collection3_t >
_xsd_Collection3_t_type_factory_init (
  "Collection3_t",
  "");

// Collection4_t
//

Collection4_t::
Collection4_t (const CollectionType& Collection,
               const ClsidType& clsid,
               const NameType& name)
: ::xml_schema::Type (),
  Collection_ (Collection, this),
  clsid_ (clsid, this),
  name_ (name, this)
{
}

Collection4_t::
Collection4_t (::std::unique_ptr< CollectionType > Collection,
               const ClsidType& clsid,
               const NameType& name)
: ::xml_schema::Type (),
  Collection_ (std::move (Collection), this),
  clsid_ (clsid, this),
  name_ (name, this)
{
}

Collection4_t::
Collection4_t (const Collection4_t& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Collection_ (x.Collection_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this)
{
}

Collection4_t::
Collection4_t (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Collection_ (this),
  clsid_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Collection4_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Collection
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Collection",
          "",
          &::xsd::cxx::tree::factory_impl< CollectionType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Collection_.present ())
        {
          ::std::unique_ptr< CollectionType > r (
            dynamic_cast< CollectionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Collection_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Collection_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Collection",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

Collection4_t* Collection4_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Collection4_t (*this, f, c);
}

Collection4_t& Collection4_t::
operator= (const Collection4_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Collection_ = x.Collection_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
  }

  return *this;
}

Collection4_t::
~Collection4_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Collection4_t >
_xsd_Collection4_t_type_factory_init (
  "Collection4_t",
  "");

// Collection_t
//

Collection_t::
Collection_t (const ClsidType& clsid,
              const NameType& name,
              const UidType& uid)
: ::xml_schema::Type (),
  Collection_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

Collection_t::
Collection_t (const Collection_t& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Collection_ (x.Collection_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

Collection_t::
Collection_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Collection_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Collection_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Collection
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Collection",
          "",
          &::xsd::cxx::tree::factory_impl< CollectionType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!this->Collection_)
        {
          ::std::unique_ptr< CollectionType > r (
            dynamic_cast< CollectionType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Collection_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Collection_t* Collection_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Collection_t (*this, f, c);
}

Collection_t& Collection_t::
operator= (const Collection_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Collection_ = x.Collection_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

Collection_t::
~Collection_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Collection_t >
_xsd_Collection_t_type_factory_init (
  "Collection_t",
  "");

// RegistrySettings
//

RegistrySettings::
RegistrySettings (const ClsidType& clsid)
: ::xml_schema::Type (),
  Registry_ (this),
  Collection_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

RegistrySettings::
RegistrySettings (const RegistrySettings& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Registry_ (x.Registry_, f, this),
  Collection_ (x.Collection_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

RegistrySettings::
RegistrySettings (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Registry_ (this),
  Collection_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void RegistrySettings::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Registry
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Registry",
          "",
          &::xsd::cxx::tree::factory_impl< RegistryType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< RegistryType > r (
          dynamic_cast< RegistryType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Registry_.push_back (::std::move (r));
        continue;
      }
    }

    // Collection
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Collection",
          "",
          &::xsd::cxx::tree::factory_impl< CollectionType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< CollectionType > r (
          dynamic_cast< CollectionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Collection_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

RegistrySettings* RegistrySettings::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class RegistrySettings (*this, f, c);
}

RegistrySettings& RegistrySettings::
operator= (const RegistrySettings& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Registry_ = x.Registry_;
    this->Collection_ = x.Collection_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

RegistrySettings::
~RegistrySettings ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const SubProp_t& i)
{
  o << ::std::endl << "id: " << i.id ();
  o << ::std::endl << "value: " << i.value ();
  o << ::std::endl << "mask: " << i.mask ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SubProp_t >
_xsd_SubProp_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const RegistryProperties_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "SubProp: ";
    om.insert (o, i.SubProp ());
  }

  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  o << ::std::endl << "hive: " << i.hive ();
  o << ::std::endl << "key: " << i.key ();
  if (i.name ())
  {
    o << ::std::endl << "name: " << *i.name ();
  }

  if (i.type ())
  {
    o << ::std::endl << "type: " << *i.type ();
  }

  if (i.value ())
  {
    o << ::std::endl << "value: " << *i.value ();
  }

  if (i.displayDecimal ())
  {
    o << ::std::endl << "displayDecimal: " << *i.displayDecimal ();
  }

  if (i.defaultValue ())
  {
    o << ::std::endl << "defaultValue: " << *i.defaultValue ();
  }

  if (i.bitfield ())
  {
    o << ::std::endl << "bitfield: " << *i.bitfield ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, RegistryProperties_t >
_xsd_RegistryProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Registry_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Registry_t >
_xsd_Registry_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Collection2_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Registry: ";
    om.insert (o, i.Registry ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Collection2_t >
_xsd_Collection2_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Collection3_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Collection: ";
    om.insert (o, i.Collection ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Collection3_t >
_xsd_Collection3_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Collection4_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Collection: ";
    om.insert (o, i.Collection ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Collection4_t >
_xsd_Collection4_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Collection_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    if (i.Collection ())
    {
      o << ::std::endl << "Collection: ";
      om.insert (o, *i.Collection ());
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Collection_t >
_xsd_Collection_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const RegistrySettings& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (RegistrySettings::RegistryConstIterator
         b (i.Registry ().begin ()), e (i.Registry ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Registry: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (RegistrySettings::CollectionConstIterator
         b (i.Collection ().begin ()), e (i.Collection ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Collection: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::RegistrySettings > (
    ::RegistrySettings_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::RegistrySettings > (
    ::RegistrySettings_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::RegistrySettings > (
    ::RegistrySettings_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::RegistrySettings_ (isrc, f, p);
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::RegistrySettings_ (isrc, h, f, p);
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::RegistrySettings_ (isrc, h, f, p);
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::RegistrySettings_ (isrc, f, p);
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::RegistrySettings_ (isrc, h, f, p);
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::RegistrySettings_ (isrc, h, f, p);
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::RegistrySettings > (
    ::RegistrySettings_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::RegistrySettings > (
    ::RegistrySettings_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::RegistrySettings > (
    ::RegistrySettings_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::RegistrySettings > (
      ::RegistrySettings_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "RegistrySettings" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::RegistrySettings > r (
      ::xsd::cxx::tree::traits< ::RegistrySettings, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "RegistrySettings",
    "");
}

::std::unique_ptr< ::RegistrySettings >
RegistrySettings_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "RegistrySettings" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::RegistrySettings > r (
      ::xsd::cxx::tree::traits< ::RegistrySettings, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "RegistrySettings",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const SubProp_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // id
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "id",
        e));

    a << i.id ();
  }

  // value
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << i.value ();
  }

  // mask
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "mask",
        e));

    a << i.mask ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SubProp_t >
_xsd_SubProp_t_type_serializer_init (
  "SubProp_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const RegistryProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // SubProp
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const RegistryProperties_t::SubPropType& x (i.SubProp ());
    if (typeid (RegistryProperties_t::SubPropType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SubProp",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "SubProp",
        "",
        false, true, e, x);
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // hive
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hive",
        e));

    a << i.hive ();
  }

  // key
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "key",
        e));

    a << i.key ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << *i.name ();
  }

  // type
  //
  if (i.type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << *i.type ();
  }

  // value
  //
  if (i.value ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << *i.value ();
  }

  // displayDecimal
  //
  if (i.displayDecimal ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "displayDecimal",
        e));

    a << *i.displayDecimal ();
  }

  // defaultValue
  //
  if (i.defaultValue ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "defaultValue",
        e));

    a << *i.defaultValue ();
  }

  // bitfield
  //
  if (i.bitfield ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bitfield",
        e));

    a << *i.bitfield ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RegistryProperties_t >
_xsd_RegistryProperties_t_type_serializer_init (
  "RegistryProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Registry_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Registry_t::PropertiesType& x (i.Properties ());
    if (typeid (Registry_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Registry_t >
_xsd_Registry_t_type_serializer_init (
  "Registry_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Collection2_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Registry
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Collection2_t::RegistryType& x (i.Registry ());
    if (typeid (Collection2_t::RegistryType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Registry",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Registry",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Collection2_t >
_xsd_Collection2_t_type_serializer_init (
  "Collection2_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Collection3_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Collection
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Collection3_t::CollectionType& x (i.Collection ());
    if (typeid (Collection3_t::CollectionType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Collection",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Collection",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Collection3_t >
_xsd_Collection3_t_type_serializer_init (
  "Collection3_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Collection4_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Collection
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const Collection4_t::CollectionType& x (i.Collection ());
    if (typeid (Collection4_t::CollectionType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Collection",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Collection",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Collection4_t >
_xsd_Collection4_t_type_serializer_init (
  "Collection4_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Collection_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Collection
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    if (i.Collection ())
    {
      const Collection_t::CollectionType& x (*i.Collection ());
      if (typeid (Collection_t::CollectionType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Collection",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "Collection",
          "",
          false, true, e, x);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Collection_t >
_xsd_Collection_t_type_serializer_init (
  "Collection_t",
  "");


void
RegistrySettings_ (::std::ostream& o,
                   const ::RegistrySettings& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::RegistrySettings_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
RegistrySettings_ (::std::ostream& o,
                   const ::RegistrySettings& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::RegistrySettings_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
RegistrySettings_ (::std::ostream& o,
                   const ::RegistrySettings& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::RegistrySettings_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
RegistrySettings_ (::xercesc::XMLFormatTarget& t,
                   const ::RegistrySettings& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::RegistrySettings_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
RegistrySettings_ (::xercesc::XMLFormatTarget& t,
                   const ::RegistrySettings& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::RegistrySettings_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
RegistrySettings_ (::xercesc::XMLFormatTarget& t,
                   const ::RegistrySettings& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::RegistrySettings_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
RegistrySettings_ (::xercesc::DOMDocument& d,
                   const ::RegistrySettings& s,
                   ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "RegistrySettings" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "RegistrySettings",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
RegistrySettings_ (const ::RegistrySettings& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "RegistrySettings",
      "",
      m, f));

  ::RegistrySettings_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const RegistrySettings& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Registry
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (RegistrySettings::RegistryConstIterator
         b (i.Registry ().begin ()), n (i.Registry ().end ());
         b != n; ++b)
    {
      if (typeid (RegistrySettings::RegistryType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Registry",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Registry",
          "",
          false, true, e, *b);
    }
  }

  // Collection
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (RegistrySettings::CollectionConstIterator
         b (i.Collection ().begin ()), n (i.Collection ().end ());
         b != n; ++b)
    {
      if (typeid (RegistrySettings::CollectionType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Collection",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Collection",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


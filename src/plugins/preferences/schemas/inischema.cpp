// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "inischema.h"

// IniProperties_t
// 

const IniProperties_t::PathType& IniProperties_t::
path () const
{
  return this->path_.get ();
}

IniProperties_t::PathType& IniProperties_t::
path ()
{
  return this->path_.get ();
}

void IniProperties_t::
path (const PathType& x)
{
  this->path_.set (x);
}

void IniProperties_t::
path (::std::unique_ptr< PathType > x)
{
  this->path_.set (std::move (x));
}

const IniProperties_t::SectionOptional& IniProperties_t::
section () const
{
  return this->section_;
}

IniProperties_t::SectionOptional& IniProperties_t::
section ()
{
  return this->section_;
}

void IniProperties_t::
section (const SectionType& x)
{
  this->section_.set (x);
}

void IniProperties_t::
section (const SectionOptional& x)
{
  this->section_ = x;
}

void IniProperties_t::
section (::std::unique_ptr< SectionType > x)
{
  this->section_.set (std::move (x));
}

const IniProperties_t::ValueOptional& IniProperties_t::
value () const
{
  return this->value_;
}

IniProperties_t::ValueOptional& IniProperties_t::
value ()
{
  return this->value_;
}

void IniProperties_t::
value (const ValueType& x)
{
  this->value_.set (x);
}

void IniProperties_t::
value (const ValueOptional& x)
{
  this->value_ = x;
}

void IniProperties_t::
value (::std::unique_ptr< ValueType > x)
{
  this->value_.set (std::move (x));
}

const IniProperties_t::PropertyOptional& IniProperties_t::
property () const
{
  return this->property_;
}

IniProperties_t::PropertyOptional& IniProperties_t::
property ()
{
  return this->property_;
}

void IniProperties_t::
property (const PropertyType& x)
{
  this->property_.set (x);
}

void IniProperties_t::
property (const PropertyOptional& x)
{
  this->property_ = x;
}

void IniProperties_t::
property (::std::unique_ptr< PropertyType > x)
{
  this->property_.set (std::move (x));
}

const IniProperties_t::ActionOptional& IniProperties_t::
action () const
{
  return this->action_;
}

IniProperties_t::ActionOptional& IniProperties_t::
action ()
{
  return this->action_;
}

void IniProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void IniProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void IniProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const IniProperties_t::DisabledOptional& IniProperties_t::
disabled () const
{
  return this->disabled_;
}

IniProperties_t::DisabledOptional& IniProperties_t::
disabled ()
{
  return this->disabled_;
}

void IniProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void IniProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Ini_t
// 

const Ini_t::PropertiesSequence& Ini_t::
Properties () const
{
  return this->Properties_;
}

Ini_t::PropertiesSequence& Ini_t::
Properties ()
{
  return this->Properties_;
}

void Ini_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const Ini_t::ClsidType& Ini_t::
clsid () const
{
  return this->clsid_.get ();
}

Ini_t::ClsidType& Ini_t::
clsid ()
{
  return this->clsid_.get ();
}

void Ini_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Ini_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Ini_t::NameType& Ini_t::
name () const
{
  return this->name_.get ();
}

Ini_t::NameType& Ini_t::
name ()
{
  return this->name_.get ();
}

void Ini_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Ini_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Ini_t::StatusOptional& Ini_t::
status () const
{
  return this->status_;
}

Ini_t::StatusOptional& Ini_t::
status ()
{
  return this->status_;
}

void Ini_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Ini_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Ini_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}

const Ini_t::ImageOptional& Ini_t::
image () const
{
  return this->image_;
}

Ini_t::ImageOptional& Ini_t::
image ()
{
  return this->image_;
}

void Ini_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Ini_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Ini_t::ChangedOptional& Ini_t::
changed () const
{
  return this->changed_;
}

Ini_t::ChangedOptional& Ini_t::
changed ()
{
  return this->changed_;
}

void Ini_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Ini_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Ini_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Ini_t::UidType& Ini_t::
uid () const
{
  return this->uid_.get ();
}

Ini_t::UidType& Ini_t::
uid ()
{
  return this->uid_.get ();
}

void Ini_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Ini_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const Ini_t::DescOptional& Ini_t::
desc () const
{
  return this->desc_;
}

Ini_t::DescOptional& Ini_t::
desc ()
{
  return this->desc_;
}

void Ini_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void Ini_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void Ini_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const Ini_t::BypassErrorsOptional& Ini_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

Ini_t::BypassErrorsOptional& Ini_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void Ini_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void Ini_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const Ini_t::UserContextOptional& Ini_t::
userContext () const
{
  return this->userContext_;
}

Ini_t::UserContextOptional& Ini_t::
userContext ()
{
  return this->userContext_;
}

void Ini_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void Ini_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const Ini_t::RemovePolicyOptional& Ini_t::
removePolicy () const
{
  return this->removePolicy_;
}

Ini_t::RemovePolicyOptional& Ini_t::
removePolicy ()
{
  return this->removePolicy_;
}

void Ini_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void Ini_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// IniFiles
// 

const IniFiles::IniSequence& IniFiles::
Ini () const
{
  return this->Ini_;
}

IniFiles::IniSequence& IniFiles::
Ini ()
{
  return this->Ini_;
}

void IniFiles::
Ini (const IniSequence& s)
{
  this->Ini_ = s;
}

const IniFiles::ClsidType& IniFiles::
clsid () const
{
  return this->clsid_.get ();
}

IniFiles::ClsidType& IniFiles::
clsid ()
{
  return this->clsid_.get ();
}

void IniFiles::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void IniFiles::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const IniFiles::DisabledOptional& IniFiles::
disabled () const
{
  return this->disabled_;
}

IniFiles::DisabledOptional& IniFiles::
disabled ()
{
  return this->disabled_;
}

void IniFiles::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void IniFiles::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// IniProperties_t
//

IniProperties_t::
IniProperties_t (const PathType& path)
: ::xml_schema::Type (),
  path_ (path, this),
  section_ (this),
  value_ (this),
  property_ (this),
  action_ (this),
  disabled_ (this)
{
}

IniProperties_t::
IniProperties_t (const IniProperties_t& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  path_ (x.path_, f, this),
  section_ (x.section_, f, this),
  value_ (x.value_, f, this),
  property_ (x.property_, f, this),
  action_ (x.action_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

IniProperties_t::
IniProperties_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  path_ (this),
  section_ (this),
  value_ (this),
  property_ (this),
  action_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void IniProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      this->path_.set (PathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "section" && n.namespace_ ().empty ())
    {
      this->section_.set (SectionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (ValueTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "property" && n.namespace_ ().empty ())
    {
      this->property_.set (PropertyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!path_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "path",
      "");
  }
}

IniProperties_t* IniProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class IniProperties_t (*this, f, c);
}

IniProperties_t& IniProperties_t::
operator= (const IniProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->path_ = x.path_;
    this->section_ = x.section_;
    this->value_ = x.value_;
    this->property_ = x.property_;
    this->action_ = x.action_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

IniProperties_t::
~IniProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, IniProperties_t >
_xsd_IniProperties_t_type_factory_init (
  "IniProperties_t",
  "");

// Ini_t
//

Ini_t::
Ini_t (const ClsidType& clsid,
       const NameType& name,
       const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

Ini_t::
Ini_t (const Ini_t& x,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  status_ (x.status_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

Ini_t::
Ini_t (const ::xercesc::DOMElement& e,
       ::xml_schema::Flags f,
       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  status_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Ini_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Ini_t* Ini_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Ini_t (*this, f, c);
}

Ini_t& Ini_t::
operator= (const Ini_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->status_ = x.status_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

Ini_t::
~Ini_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Ini_t >
_xsd_Ini_t_type_factory_init (
  "Ini_t",
  "");

// IniFiles
//

IniFiles::
IniFiles (const ClsidType& clsid)
: ::xml_schema::Type (),
  Ini_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

IniFiles::
IniFiles (const IniFiles& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Ini_ (x.Ini_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

IniFiles::
IniFiles (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Ini_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void IniFiles::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Ini
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Ini",
          "",
          &::xsd::cxx::tree::factory_impl< IniType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< IniType > r (
          dynamic_cast< IniType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Ini_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

IniFiles* IniFiles::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class IniFiles (*this, f, c);
}

IniFiles& IniFiles::
operator= (const IniFiles& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Ini_ = x.Ini_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

IniFiles::
~IniFiles ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const IniProperties_t& i)
{
  o << ::std::endl << "path: " << i.path ();
  if (i.section ())
  {
    o << ::std::endl << "section: " << *i.section ();
  }

  if (i.value ())
  {
    o << ::std::endl << "value: " << *i.value ();
  }

  if (i.property ())
  {
    o << ::std::endl << "property: " << *i.property ();
  }

  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, IniProperties_t >
_xsd_IniProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Ini_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Ini_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Ini_t >
_xsd_Ini_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const IniFiles& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (IniFiles::IniConstIterator
         b (i.Ini ().begin ()), e (i.Ini ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Ini: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::IniFiles >
IniFiles_ (const ::std::string& u,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::IniFiles > (
    ::IniFiles_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (const ::std::string& u,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::IniFiles > (
    ::IniFiles_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::IniFiles > (
    ::IniFiles_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::std::istream& is,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::IniFiles_ (isrc, f, p);
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::std::istream& is,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::IniFiles_ (isrc, h, f, p);
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::IniFiles_ (isrc, h, f, p);
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::IniFiles_ (isrc, f, p);
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::IniFiles_ (isrc, h, f, p);
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::IniFiles_ (isrc, h, f, p);
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::xercesc::InputSource& i,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::IniFiles > (
    ::IniFiles_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::xercesc::InputSource& i,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::IniFiles > (
    ::IniFiles_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::IniFiles > (
    ::IniFiles_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (const ::xercesc::DOMDocument& doc,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::IniFiles > (
      ::IniFiles_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "IniFiles" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::IniFiles > r (
      ::xsd::cxx::tree::traits< ::IniFiles, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "IniFiles",
    "");
}

::std::unique_ptr< ::IniFiles >
IniFiles_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "IniFiles" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::IniFiles > r (
      ::xsd::cxx::tree::traits< ::IniFiles, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "IniFiles",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const IniProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // path
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "path",
        e));

    a << i.path ();
  }

  // section
  //
  if (i.section ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "section",
        e));

    a << *i.section ();
  }

  // value
  //
  if (i.value ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << *i.value ();
  }

  // property
  //
  if (i.property ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "property",
        e));

    a << *i.property ();
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, IniProperties_t >
_xsd_IniProperties_t_type_serializer_init (
  "IniProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Ini_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Ini_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (Ini_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Ini_t >
_xsd_Ini_t_type_serializer_init (
  "Ini_t",
  "");


void
IniFiles_ (::std::ostream& o,
           const ::IniFiles& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::IniFiles_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
IniFiles_ (::std::ostream& o,
           const ::IniFiles& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::IniFiles_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
IniFiles_ (::std::ostream& o,
           const ::IniFiles& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::IniFiles_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
IniFiles_ (::xercesc::XMLFormatTarget& t,
           const ::IniFiles& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::IniFiles_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
IniFiles_ (::xercesc::XMLFormatTarget& t,
           const ::IniFiles& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::IniFiles_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
IniFiles_ (::xercesc::XMLFormatTarget& t,
           const ::IniFiles& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::IniFiles_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
IniFiles_ (::xercesc::DOMDocument& d,
           const ::IniFiles& s,
           ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "IniFiles" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IniFiles",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
IniFiles_ (const ::IniFiles& s,
           const ::xml_schema::NamespaceInfomap& m,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "IniFiles",
      "",
      m, f));

  ::IniFiles_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const IniFiles& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Ini
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (IniFiles::IniConstIterator
         b (i.Ini ().begin ()), n (i.Ini ().end ());
         b != n; ++b)
    {
      if (typeid (IniFiles::IniType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Ini",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Ini",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "printersschema.h"

// SharedPrinterProperties_t
// 

const SharedPrinterProperties_t::ActionOptional& SharedPrinterProperties_t::
action () const
{
  return this->action_;
}

SharedPrinterProperties_t::ActionOptional& SharedPrinterProperties_t::
action ()
{
  return this->action_;
}

void SharedPrinterProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void SharedPrinterProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void SharedPrinterProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const SharedPrinterProperties_t::CommentOptional& SharedPrinterProperties_t::
comment () const
{
  return this->comment_;
}

SharedPrinterProperties_t::CommentOptional& SharedPrinterProperties_t::
comment ()
{
  return this->comment_;
}

void SharedPrinterProperties_t::
comment (const CommentType& x)
{
  this->comment_.set (x);
}

void SharedPrinterProperties_t::
comment (const CommentOptional& x)
{
  this->comment_ = x;
}

void SharedPrinterProperties_t::
comment (::std::unique_ptr< CommentType > x)
{
  this->comment_.set (std::move (x));
}

const SharedPrinterProperties_t::PathType& SharedPrinterProperties_t::
path () const
{
  return this->path_.get ();
}

SharedPrinterProperties_t::PathType& SharedPrinterProperties_t::
path ()
{
  return this->path_.get ();
}

void SharedPrinterProperties_t::
path (const PathType& x)
{
  this->path_.set (x);
}

void SharedPrinterProperties_t::
path (::std::unique_ptr< PathType > x)
{
  this->path_.set (std::move (x));
}

const SharedPrinterProperties_t::LocationOptional& SharedPrinterProperties_t::
location () const
{
  return this->location_;
}

SharedPrinterProperties_t::LocationOptional& SharedPrinterProperties_t::
location ()
{
  return this->location_;
}

void SharedPrinterProperties_t::
location (const LocationType& x)
{
  this->location_.set (x);
}

void SharedPrinterProperties_t::
location (const LocationOptional& x)
{
  this->location_ = x;
}

void SharedPrinterProperties_t::
location (::std::unique_ptr< LocationType > x)
{
  this->location_.set (std::move (x));
}

const SharedPrinterProperties_t::DefaultOptional& SharedPrinterProperties_t::
default_ () const
{
  return this->default__;
}

SharedPrinterProperties_t::DefaultOptional& SharedPrinterProperties_t::
default_ ()
{
  return this->default__;
}

void SharedPrinterProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void SharedPrinterProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const SharedPrinterProperties_t::SkipLocalOptional& SharedPrinterProperties_t::
skipLocal () const
{
  return this->skipLocal_;
}

SharedPrinterProperties_t::SkipLocalOptional& SharedPrinterProperties_t::
skipLocal ()
{
  return this->skipLocal_;
}

void SharedPrinterProperties_t::
skipLocal (const SkipLocalType& x)
{
  this->skipLocal_.set (x);
}

void SharedPrinterProperties_t::
skipLocal (const SkipLocalOptional& x)
{
  this->skipLocal_ = x;
}

const SharedPrinterProperties_t::DeleteAllOptional& SharedPrinterProperties_t::
deleteAll () const
{
  return this->deleteAll_;
}

SharedPrinterProperties_t::DeleteAllOptional& SharedPrinterProperties_t::
deleteAll ()
{
  return this->deleteAll_;
}

void SharedPrinterProperties_t::
deleteAll (const DeleteAllType& x)
{
  this->deleteAll_.set (x);
}

void SharedPrinterProperties_t::
deleteAll (const DeleteAllOptional& x)
{
  this->deleteAll_ = x;
}

const SharedPrinterProperties_t::PersistentOptional& SharedPrinterProperties_t::
persistent () const
{
  return this->persistent_;
}

SharedPrinterProperties_t::PersistentOptional& SharedPrinterProperties_t::
persistent ()
{
  return this->persistent_;
}

void SharedPrinterProperties_t::
persistent (const PersistentType& x)
{
  this->persistent_.set (x);
}

void SharedPrinterProperties_t::
persistent (const PersistentOptional& x)
{
  this->persistent_ = x;
}

const SharedPrinterProperties_t::DeleteMapsOptional& SharedPrinterProperties_t::
deleteMaps () const
{
  return this->deleteMaps_;
}

SharedPrinterProperties_t::DeleteMapsOptional& SharedPrinterProperties_t::
deleteMaps ()
{
  return this->deleteMaps_;
}

void SharedPrinterProperties_t::
deleteMaps (const DeleteMapsType& x)
{
  this->deleteMaps_.set (x);
}

void SharedPrinterProperties_t::
deleteMaps (const DeleteMapsOptional& x)
{
  this->deleteMaps_ = x;
}

const SharedPrinterProperties_t::PortType& SharedPrinterProperties_t::
port () const
{
  return this->port_.get ();
}

SharedPrinterProperties_t::PortType& SharedPrinterProperties_t::
port ()
{
  return this->port_.get ();
}

void SharedPrinterProperties_t::
port (const PortType& x)
{
  this->port_.set (x);
}

void SharedPrinterProperties_t::
port (::std::unique_ptr< PortType > x)
{
  this->port_.set (std::move (x));
}

const SharedPrinterProperties_t::UsernameOptional& SharedPrinterProperties_t::
username () const
{
  return this->username_;
}

SharedPrinterProperties_t::UsernameOptional& SharedPrinterProperties_t::
username ()
{
  return this->username_;
}

void SharedPrinterProperties_t::
username (const UsernameType& x)
{
  this->username_.set (x);
}

void SharedPrinterProperties_t::
username (const UsernameOptional& x)
{
  this->username_ = x;
}

void SharedPrinterProperties_t::
username (::std::unique_ptr< UsernameType > x)
{
  this->username_.set (std::move (x));
}

const SharedPrinterProperties_t::CpasswordOptional& SharedPrinterProperties_t::
cpassword () const
{
  return this->cpassword_;
}

SharedPrinterProperties_t::CpasswordOptional& SharedPrinterProperties_t::
cpassword ()
{
  return this->cpassword_;
}

void SharedPrinterProperties_t::
cpassword (const CpasswordType& x)
{
  this->cpassword_.set (x);
}

void SharedPrinterProperties_t::
cpassword (const CpasswordOptional& x)
{
  this->cpassword_ = x;
}

void SharedPrinterProperties_t::
cpassword (::std::unique_ptr< CpasswordType > x)
{
  this->cpassword_.set (std::move (x));
}

const SharedPrinterProperties_t::DisabledOptional& SharedPrinterProperties_t::
disabled () const
{
  return this->disabled_;
}

SharedPrinterProperties_t::DisabledOptional& SharedPrinterProperties_t::
disabled ()
{
  return this->disabled_;
}

void SharedPrinterProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void SharedPrinterProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// SharedPrinter_t
// 

const SharedPrinter_t::PropertiesSequence& SharedPrinter_t::
Properties () const
{
  return this->Properties_;
}

SharedPrinter_t::PropertiesSequence& SharedPrinter_t::
Properties ()
{
  return this->Properties_;
}

void SharedPrinter_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const SharedPrinter_t::ClsidType& SharedPrinter_t::
clsid () const
{
  return this->clsid_.get ();
}

SharedPrinter_t::ClsidType& SharedPrinter_t::
clsid ()
{
  return this->clsid_.get ();
}

void SharedPrinter_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void SharedPrinter_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const SharedPrinter_t::NameType& SharedPrinter_t::
name () const
{
  return this->name_.get ();
}

SharedPrinter_t::NameType& SharedPrinter_t::
name ()
{
  return this->name_.get ();
}

void SharedPrinter_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void SharedPrinter_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const SharedPrinter_t::ImageOptional& SharedPrinter_t::
image () const
{
  return this->image_;
}

SharedPrinter_t::ImageOptional& SharedPrinter_t::
image ()
{
  return this->image_;
}

void SharedPrinter_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void SharedPrinter_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const SharedPrinter_t::ChangedOptional& SharedPrinter_t::
changed () const
{
  return this->changed_;
}

SharedPrinter_t::ChangedOptional& SharedPrinter_t::
changed ()
{
  return this->changed_;
}

void SharedPrinter_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void SharedPrinter_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void SharedPrinter_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const SharedPrinter_t::UidType& SharedPrinter_t::
uid () const
{
  return this->uid_.get ();
}

SharedPrinter_t::UidType& SharedPrinter_t::
uid ()
{
  return this->uid_.get ();
}

void SharedPrinter_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void SharedPrinter_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const SharedPrinter_t::DescOptional& SharedPrinter_t::
desc () const
{
  return this->desc_;
}

SharedPrinter_t::DescOptional& SharedPrinter_t::
desc ()
{
  return this->desc_;
}

void SharedPrinter_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void SharedPrinter_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void SharedPrinter_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const SharedPrinter_t::BypassErrorsOptional& SharedPrinter_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

SharedPrinter_t::BypassErrorsOptional& SharedPrinter_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void SharedPrinter_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void SharedPrinter_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const SharedPrinter_t::UserContextOptional& SharedPrinter_t::
userContext () const
{
  return this->userContext_;
}

SharedPrinter_t::UserContextOptional& SharedPrinter_t::
userContext ()
{
  return this->userContext_;
}

void SharedPrinter_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void SharedPrinter_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const SharedPrinter_t::RemovePolicyOptional& SharedPrinter_t::
removePolicy () const
{
  return this->removePolicy_;
}

SharedPrinter_t::RemovePolicyOptional& SharedPrinter_t::
removePolicy ()
{
  return this->removePolicy_;
}

void SharedPrinter_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void SharedPrinter_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const SharedPrinter_t::StatusOptional& SharedPrinter_t::
status () const
{
  return this->status_;
}

SharedPrinter_t::StatusOptional& SharedPrinter_t::
status ()
{
  return this->status_;
}

void SharedPrinter_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void SharedPrinter_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void SharedPrinter_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// PortPrinterProperties_t
// 

const PortPrinterProperties_t::IpAddressType& PortPrinterProperties_t::
ipAddress () const
{
  return this->ipAddress_.get ();
}

PortPrinterProperties_t::IpAddressType& PortPrinterProperties_t::
ipAddress ()
{
  return this->ipAddress_.get ();
}

void PortPrinterProperties_t::
ipAddress (const IpAddressType& x)
{
  this->ipAddress_.set (x);
}

void PortPrinterProperties_t::
ipAddress (::std::unique_ptr< IpAddressType > x)
{
  this->ipAddress_.set (std::move (x));
}

const PortPrinterProperties_t::ActionOptional& PortPrinterProperties_t::
action () const
{
  return this->action_;
}

PortPrinterProperties_t::ActionOptional& PortPrinterProperties_t::
action ()
{
  return this->action_;
}

void PortPrinterProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void PortPrinterProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void PortPrinterProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const PortPrinterProperties_t::LocationOptional& PortPrinterProperties_t::
location () const
{
  return this->location_;
}

PortPrinterProperties_t::LocationOptional& PortPrinterProperties_t::
location ()
{
  return this->location_;
}

void PortPrinterProperties_t::
location (const LocationType& x)
{
  this->location_.set (x);
}

void PortPrinterProperties_t::
location (const LocationOptional& x)
{
  this->location_ = x;
}

void PortPrinterProperties_t::
location (::std::unique_ptr< LocationType > x)
{
  this->location_.set (std::move (x));
}

const PortPrinterProperties_t::LocalNameOptional& PortPrinterProperties_t::
localName () const
{
  return this->localName_;
}

PortPrinterProperties_t::LocalNameOptional& PortPrinterProperties_t::
localName ()
{
  return this->localName_;
}

void PortPrinterProperties_t::
localName (const LocalNameType& x)
{
  this->localName_.set (x);
}

void PortPrinterProperties_t::
localName (const LocalNameOptional& x)
{
  this->localName_ = x;
}

void PortPrinterProperties_t::
localName (::std::unique_ptr< LocalNameType > x)
{
  this->localName_.set (std::move (x));
}

const PortPrinterProperties_t::CommentOptional& PortPrinterProperties_t::
comment () const
{
  return this->comment_;
}

PortPrinterProperties_t::CommentOptional& PortPrinterProperties_t::
comment ()
{
  return this->comment_;
}

void PortPrinterProperties_t::
comment (const CommentType& x)
{
  this->comment_.set (x);
}

void PortPrinterProperties_t::
comment (const CommentOptional& x)
{
  this->comment_ = x;
}

void PortPrinterProperties_t::
comment (::std::unique_ptr< CommentType > x)
{
  this->comment_.set (std::move (x));
}

const PortPrinterProperties_t::DefaultOptional& PortPrinterProperties_t::
default_ () const
{
  return this->default__;
}

PortPrinterProperties_t::DefaultOptional& PortPrinterProperties_t::
default_ ()
{
  return this->default__;
}

void PortPrinterProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void PortPrinterProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const PortPrinterProperties_t::SkipLocalOptional& PortPrinterProperties_t::
skipLocal () const
{
  return this->skipLocal_;
}

PortPrinterProperties_t::SkipLocalOptional& PortPrinterProperties_t::
skipLocal ()
{
  return this->skipLocal_;
}

void PortPrinterProperties_t::
skipLocal (const SkipLocalType& x)
{
  this->skipLocal_.set (x);
}

void PortPrinterProperties_t::
skipLocal (const SkipLocalOptional& x)
{
  this->skipLocal_ = x;
}

const PortPrinterProperties_t::UseDNSOptional& PortPrinterProperties_t::
useDNS () const
{
  return this->useDNS_;
}

PortPrinterProperties_t::UseDNSOptional& PortPrinterProperties_t::
useDNS ()
{
  return this->useDNS_;
}

void PortPrinterProperties_t::
useDNS (const UseDNSType& x)
{
  this->useDNS_.set (x);
}

void PortPrinterProperties_t::
useDNS (const UseDNSOptional& x)
{
  this->useDNS_ = x;
}

const PortPrinterProperties_t::PathType& PortPrinterProperties_t::
path () const
{
  return this->path_.get ();
}

PortPrinterProperties_t::PathType& PortPrinterProperties_t::
path ()
{
  return this->path_.get ();
}

void PortPrinterProperties_t::
path (const PathType& x)
{
  this->path_.set (x);
}

void PortPrinterProperties_t::
path (::std::unique_ptr< PathType > x)
{
  this->path_.set (std::move (x));
}

const PortPrinterProperties_t::DeleteAllOptional& PortPrinterProperties_t::
deleteAll () const
{
  return this->deleteAll_;
}

PortPrinterProperties_t::DeleteAllOptional& PortPrinterProperties_t::
deleteAll ()
{
  return this->deleteAll_;
}

void PortPrinterProperties_t::
deleteAll (const DeleteAllType& x)
{
  this->deleteAll_.set (x);
}

void PortPrinterProperties_t::
deleteAll (const DeleteAllOptional& x)
{
  this->deleteAll_ = x;
}

const PortPrinterProperties_t::LprQueueOptional& PortPrinterProperties_t::
lprQueue () const
{
  return this->lprQueue_;
}

PortPrinterProperties_t::LprQueueOptional& PortPrinterProperties_t::
lprQueue ()
{
  return this->lprQueue_;
}

void PortPrinterProperties_t::
lprQueue (const LprQueueType& x)
{
  this->lprQueue_.set (x);
}

void PortPrinterProperties_t::
lprQueue (const LprQueueOptional& x)
{
  this->lprQueue_ = x;
}

void PortPrinterProperties_t::
lprQueue (::std::unique_ptr< LprQueueType > x)
{
  this->lprQueue_.set (std::move (x));
}

const PortPrinterProperties_t::SnmpCommunityOptional& PortPrinterProperties_t::
snmpCommunity () const
{
  return this->snmpCommunity_;
}

PortPrinterProperties_t::SnmpCommunityOptional& PortPrinterProperties_t::
snmpCommunity ()
{
  return this->snmpCommunity_;
}

void PortPrinterProperties_t::
snmpCommunity (const SnmpCommunityType& x)
{
  this->snmpCommunity_.set (x);
}

void PortPrinterProperties_t::
snmpCommunity (const SnmpCommunityOptional& x)
{
  this->snmpCommunity_ = x;
}

void PortPrinterProperties_t::
snmpCommunity (::std::unique_ptr< SnmpCommunityType > x)
{
  this->snmpCommunity_.set (std::move (x));
}

const PortPrinterProperties_t::ProtocolOptional& PortPrinterProperties_t::
protocol () const
{
  return this->protocol_;
}

PortPrinterProperties_t::ProtocolOptional& PortPrinterProperties_t::
protocol ()
{
  return this->protocol_;
}

void PortPrinterProperties_t::
protocol (const ProtocolType& x)
{
  this->protocol_.set (x);
}

void PortPrinterProperties_t::
protocol (const ProtocolOptional& x)
{
  this->protocol_ = x;
}

void PortPrinterProperties_t::
protocol (::std::unique_ptr< ProtocolType > x)
{
  this->protocol_.set (std::move (x));
}

const PortPrinterProperties_t::PortNumberOptional& PortPrinterProperties_t::
portNumber () const
{
  return this->portNumber_;
}

PortPrinterProperties_t::PortNumberOptional& PortPrinterProperties_t::
portNumber ()
{
  return this->portNumber_;
}

void PortPrinterProperties_t::
portNumber (const PortNumberType& x)
{
  this->portNumber_.set (x);
}

void PortPrinterProperties_t::
portNumber (const PortNumberOptional& x)
{
  this->portNumber_ = x;
}

const PortPrinterProperties_t::DoubleSpoolOptional& PortPrinterProperties_t::
doubleSpool () const
{
  return this->doubleSpool_;
}

PortPrinterProperties_t::DoubleSpoolOptional& PortPrinterProperties_t::
doubleSpool ()
{
  return this->doubleSpool_;
}

void PortPrinterProperties_t::
doubleSpool (const DoubleSpoolType& x)
{
  this->doubleSpool_.set (x);
}

void PortPrinterProperties_t::
doubleSpool (const DoubleSpoolOptional& x)
{
  this->doubleSpool_ = x;
}

const PortPrinterProperties_t::SnmpEnabledOptional& PortPrinterProperties_t::
snmpEnabled () const
{
  return this->snmpEnabled_;
}

PortPrinterProperties_t::SnmpEnabledOptional& PortPrinterProperties_t::
snmpEnabled ()
{
  return this->snmpEnabled_;
}

void PortPrinterProperties_t::
snmpEnabled (const SnmpEnabledType& x)
{
  this->snmpEnabled_.set (x);
}

void PortPrinterProperties_t::
snmpEnabled (const SnmpEnabledOptional& x)
{
  this->snmpEnabled_ = x;
}

const PortPrinterProperties_t::SnmpDevIndexOptional& PortPrinterProperties_t::
snmpDevIndex () const
{
  return this->snmpDevIndex_;
}

PortPrinterProperties_t::SnmpDevIndexOptional& PortPrinterProperties_t::
snmpDevIndex ()
{
  return this->snmpDevIndex_;
}

void PortPrinterProperties_t::
snmpDevIndex (const SnmpDevIndexType& x)
{
  this->snmpDevIndex_.set (x);
}

void PortPrinterProperties_t::
snmpDevIndex (const SnmpDevIndexOptional& x)
{
  this->snmpDevIndex_ = x;
}

const PortPrinterProperties_t::DisabledOptional& PortPrinterProperties_t::
disabled () const
{
  return this->disabled_;
}

PortPrinterProperties_t::DisabledOptional& PortPrinterProperties_t::
disabled ()
{
  return this->disabled_;
}

void PortPrinterProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void PortPrinterProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// PortPrinter_t
// 

const PortPrinter_t::PropertiesSequence& PortPrinter_t::
Properties () const
{
  return this->Properties_;
}

PortPrinter_t::PropertiesSequence& PortPrinter_t::
Properties ()
{
  return this->Properties_;
}

void PortPrinter_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const PortPrinter_t::ClsidType& PortPrinter_t::
clsid () const
{
  return this->clsid_.get ();
}

PortPrinter_t::ClsidType& PortPrinter_t::
clsid ()
{
  return this->clsid_.get ();
}

void PortPrinter_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void PortPrinter_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const PortPrinter_t::NameType& PortPrinter_t::
name () const
{
  return this->name_.get ();
}

PortPrinter_t::NameType& PortPrinter_t::
name ()
{
  return this->name_.get ();
}

void PortPrinter_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void PortPrinter_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const PortPrinter_t::ImageOptional& PortPrinter_t::
image () const
{
  return this->image_;
}

PortPrinter_t::ImageOptional& PortPrinter_t::
image ()
{
  return this->image_;
}

void PortPrinter_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void PortPrinter_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const PortPrinter_t::ChangedOptional& PortPrinter_t::
changed () const
{
  return this->changed_;
}

PortPrinter_t::ChangedOptional& PortPrinter_t::
changed ()
{
  return this->changed_;
}

void PortPrinter_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void PortPrinter_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void PortPrinter_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const PortPrinter_t::UidType& PortPrinter_t::
uid () const
{
  return this->uid_.get ();
}

PortPrinter_t::UidType& PortPrinter_t::
uid ()
{
  return this->uid_.get ();
}

void PortPrinter_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void PortPrinter_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const PortPrinter_t::DescOptional& PortPrinter_t::
desc () const
{
  return this->desc_;
}

PortPrinter_t::DescOptional& PortPrinter_t::
desc ()
{
  return this->desc_;
}

void PortPrinter_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void PortPrinter_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void PortPrinter_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const PortPrinter_t::BypassErrorsOptional& PortPrinter_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

PortPrinter_t::BypassErrorsOptional& PortPrinter_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void PortPrinter_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void PortPrinter_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const PortPrinter_t::UserContextOptional& PortPrinter_t::
userContext () const
{
  return this->userContext_;
}

PortPrinter_t::UserContextOptional& PortPrinter_t::
userContext ()
{
  return this->userContext_;
}

void PortPrinter_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void PortPrinter_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const PortPrinter_t::RemovePolicyOptional& PortPrinter_t::
removePolicy () const
{
  return this->removePolicy_;
}

PortPrinter_t::RemovePolicyOptional& PortPrinter_t::
removePolicy ()
{
  return this->removePolicy_;
}

void PortPrinter_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void PortPrinter_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const PortPrinter_t::StatusOptional& PortPrinter_t::
status () const
{
  return this->status_;
}

PortPrinter_t::StatusOptional& PortPrinter_t::
status ()
{
  return this->status_;
}

void PortPrinter_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void PortPrinter_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void PortPrinter_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// LocalPrinterProperties_t
// 

const LocalPrinterProperties_t::ActionOptional& LocalPrinterProperties_t::
action () const
{
  return this->action_;
}

LocalPrinterProperties_t::ActionOptional& LocalPrinterProperties_t::
action ()
{
  return this->action_;
}

void LocalPrinterProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void LocalPrinterProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void LocalPrinterProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const LocalPrinterProperties_t::NameType& LocalPrinterProperties_t::
name () const
{
  return this->name_.get ();
}

LocalPrinterProperties_t::NameType& LocalPrinterProperties_t::
name ()
{
  return this->name_.get ();
}

void LocalPrinterProperties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void LocalPrinterProperties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const LocalPrinterProperties_t::PortType& LocalPrinterProperties_t::
port () const
{
  return this->port_.get ();
}

LocalPrinterProperties_t::PortType& LocalPrinterProperties_t::
port ()
{
  return this->port_.get ();
}

void LocalPrinterProperties_t::
port (const PortType& x)
{
  this->port_.set (x);
}

void LocalPrinterProperties_t::
port (::std::unique_ptr< PortType > x)
{
  this->port_.set (std::move (x));
}

const LocalPrinterProperties_t::PathType& LocalPrinterProperties_t::
path () const
{
  return this->path_.get ();
}

LocalPrinterProperties_t::PathType& LocalPrinterProperties_t::
path ()
{
  return this->path_.get ();
}

void LocalPrinterProperties_t::
path (const PathType& x)
{
  this->path_.set (x);
}

void LocalPrinterProperties_t::
path (::std::unique_ptr< PathType > x)
{
  this->path_.set (std::move (x));
}

const LocalPrinterProperties_t::DefaultOptional& LocalPrinterProperties_t::
default_ () const
{
  return this->default__;
}

LocalPrinterProperties_t::DefaultOptional& LocalPrinterProperties_t::
default_ ()
{
  return this->default__;
}

void LocalPrinterProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void LocalPrinterProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const LocalPrinterProperties_t::DeleteAllOptional& LocalPrinterProperties_t::
deleteAll () const
{
  return this->deleteAll_;
}

LocalPrinterProperties_t::DeleteAllOptional& LocalPrinterProperties_t::
deleteAll ()
{
  return this->deleteAll_;
}

void LocalPrinterProperties_t::
deleteAll (const DeleteAllType& x)
{
  this->deleteAll_.set (x);
}

void LocalPrinterProperties_t::
deleteAll (const DeleteAllOptional& x)
{
  this->deleteAll_ = x;
}

const LocalPrinterProperties_t::LocationOptional& LocalPrinterProperties_t::
location () const
{
  return this->location_;
}

LocalPrinterProperties_t::LocationOptional& LocalPrinterProperties_t::
location ()
{
  return this->location_;
}

void LocalPrinterProperties_t::
location (const LocationType& x)
{
  this->location_.set (x);
}

void LocalPrinterProperties_t::
location (const LocationOptional& x)
{
  this->location_ = x;
}

void LocalPrinterProperties_t::
location (::std::unique_ptr< LocationType > x)
{
  this->location_.set (std::move (x));
}

const LocalPrinterProperties_t::CommentOptional& LocalPrinterProperties_t::
comment () const
{
  return this->comment_;
}

LocalPrinterProperties_t::CommentOptional& LocalPrinterProperties_t::
comment ()
{
  return this->comment_;
}

void LocalPrinterProperties_t::
comment (const CommentType& x)
{
  this->comment_.set (x);
}

void LocalPrinterProperties_t::
comment (const CommentOptional& x)
{
  this->comment_ = x;
}

void LocalPrinterProperties_t::
comment (::std::unique_ptr< CommentType > x)
{
  this->comment_.set (std::move (x));
}

const LocalPrinterProperties_t::DisabledOptional& LocalPrinterProperties_t::
disabled () const
{
  return this->disabled_;
}

LocalPrinterProperties_t::DisabledOptional& LocalPrinterProperties_t::
disabled ()
{
  return this->disabled_;
}

void LocalPrinterProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void LocalPrinterProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// LocalPrinter_t
// 

const LocalPrinter_t::PropertiesSequence& LocalPrinter_t::
Properties () const
{
  return this->Properties_;
}

LocalPrinter_t::PropertiesSequence& LocalPrinter_t::
Properties ()
{
  return this->Properties_;
}

void LocalPrinter_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const LocalPrinter_t::ClsidType& LocalPrinter_t::
clsid () const
{
  return this->clsid_.get ();
}

LocalPrinter_t::ClsidType& LocalPrinter_t::
clsid ()
{
  return this->clsid_.get ();
}

void LocalPrinter_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void LocalPrinter_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const LocalPrinter_t::NameType& LocalPrinter_t::
name () const
{
  return this->name_.get ();
}

LocalPrinter_t::NameType& LocalPrinter_t::
name ()
{
  return this->name_.get ();
}

void LocalPrinter_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void LocalPrinter_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const LocalPrinter_t::ImageOptional& LocalPrinter_t::
image () const
{
  return this->image_;
}

LocalPrinter_t::ImageOptional& LocalPrinter_t::
image ()
{
  return this->image_;
}

void LocalPrinter_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void LocalPrinter_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const LocalPrinter_t::ChangedOptional& LocalPrinter_t::
changed () const
{
  return this->changed_;
}

LocalPrinter_t::ChangedOptional& LocalPrinter_t::
changed ()
{
  return this->changed_;
}

void LocalPrinter_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void LocalPrinter_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void LocalPrinter_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const LocalPrinter_t::UidType& LocalPrinter_t::
uid () const
{
  return this->uid_.get ();
}

LocalPrinter_t::UidType& LocalPrinter_t::
uid ()
{
  return this->uid_.get ();
}

void LocalPrinter_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void LocalPrinter_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const LocalPrinter_t::DescOptional& LocalPrinter_t::
desc () const
{
  return this->desc_;
}

LocalPrinter_t::DescOptional& LocalPrinter_t::
desc ()
{
  return this->desc_;
}

void LocalPrinter_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void LocalPrinter_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void LocalPrinter_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const LocalPrinter_t::BypassErrorsOptional& LocalPrinter_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

LocalPrinter_t::BypassErrorsOptional& LocalPrinter_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void LocalPrinter_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void LocalPrinter_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const LocalPrinter_t::UserContextOptional& LocalPrinter_t::
userContext () const
{
  return this->userContext_;
}

LocalPrinter_t::UserContextOptional& LocalPrinter_t::
userContext ()
{
  return this->userContext_;
}

void LocalPrinter_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void LocalPrinter_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const LocalPrinter_t::RemovePolicyOptional& LocalPrinter_t::
removePolicy () const
{
  return this->removePolicy_;
}

LocalPrinter_t::RemovePolicyOptional& LocalPrinter_t::
removePolicy ()
{
  return this->removePolicy_;
}

void LocalPrinter_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void LocalPrinter_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const LocalPrinter_t::StatusOptional& LocalPrinter_t::
status () const
{
  return this->status_;
}

LocalPrinter_t::StatusOptional& LocalPrinter_t::
status ()
{
  return this->status_;
}

void LocalPrinter_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void LocalPrinter_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void LocalPrinter_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// Printers
// 

const Printers::SharedPrinterSequence& Printers::
SharedPrinter () const
{
  return this->SharedPrinter_;
}

Printers::SharedPrinterSequence& Printers::
SharedPrinter ()
{
  return this->SharedPrinter_;
}

void Printers::
SharedPrinter (const SharedPrinterSequence& s)
{
  this->SharedPrinter_ = s;
}

const Printers::PortPrinterSequence& Printers::
PortPrinter () const
{
  return this->PortPrinter_;
}

Printers::PortPrinterSequence& Printers::
PortPrinter ()
{
  return this->PortPrinter_;
}

void Printers::
PortPrinter (const PortPrinterSequence& s)
{
  this->PortPrinter_ = s;
}

const Printers::LocalPrinterSequence& Printers::
LocalPrinter () const
{
  return this->LocalPrinter_;
}

Printers::LocalPrinterSequence& Printers::
LocalPrinter ()
{
  return this->LocalPrinter_;
}

void Printers::
LocalPrinter (const LocalPrinterSequence& s)
{
  this->LocalPrinter_ = s;
}

const Printers::ClsidType& Printers::
clsid () const
{
  return this->clsid_.get ();
}

Printers::ClsidType& Printers::
clsid ()
{
  return this->clsid_.get ();
}

void Printers::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Printers::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Printers::DisabledOptional& Printers::
disabled () const
{
  return this->disabled_;
}

Printers::DisabledOptional& Printers::
disabled ()
{
  return this->disabled_;
}

void Printers::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Printers::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// SharedPrinterProperties_t
//

SharedPrinterProperties_t::
SharedPrinterProperties_t (const PathType& path,
                           const PortType& port)
: ::xml_schema::Type (),
  action_ (this),
  comment_ (this),
  path_ (path, this),
  location_ (this),
  default__ (this),
  skipLocal_ (this),
  deleteAll_ (this),
  persistent_ (this),
  deleteMaps_ (this),
  port_ (port, this),
  username_ (this),
  cpassword_ (this),
  disabled_ (this)
{
}

SharedPrinterProperties_t::
SharedPrinterProperties_t (const SharedPrinterProperties_t& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  comment_ (x.comment_, f, this),
  path_ (x.path_, f, this),
  location_ (x.location_, f, this),
  default__ (x.default__, f, this),
  skipLocal_ (x.skipLocal_, f, this),
  deleteAll_ (x.deleteAll_, f, this),
  persistent_ (x.persistent_, f, this),
  deleteMaps_ (x.deleteMaps_, f, this),
  port_ (x.port_, f, this),
  username_ (x.username_, f, this),
  cpassword_ (x.cpassword_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

SharedPrinterProperties_t::
SharedPrinterProperties_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  comment_ (this),
  path_ (this),
  location_ (this),
  default__ (this),
  skipLocal_ (this),
  deleteAll_ (this),
  persistent_ (this),
  deleteMaps_ (this),
  port_ (this),
  username_ (this),
  cpassword_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void SharedPrinterProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "comment" && n.namespace_ ().empty ())
    {
      this->comment_.set (CommentTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      this->path_.set (PathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "location" && n.namespace_ ().empty ())
    {
      this->location_.set (LocationTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "skipLocal" && n.namespace_ ().empty ())
    {
      this->skipLocal_.set (SkipLocalTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteAll" && n.namespace_ ().empty ())
    {
      this->deleteAll_.set (DeleteAllTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "persistent" && n.namespace_ ().empty ())
    {
      this->persistent_.set (PersistentTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteMaps" && n.namespace_ ().empty ())
    {
      this->deleteMaps_.set (DeleteMapsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "port" && n.namespace_ ().empty ())
    {
      this->port_.set (PortTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "username" && n.namespace_ ().empty ())
    {
      this->username_.set (UsernameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cpassword" && n.namespace_ ().empty ())
    {
      this->cpassword_.set (CpasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!path_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "path",
      "");
  }

  if (!port_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "port",
      "");
  }
}

SharedPrinterProperties_t* SharedPrinterProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class SharedPrinterProperties_t (*this, f, c);
}

SharedPrinterProperties_t& SharedPrinterProperties_t::
operator= (const SharedPrinterProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->comment_ = x.comment_;
    this->path_ = x.path_;
    this->location_ = x.location_;
    this->default__ = x.default__;
    this->skipLocal_ = x.skipLocal_;
    this->deleteAll_ = x.deleteAll_;
    this->persistent_ = x.persistent_;
    this->deleteMaps_ = x.deleteMaps_;
    this->port_ = x.port_;
    this->username_ = x.username_;
    this->cpassword_ = x.cpassword_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

SharedPrinterProperties_t::
~SharedPrinterProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, SharedPrinterProperties_t >
_xsd_SharedPrinterProperties_t_type_factory_init (
  "SharedPrinterProperties_t",
  "");

// SharedPrinter_t
//

SharedPrinter_t::
SharedPrinter_t (const ClsidType& clsid,
                 const NameType& name,
                 const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

SharedPrinter_t::
SharedPrinter_t (const SharedPrinter_t& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

SharedPrinter_t::
SharedPrinter_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void SharedPrinter_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

SharedPrinter_t* SharedPrinter_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class SharedPrinter_t (*this, f, c);
}

SharedPrinter_t& SharedPrinter_t::
operator= (const SharedPrinter_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

SharedPrinter_t::
~SharedPrinter_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, SharedPrinter_t >
_xsd_SharedPrinter_t_type_factory_init (
  "SharedPrinter_t",
  "");

// PortPrinterProperties_t
//

PortPrinterProperties_t::
PortPrinterProperties_t (const IpAddressType& ipAddress,
                         const PathType& path)
: ::xml_schema::Type (),
  ipAddress_ (ipAddress, this),
  action_ (this),
  location_ (this),
  localName_ (this),
  comment_ (this),
  default__ (this),
  skipLocal_ (this),
  useDNS_ (this),
  path_ (path, this),
  deleteAll_ (this),
  lprQueue_ (this),
  snmpCommunity_ (this),
  protocol_ (this),
  portNumber_ (this),
  doubleSpool_ (this),
  snmpEnabled_ (this),
  snmpDevIndex_ (this),
  disabled_ (this)
{
}

PortPrinterProperties_t::
PortPrinterProperties_t (const PortPrinterProperties_t& x,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  ipAddress_ (x.ipAddress_, f, this),
  action_ (x.action_, f, this),
  location_ (x.location_, f, this),
  localName_ (x.localName_, f, this),
  comment_ (x.comment_, f, this),
  default__ (x.default__, f, this),
  skipLocal_ (x.skipLocal_, f, this),
  useDNS_ (x.useDNS_, f, this),
  path_ (x.path_, f, this),
  deleteAll_ (x.deleteAll_, f, this),
  lprQueue_ (x.lprQueue_, f, this),
  snmpCommunity_ (x.snmpCommunity_, f, this),
  protocol_ (x.protocol_, f, this),
  portNumber_ (x.portNumber_, f, this),
  doubleSpool_ (x.doubleSpool_, f, this),
  snmpEnabled_ (x.snmpEnabled_, f, this),
  snmpDevIndex_ (x.snmpDevIndex_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

PortPrinterProperties_t::
PortPrinterProperties_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f,
                         ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  ipAddress_ (this),
  action_ (this),
  location_ (this),
  localName_ (this),
  comment_ (this),
  default__ (this),
  skipLocal_ (this),
  useDNS_ (this),
  path_ (this),
  deleteAll_ (this),
  lprQueue_ (this),
  snmpCommunity_ (this),
  protocol_ (this),
  portNumber_ (this),
  doubleSpool_ (this),
  snmpEnabled_ (this),
  snmpDevIndex_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void PortPrinterProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "ipAddress" && n.namespace_ ().empty ())
    {
      this->ipAddress_.set (IpAddressTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "location" && n.namespace_ ().empty ())
    {
      this->location_.set (LocationTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "localName" && n.namespace_ ().empty ())
    {
      this->localName_.set (LocalNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "comment" && n.namespace_ ().empty ())
    {
      this->comment_.set (CommentTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "skipLocal" && n.namespace_ ().empty ())
    {
      this->skipLocal_.set (SkipLocalTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useDNS" && n.namespace_ ().empty ())
    {
      this->useDNS_.set (UseDNSTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      this->path_.set (PathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteAll" && n.namespace_ ().empty ())
    {
      this->deleteAll_.set (DeleteAllTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "lprQueue" && n.namespace_ ().empty ())
    {
      this->lprQueue_.set (LprQueueTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "snmpCommunity" && n.namespace_ ().empty ())
    {
      this->snmpCommunity_.set (SnmpCommunityTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "protocol" && n.namespace_ ().empty ())
    {
      this->protocol_.set (ProtocolTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "portNumber" && n.namespace_ ().empty ())
    {
      this->portNumber_.set (PortNumberTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "doubleSpool" && n.namespace_ ().empty ())
    {
      this->doubleSpool_.set (DoubleSpoolTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "snmpEnabled" && n.namespace_ ().empty ())
    {
      this->snmpEnabled_.set (SnmpEnabledTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "snmpDevIndex" && n.namespace_ ().empty ())
    {
      this->snmpDevIndex_.set (SnmpDevIndexTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!ipAddress_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "ipAddress",
      "");
  }

  if (!path_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "path",
      "");
  }
}

PortPrinterProperties_t* PortPrinterProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class PortPrinterProperties_t (*this, f, c);
}

PortPrinterProperties_t& PortPrinterProperties_t::
operator= (const PortPrinterProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->ipAddress_ = x.ipAddress_;
    this->action_ = x.action_;
    this->location_ = x.location_;
    this->localName_ = x.localName_;
    this->comment_ = x.comment_;
    this->default__ = x.default__;
    this->skipLocal_ = x.skipLocal_;
    this->useDNS_ = x.useDNS_;
    this->path_ = x.path_;
    this->deleteAll_ = x.deleteAll_;
    this->lprQueue_ = x.lprQueue_;
    this->snmpCommunity_ = x.snmpCommunity_;
    this->protocol_ = x.protocol_;
    this->portNumber_ = x.portNumber_;
    this->doubleSpool_ = x.doubleSpool_;
    this->snmpEnabled_ = x.snmpEnabled_;
    this->snmpDevIndex_ = x.snmpDevIndex_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

PortPrinterProperties_t::
~PortPrinterProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, PortPrinterProperties_t >
_xsd_PortPrinterProperties_t_type_factory_init (
  "PortPrinterProperties_t",
  "");

// PortPrinter_t
//

PortPrinter_t::
PortPrinter_t (const ClsidType& clsid,
               const NameType& name,
               const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

PortPrinter_t::
PortPrinter_t (const PortPrinter_t& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

PortPrinter_t::
PortPrinter_t (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void PortPrinter_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

PortPrinter_t* PortPrinter_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class PortPrinter_t (*this, f, c);
}

PortPrinter_t& PortPrinter_t::
operator= (const PortPrinter_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

PortPrinter_t::
~PortPrinter_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, PortPrinter_t >
_xsd_PortPrinter_t_type_factory_init (
  "PortPrinter_t",
  "");

// LocalPrinterProperties_t
//

LocalPrinterProperties_t::
LocalPrinterProperties_t (const NameType& name,
                          const PortType& port,
                          const PathType& path)
: ::xml_schema::Type (),
  action_ (this),
  name_ (name, this),
  port_ (port, this),
  path_ (path, this),
  default__ (this),
  deleteAll_ (this),
  location_ (this),
  comment_ (this),
  disabled_ (this)
{
}

LocalPrinterProperties_t::
LocalPrinterProperties_t (const LocalPrinterProperties_t& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  name_ (x.name_, f, this),
  port_ (x.port_, f, this),
  path_ (x.path_, f, this),
  default__ (x.default__, f, this),
  deleteAll_ (x.deleteAll_, f, this),
  location_ (x.location_, f, this),
  comment_ (x.comment_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

LocalPrinterProperties_t::
LocalPrinterProperties_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  name_ (this),
  port_ (this),
  path_ (this),
  default__ (this),
  deleteAll_ (this),
  location_ (this),
  comment_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void LocalPrinterProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "port" && n.namespace_ ().empty ())
    {
      this->port_.set (PortTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      this->path_.set (PathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteAll" && n.namespace_ ().empty ())
    {
      this->deleteAll_.set (DeleteAllTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "location" && n.namespace_ ().empty ())
    {
      this->location_.set (LocationTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "comment" && n.namespace_ ().empty ())
    {
      this->comment_.set (CommentTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!port_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "port",
      "");
  }

  if (!path_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "path",
      "");
  }
}

LocalPrinterProperties_t* LocalPrinterProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class LocalPrinterProperties_t (*this, f, c);
}

LocalPrinterProperties_t& LocalPrinterProperties_t::
operator= (const LocalPrinterProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->name_ = x.name_;
    this->port_ = x.port_;
    this->path_ = x.path_;
    this->default__ = x.default__;
    this->deleteAll_ = x.deleteAll_;
    this->location_ = x.location_;
    this->comment_ = x.comment_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

LocalPrinterProperties_t::
~LocalPrinterProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, LocalPrinterProperties_t >
_xsd_LocalPrinterProperties_t_type_factory_init (
  "LocalPrinterProperties_t",
  "");

// LocalPrinter_t
//

LocalPrinter_t::
LocalPrinter_t (const ClsidType& clsid,
                const NameType& name,
                const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

LocalPrinter_t::
LocalPrinter_t (const LocalPrinter_t& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

LocalPrinter_t::
LocalPrinter_t (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void LocalPrinter_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

LocalPrinter_t* LocalPrinter_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class LocalPrinter_t (*this, f, c);
}

LocalPrinter_t& LocalPrinter_t::
operator= (const LocalPrinter_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

LocalPrinter_t::
~LocalPrinter_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, LocalPrinter_t >
_xsd_LocalPrinter_t_type_factory_init (
  "LocalPrinter_t",
  "");

// Printers
//

Printers::
Printers (const ClsidType& clsid)
: ::xml_schema::Type (),
  SharedPrinter_ (this),
  PortPrinter_ (this),
  LocalPrinter_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Printers::
Printers (const Printers& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  SharedPrinter_ (x.SharedPrinter_, f, this),
  PortPrinter_ (x.PortPrinter_, f, this),
  LocalPrinter_ (x.LocalPrinter_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Printers::
Printers (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  SharedPrinter_ (this),
  PortPrinter_ (this),
  LocalPrinter_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Printers::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // SharedPrinter
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "SharedPrinter",
          "",
          &::xsd::cxx::tree::factory_impl< SharedPrinterType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< SharedPrinterType > r (
          dynamic_cast< SharedPrinterType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->SharedPrinter_.push_back (::std::move (r));
        continue;
      }
    }

    // PortPrinter
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "PortPrinter",
          "",
          &::xsd::cxx::tree::factory_impl< PortPrinterType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PortPrinterType > r (
          dynamic_cast< PortPrinterType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->PortPrinter_.push_back (::std::move (r));
        continue;
      }
    }

    // LocalPrinter
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "LocalPrinter",
          "",
          &::xsd::cxx::tree::factory_impl< LocalPrinterType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< LocalPrinterType > r (
          dynamic_cast< LocalPrinterType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->LocalPrinter_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

Printers* Printers::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Printers (*this, f, c);
}

Printers& Printers::
operator= (const Printers& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->SharedPrinter_ = x.SharedPrinter_;
    this->PortPrinter_ = x.PortPrinter_;
    this->LocalPrinter_ = x.LocalPrinter_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Printers::
~Printers ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const SharedPrinterProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.comment ())
  {
    o << ::std::endl << "comment: " << *i.comment ();
  }

  o << ::std::endl << "path: " << i.path ();
  if (i.location ())
  {
    o << ::std::endl << "location: " << *i.location ();
  }

  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.skipLocal ())
  {
    o << ::std::endl << "skipLocal: " << *i.skipLocal ();
  }

  if (i.deleteAll ())
  {
    o << ::std::endl << "deleteAll: " << *i.deleteAll ();
  }

  if (i.persistent ())
  {
    o << ::std::endl << "persistent: " << *i.persistent ();
  }

  if (i.deleteMaps ())
  {
    o << ::std::endl << "deleteMaps: " << *i.deleteMaps ();
  }

  o << ::std::endl << "port: " << i.port ();
  if (i.username ())
  {
    o << ::std::endl << "username: " << *i.username ();
  }

  if (i.cpassword ())
  {
    o << ::std::endl << "cpassword: " << *i.cpassword ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SharedPrinterProperties_t >
_xsd_SharedPrinterProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const SharedPrinter_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (SharedPrinter_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, SharedPrinter_t >
_xsd_SharedPrinter_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const PortPrinterProperties_t& i)
{
  o << ::std::endl << "ipAddress: " << i.ipAddress ();
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.location ())
  {
    o << ::std::endl << "location: " << *i.location ();
  }

  if (i.localName ())
  {
    o << ::std::endl << "localName: " << *i.localName ();
  }

  if (i.comment ())
  {
    o << ::std::endl << "comment: " << *i.comment ();
  }

  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.skipLocal ())
  {
    o << ::std::endl << "skipLocal: " << *i.skipLocal ();
  }

  if (i.useDNS ())
  {
    o << ::std::endl << "useDNS: " << *i.useDNS ();
  }

  o << ::std::endl << "path: " << i.path ();
  if (i.deleteAll ())
  {
    o << ::std::endl << "deleteAll: " << *i.deleteAll ();
  }

  if (i.lprQueue ())
  {
    o << ::std::endl << "lprQueue: " << *i.lprQueue ();
  }

  if (i.snmpCommunity ())
  {
    o << ::std::endl << "snmpCommunity: " << *i.snmpCommunity ();
  }

  if (i.protocol ())
  {
    o << ::std::endl << "protocol: " << *i.protocol ();
  }

  if (i.portNumber ())
  {
    o << ::std::endl << "portNumber: " << *i.portNumber ();
  }

  if (i.doubleSpool ())
  {
    o << ::std::endl << "doubleSpool: " << *i.doubleSpool ();
  }

  if (i.snmpEnabled ())
  {
    o << ::std::endl << "snmpEnabled: " << *i.snmpEnabled ();
  }

  if (i.snmpDevIndex ())
  {
    o << ::std::endl << "snmpDevIndex: " << *i.snmpDevIndex ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PortPrinterProperties_t >
_xsd_PortPrinterProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const PortPrinter_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (PortPrinter_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, PortPrinter_t >
_xsd_PortPrinter_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const LocalPrinterProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "name: " << i.name ();
  o << ::std::endl << "port: " << i.port ();
  o << ::std::endl << "path: " << i.path ();
  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.deleteAll ())
  {
    o << ::std::endl << "deleteAll: " << *i.deleteAll ();
  }

  if (i.location ())
  {
    o << ::std::endl << "location: " << *i.location ();
  }

  if (i.comment ())
  {
    o << ::std::endl << "comment: " << *i.comment ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LocalPrinterProperties_t >
_xsd_LocalPrinterProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const LocalPrinter_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (LocalPrinter_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, LocalPrinter_t >
_xsd_LocalPrinter_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Printers& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Printers::SharedPrinterConstIterator
         b (i.SharedPrinter ().begin ()), e (i.SharedPrinter ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "SharedPrinter: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Printers::PortPrinterConstIterator
         b (i.PortPrinter ().begin ()), e (i.PortPrinter ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "PortPrinter: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Printers::LocalPrinterConstIterator
         b (i.LocalPrinter ().begin ()), e (i.LocalPrinter ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "LocalPrinter: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Printers >
Printers_ (const ::std::string& u,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Printers > (
    ::Printers_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Printers >
Printers_ (const ::std::string& u,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Printers > (
    ::Printers_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Printers >
Printers_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Printers > (
    ::Printers_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Printers >
Printers_ (::std::istream& is,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Printers_ (isrc, f, p);
}

::std::unique_ptr< ::Printers >
Printers_ (::std::istream& is,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Printers_ (isrc, h, f, p);
}

::std::unique_ptr< ::Printers >
Printers_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Printers_ (isrc, h, f, p);
}

::std::unique_ptr< ::Printers >
Printers_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Printers_ (isrc, f, p);
}

::std::unique_ptr< ::Printers >
Printers_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Printers_ (isrc, h, f, p);
}

::std::unique_ptr< ::Printers >
Printers_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Printers_ (isrc, h, f, p);
}

::std::unique_ptr< ::Printers >
Printers_ (::xercesc::InputSource& i,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Printers > (
    ::Printers_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Printers >
Printers_ (::xercesc::InputSource& i,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Printers > (
    ::Printers_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Printers >
Printers_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Printers > (
    ::Printers_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Printers >
Printers_ (const ::xercesc::DOMDocument& doc,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Printers > (
      ::Printers_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Printers" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Printers > r (
      ::xsd::cxx::tree::traits< ::Printers, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Printers",
    "");
}

::std::unique_ptr< ::Printers >
Printers_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Printers" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Printers > r (
      ::xsd::cxx::tree::traits< ::Printers, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Printers",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const SharedPrinterProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // comment
  //
  if (i.comment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "comment",
        e));

    a << *i.comment ();
  }

  // path
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "path",
        e));

    a << i.path ();
  }

  // location
  //
  if (i.location ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "location",
        e));

    a << *i.location ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // skipLocal
  //
  if (i.skipLocal ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "skipLocal",
        e));

    a << *i.skipLocal ();
  }

  // deleteAll
  //
  if (i.deleteAll ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deleteAll",
        e));

    a << *i.deleteAll ();
  }

  // persistent
  //
  if (i.persistent ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "persistent",
        e));

    a << *i.persistent ();
  }

  // deleteMaps
  //
  if (i.deleteMaps ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deleteMaps",
        e));

    a << *i.deleteMaps ();
  }

  // port
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "port",
        e));

    a << i.port ();
  }

  // username
  //
  if (i.username ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "username",
        e));

    a << *i.username ();
  }

  // cpassword
  //
  if (i.cpassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cpassword",
        e));

    a << *i.cpassword ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SharedPrinterProperties_t >
_xsd_SharedPrinterProperties_t_type_serializer_init (
  "SharedPrinterProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const SharedPrinter_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (SharedPrinter_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (SharedPrinter_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SharedPrinter_t >
_xsd_SharedPrinter_t_type_serializer_init (
  "SharedPrinter_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const PortPrinterProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // ipAddress
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ipAddress",
        e));

    a << i.ipAddress ();
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // location
  //
  if (i.location ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "location",
        e));

    a << *i.location ();
  }

  // localName
  //
  if (i.localName ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "localName",
        e));

    a << *i.localName ();
  }

  // comment
  //
  if (i.comment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "comment",
        e));

    a << *i.comment ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // skipLocal
  //
  if (i.skipLocal ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "skipLocal",
        e));

    a << *i.skipLocal ();
  }

  // useDNS
  //
  if (i.useDNS ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useDNS",
        e));

    a << *i.useDNS ();
  }

  // path
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "path",
        e));

    a << i.path ();
  }

  // deleteAll
  //
  if (i.deleteAll ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deleteAll",
        e));

    a << *i.deleteAll ();
  }

  // lprQueue
  //
  if (i.lprQueue ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "lprQueue",
        e));

    a << *i.lprQueue ();
  }

  // snmpCommunity
  //
  if (i.snmpCommunity ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "snmpCommunity",
        e));

    a << *i.snmpCommunity ();
  }

  // protocol
  //
  if (i.protocol ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "protocol",
        e));

    a << *i.protocol ();
  }

  // portNumber
  //
  if (i.portNumber ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "portNumber",
        e));

    a << *i.portNumber ();
  }

  // doubleSpool
  //
  if (i.doubleSpool ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "doubleSpool",
        e));

    a << *i.doubleSpool ();
  }

  // snmpEnabled
  //
  if (i.snmpEnabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "snmpEnabled",
        e));

    a << *i.snmpEnabled ();
  }

  // snmpDevIndex
  //
  if (i.snmpDevIndex ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "snmpDevIndex",
        e));

    a << *i.snmpDevIndex ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PortPrinterProperties_t >
_xsd_PortPrinterProperties_t_type_serializer_init (
  "PortPrinterProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const PortPrinter_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (PortPrinter_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (PortPrinter_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, PortPrinter_t >
_xsd_PortPrinter_t_type_serializer_init (
  "PortPrinter_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const LocalPrinterProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // port
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "port",
        e));

    a << i.port ();
  }

  // path
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "path",
        e));

    a << i.path ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // deleteAll
  //
  if (i.deleteAll ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deleteAll",
        e));

    a << *i.deleteAll ();
  }

  // location
  //
  if (i.location ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "location",
        e));

    a << *i.location ();
  }

  // comment
  //
  if (i.comment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "comment",
        e));

    a << *i.comment ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LocalPrinterProperties_t >
_xsd_LocalPrinterProperties_t_type_serializer_init (
  "LocalPrinterProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const LocalPrinter_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (LocalPrinter_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (LocalPrinter_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, LocalPrinter_t >
_xsd_LocalPrinter_t_type_serializer_init (
  "LocalPrinter_t",
  "");


void
Printers_ (::std::ostream& o,
           const ::Printers& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Printers_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Printers_ (::std::ostream& o,
           const ::Printers& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Printers_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Printers_ (::std::ostream& o,
           const ::Printers& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Printers_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Printers_ (::xercesc::XMLFormatTarget& t,
           const ::Printers& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Printers_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Printers_ (::xercesc::XMLFormatTarget& t,
           const ::Printers& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Printers_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Printers_ (::xercesc::XMLFormatTarget& t,
           const ::Printers& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Printers_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Printers_ (::xercesc::DOMDocument& d,
           const ::Printers& s,
           ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Printers" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Printers",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
Printers_ (const ::Printers& s,
           const ::xml_schema::NamespaceInfomap& m,
           ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "Printers",
      "",
      m, f));

  ::Printers_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const Printers& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // SharedPrinter
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Printers::SharedPrinterConstIterator
         b (i.SharedPrinter ().begin ()), n (i.SharedPrinter ().end ());
         b != n; ++b)
    {
      if (typeid (Printers::SharedPrinterType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SharedPrinter",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "SharedPrinter",
          "",
          false, true, e, *b);
    }
  }

  // PortPrinter
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Printers::PortPrinterConstIterator
         b (i.PortPrinter ().begin ()), n (i.PortPrinter ().end ());
         b != n; ++b)
    {
      if (typeid (Printers::PortPrinterType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "PortPrinter",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "PortPrinter",
          "",
          false, true, e, *b);
    }
  }

  // LocalPrinter
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Printers::LocalPrinterConstIterator
         b (i.LocalPrinter ().begin ()), n (i.LocalPrinter ().end ());
         b != n; ++b)
    {
      if (typeid (Printers::LocalPrinterType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "LocalPrinter",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "LocalPrinter",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "folderoptionsschema.h"

// GlobalFolderOptionsProperties_t
// 

const GlobalFolderOptionsProperties_t::NoNetCrawlingType& GlobalFolderOptionsProperties_t::
noNetCrawling () const
{
  return this->noNetCrawling_.get ();
}

GlobalFolderOptionsProperties_t::NoNetCrawlingType& GlobalFolderOptionsProperties_t::
noNetCrawling ()
{
  return this->noNetCrawling_.get ();
}

void GlobalFolderOptionsProperties_t::
noNetCrawling (const NoNetCrawlingType& x)
{
  this->noNetCrawling_.set (x);
}

const GlobalFolderOptionsProperties_t::FolderContentsInfoTipType& GlobalFolderOptionsProperties_t::
folderContentsInfoTip () const
{
  return this->folderContentsInfoTip_.get ();
}

GlobalFolderOptionsProperties_t::FolderContentsInfoTipType& GlobalFolderOptionsProperties_t::
folderContentsInfoTip ()
{
  return this->folderContentsInfoTip_.get ();
}

void GlobalFolderOptionsProperties_t::
folderContentsInfoTip (const FolderContentsInfoTipType& x)
{
  this->folderContentsInfoTip_.set (x);
}

const GlobalFolderOptionsProperties_t::FriendlyTreeType& GlobalFolderOptionsProperties_t::
friendlyTree () const
{
  return this->friendlyTree_.get ();
}

GlobalFolderOptionsProperties_t::FriendlyTreeType& GlobalFolderOptionsProperties_t::
friendlyTree ()
{
  return this->friendlyTree_.get ();
}

void GlobalFolderOptionsProperties_t::
friendlyTree (const FriendlyTreeType& x)
{
  this->friendlyTree_.set (x);
}

const GlobalFolderOptionsProperties_t::FullPathAddressType& GlobalFolderOptionsProperties_t::
fullPathAddress () const
{
  return this->fullPathAddress_.get ();
}

GlobalFolderOptionsProperties_t::FullPathAddressType& GlobalFolderOptionsProperties_t::
fullPathAddress ()
{
  return this->fullPathAddress_.get ();
}

void GlobalFolderOptionsProperties_t::
fullPathAddress (const FullPathAddressType& x)
{
  this->fullPathAddress_.set (x);
}

const GlobalFolderOptionsProperties_t::FullPathType& GlobalFolderOptionsProperties_t::
fullPath () const
{
  return this->fullPath_.get ();
}

GlobalFolderOptionsProperties_t::FullPathType& GlobalFolderOptionsProperties_t::
fullPath ()
{
  return this->fullPath_.get ();
}

void GlobalFolderOptionsProperties_t::
fullPath (const FullPathType& x)
{
  this->fullPath_.set (x);
}

const GlobalFolderOptionsProperties_t::DisableThumbnailCacheType& GlobalFolderOptionsProperties_t::
disableThumbnailCache () const
{
  return this->disableThumbnailCache_.get ();
}

GlobalFolderOptionsProperties_t::DisableThumbnailCacheType& GlobalFolderOptionsProperties_t::
disableThumbnailCache ()
{
  return this->disableThumbnailCache_.get ();
}

void GlobalFolderOptionsProperties_t::
disableThumbnailCache (const DisableThumbnailCacheType& x)
{
  this->disableThumbnailCache_.set (x);
}

const GlobalFolderOptionsProperties_t::HiddenType& GlobalFolderOptionsProperties_t::
hidden () const
{
  return this->hidden_.get ();
}

GlobalFolderOptionsProperties_t::HiddenType& GlobalFolderOptionsProperties_t::
hidden ()
{
  return this->hidden_.get ();
}

void GlobalFolderOptionsProperties_t::
hidden (const HiddenType& x)
{
  this->hidden_.set (x);
}

void GlobalFolderOptionsProperties_t::
hidden (::std::unique_ptr< HiddenType > x)
{
  this->hidden_.set (std::move (x));
}

const GlobalFolderOptionsProperties_t::HideFileExtType& GlobalFolderOptionsProperties_t::
hideFileExt () const
{
  return this->hideFileExt_.get ();
}

GlobalFolderOptionsProperties_t::HideFileExtType& GlobalFolderOptionsProperties_t::
hideFileExt ()
{
  return this->hideFileExt_.get ();
}

void GlobalFolderOptionsProperties_t::
hideFileExt (const HideFileExtType& x)
{
  this->hideFileExt_.set (x);
}

const GlobalFolderOptionsProperties_t::SeparateProcessType& GlobalFolderOptionsProperties_t::
separateProcess () const
{
  return this->separateProcess_.get ();
}

GlobalFolderOptionsProperties_t::SeparateProcessType& GlobalFolderOptionsProperties_t::
separateProcess ()
{
  return this->separateProcess_.get ();
}

void GlobalFolderOptionsProperties_t::
separateProcess (const SeparateProcessType& x)
{
  this->separateProcess_.set (x);
}

const GlobalFolderOptionsProperties_t::ShowSuperHiddenType& GlobalFolderOptionsProperties_t::
showSuperHidden () const
{
  return this->showSuperHidden_.get ();
}

GlobalFolderOptionsProperties_t::ShowSuperHiddenType& GlobalFolderOptionsProperties_t::
showSuperHidden ()
{
  return this->showSuperHidden_.get ();
}

void GlobalFolderOptionsProperties_t::
showSuperHidden (const ShowSuperHiddenType& x)
{
  this->showSuperHidden_.set (x);
}

const GlobalFolderOptionsProperties_t::ClassicViewStateType& GlobalFolderOptionsProperties_t::
classicViewState () const
{
  return this->classicViewState_.get ();
}

GlobalFolderOptionsProperties_t::ClassicViewStateType& GlobalFolderOptionsProperties_t::
classicViewState ()
{
  return this->classicViewState_.get ();
}

void GlobalFolderOptionsProperties_t::
classicViewState (const ClassicViewStateType& x)
{
  this->classicViewState_.set (x);
}

const GlobalFolderOptionsProperties_t::PersistBrowsersType& GlobalFolderOptionsProperties_t::
persistBrowsers () const
{
  return this->persistBrowsers_.get ();
}

GlobalFolderOptionsProperties_t::PersistBrowsersType& GlobalFolderOptionsProperties_t::
persistBrowsers ()
{
  return this->persistBrowsers_.get ();
}

void GlobalFolderOptionsProperties_t::
persistBrowsers (const PersistBrowsersType& x)
{
  this->persistBrowsers_.set (x);
}

const GlobalFolderOptionsProperties_t::ShowControlPanelType& GlobalFolderOptionsProperties_t::
showControlPanel () const
{
  return this->showControlPanel_.get ();
}

GlobalFolderOptionsProperties_t::ShowControlPanelType& GlobalFolderOptionsProperties_t::
showControlPanel ()
{
  return this->showControlPanel_.get ();
}

void GlobalFolderOptionsProperties_t::
showControlPanel (const ShowControlPanelType& x)
{
  this->showControlPanel_.set (x);
}

const GlobalFolderOptionsProperties_t::ShowCompColorType& GlobalFolderOptionsProperties_t::
showCompColor () const
{
  return this->showCompColor_.get ();
}

GlobalFolderOptionsProperties_t::ShowCompColorType& GlobalFolderOptionsProperties_t::
showCompColor ()
{
  return this->showCompColor_.get ();
}

void GlobalFolderOptionsProperties_t::
showCompColor (const ShowCompColorType& x)
{
  this->showCompColor_.set (x);
}

const GlobalFolderOptionsProperties_t::ShowInfoTipType& GlobalFolderOptionsProperties_t::
showInfoTip () const
{
  return this->showInfoTip_.get ();
}

GlobalFolderOptionsProperties_t::ShowInfoTipType& GlobalFolderOptionsProperties_t::
showInfoTip ()
{
  return this->showInfoTip_.get ();
}

void GlobalFolderOptionsProperties_t::
showInfoTip (const ShowInfoTipType& x)
{
  this->showInfoTip_.set (x);
}

const GlobalFolderOptionsProperties_t::ForceGuestType& GlobalFolderOptionsProperties_t::
forceGuest () const
{
  return this->forceGuest_.get ();
}

GlobalFolderOptionsProperties_t::ForceGuestType& GlobalFolderOptionsProperties_t::
forceGuest ()
{
  return this->forceGuest_.get ();
}

void GlobalFolderOptionsProperties_t::
forceGuest (const ForceGuestType& x)
{
  this->forceGuest_.set (x);
}

const GlobalFolderOptionsProperties_t::WebViewBarricadeType& GlobalFolderOptionsProperties_t::
webViewBarricade () const
{
  return this->webViewBarricade_.get ();
}

GlobalFolderOptionsProperties_t::WebViewBarricadeType& GlobalFolderOptionsProperties_t::
webViewBarricade ()
{
  return this->webViewBarricade_.get ();
}

void GlobalFolderOptionsProperties_t::
webViewBarricade (const WebViewBarricadeType& x)
{
  this->webViewBarricade_.set (x);
}

const GlobalFolderOptionsProperties_t::DisabledOptional& GlobalFolderOptionsProperties_t::
disabled () const
{
  return this->disabled_;
}

GlobalFolderOptionsProperties_t::DisabledOptional& GlobalFolderOptionsProperties_t::
disabled ()
{
  return this->disabled_;
}

void GlobalFolderOptionsProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void GlobalFolderOptionsProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// GlobalFolderOptions_t
// 

const GlobalFolderOptions_t::FiltersType& GlobalFolderOptions_t::
Filters () const
{
  return this->Filters_.get ();
}

GlobalFolderOptions_t::FiltersType& GlobalFolderOptions_t::
Filters ()
{
  return this->Filters_.get ();
}

void GlobalFolderOptions_t::
Filters (const FiltersType& x)
{
  this->Filters_.set (x);
}

void GlobalFolderOptions_t::
Filters (::std::unique_ptr< FiltersType > x)
{
  this->Filters_.set (std::move (x));
}

const GlobalFolderOptions_t::PropertiesType& GlobalFolderOptions_t::
Properties () const
{
  return this->Properties_.get ();
}

GlobalFolderOptions_t::PropertiesType& GlobalFolderOptions_t::
Properties ()
{
  return this->Properties_.get ();
}

void GlobalFolderOptions_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void GlobalFolderOptions_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const GlobalFolderOptions_t::ClsidType& GlobalFolderOptions_t::
clsid () const
{
  return this->clsid_.get ();
}

GlobalFolderOptions_t::ClsidType& GlobalFolderOptions_t::
clsid ()
{
  return this->clsid_.get ();
}

void GlobalFolderOptions_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void GlobalFolderOptions_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const GlobalFolderOptions_t::ImageOptional& GlobalFolderOptions_t::
image () const
{
  return this->image_;
}

GlobalFolderOptions_t::ImageOptional& GlobalFolderOptions_t::
image ()
{
  return this->image_;
}

void GlobalFolderOptions_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void GlobalFolderOptions_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const GlobalFolderOptions_t::NameType& GlobalFolderOptions_t::
name () const
{
  return this->name_.get ();
}

GlobalFolderOptions_t::NameType& GlobalFolderOptions_t::
name ()
{
  return this->name_.get ();
}

void GlobalFolderOptions_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void GlobalFolderOptions_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const GlobalFolderOptions_t::ChangedOptional& GlobalFolderOptions_t::
changed () const
{
  return this->changed_;
}

GlobalFolderOptions_t::ChangedOptional& GlobalFolderOptions_t::
changed ()
{
  return this->changed_;
}

void GlobalFolderOptions_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void GlobalFolderOptions_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void GlobalFolderOptions_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const GlobalFolderOptions_t::UidType& GlobalFolderOptions_t::
uid () const
{
  return this->uid_.get ();
}

GlobalFolderOptions_t::UidType& GlobalFolderOptions_t::
uid ()
{
  return this->uid_.get ();
}

void GlobalFolderOptions_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void GlobalFolderOptions_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const GlobalFolderOptions_t::DescOptional& GlobalFolderOptions_t::
desc () const
{
  return this->desc_;
}

GlobalFolderOptions_t::DescOptional& GlobalFolderOptions_t::
desc ()
{
  return this->desc_;
}

void GlobalFolderOptions_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void GlobalFolderOptions_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void GlobalFolderOptions_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const GlobalFolderOptions_t::BypassErrorsOptional& GlobalFolderOptions_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

GlobalFolderOptions_t::BypassErrorsOptional& GlobalFolderOptions_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void GlobalFolderOptions_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void GlobalFolderOptions_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const GlobalFolderOptions_t::UserContextOptional& GlobalFolderOptions_t::
userContext () const
{
  return this->userContext_;
}

GlobalFolderOptions_t::UserContextOptional& GlobalFolderOptions_t::
userContext ()
{
  return this->userContext_;
}

void GlobalFolderOptions_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void GlobalFolderOptions_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const GlobalFolderOptions_t::RemovePolicyOptional& GlobalFolderOptions_t::
removePolicy () const
{
  return this->removePolicy_;
}

GlobalFolderOptions_t::RemovePolicyOptional& GlobalFolderOptions_t::
removePolicy ()
{
  return this->removePolicy_;
}

void GlobalFolderOptions_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void GlobalFolderOptions_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const GlobalFolderOptions_t::StatusOptional& GlobalFolderOptions_t::
status () const
{
  return this->status_;
}

GlobalFolderOptions_t::StatusOptional& GlobalFolderOptions_t::
status ()
{
  return this->status_;
}

void GlobalFolderOptions_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void GlobalFolderOptions_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void GlobalFolderOptions_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// GlobalFolderOptionsVistaProperties_t
// 

const GlobalFolderOptionsVistaProperties_t::AlwaysShowIconsType& GlobalFolderOptionsVistaProperties_t::
alwaysShowIcons () const
{
  return this->alwaysShowIcons_.get ();
}

GlobalFolderOptionsVistaProperties_t::AlwaysShowIconsType& GlobalFolderOptionsVistaProperties_t::
alwaysShowIcons ()
{
  return this->alwaysShowIcons_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
alwaysShowIcons (const AlwaysShowIconsType& x)
{
  this->alwaysShowIcons_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::AlwaysShowMenusType& GlobalFolderOptionsVistaProperties_t::
alwaysShowMenus () const
{
  return this->alwaysShowMenus_.get ();
}

GlobalFolderOptionsVistaProperties_t::AlwaysShowMenusType& GlobalFolderOptionsVistaProperties_t::
alwaysShowMenus ()
{
  return this->alwaysShowMenus_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
alwaysShowMenus (const AlwaysShowMenusType& x)
{
  this->alwaysShowMenus_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::DisplayIconThumbType& GlobalFolderOptionsVistaProperties_t::
displayIconThumb () const
{
  return this->displayIconThumb_.get ();
}

GlobalFolderOptionsVistaProperties_t::DisplayIconThumbType& GlobalFolderOptionsVistaProperties_t::
displayIconThumb ()
{
  return this->displayIconThumb_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
displayIconThumb (const DisplayIconThumbType& x)
{
  this->displayIconThumb_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::DisplayFileSizeType& GlobalFolderOptionsVistaProperties_t::
displayFileSize () const
{
  return this->displayFileSize_.get ();
}

GlobalFolderOptionsVistaProperties_t::DisplayFileSizeType& GlobalFolderOptionsVistaProperties_t::
displayFileSize ()
{
  return this->displayFileSize_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
displayFileSize (const DisplayFileSizeType& x)
{
  this->displayFileSize_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::DisplaySimpleFoldersType& GlobalFolderOptionsVistaProperties_t::
displaySimpleFolders () const
{
  return this->displaySimpleFolders_.get ();
}

GlobalFolderOptionsVistaProperties_t::DisplaySimpleFoldersType& GlobalFolderOptionsVistaProperties_t::
displaySimpleFolders ()
{
  return this->displaySimpleFolders_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
displaySimpleFolders (const DisplaySimpleFoldersType& x)
{
  this->displaySimpleFolders_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::FullPathType& GlobalFolderOptionsVistaProperties_t::
fullPath () const
{
  return this->fullPath_.get ();
}

GlobalFolderOptionsVistaProperties_t::FullPathType& GlobalFolderOptionsVistaProperties_t::
fullPath ()
{
  return this->fullPath_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
fullPath (const FullPathType& x)
{
  this->fullPath_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::HiddenType& GlobalFolderOptionsVistaProperties_t::
hidden () const
{
  return this->hidden_.get ();
}

GlobalFolderOptionsVistaProperties_t::HiddenType& GlobalFolderOptionsVistaProperties_t::
hidden ()
{
  return this->hidden_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
hidden (const HiddenType& x)
{
  this->hidden_.set (x);
}

void GlobalFolderOptionsVistaProperties_t::
hidden (::std::unique_ptr< HiddenType > x)
{
  this->hidden_.set (std::move (x));
}

const GlobalFolderOptionsVistaProperties_t::HideFileExtType& GlobalFolderOptionsVistaProperties_t::
hideFileExt () const
{
  return this->hideFileExt_.get ();
}

GlobalFolderOptionsVistaProperties_t::HideFileExtType& GlobalFolderOptionsVistaProperties_t::
hideFileExt ()
{
  return this->hideFileExt_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
hideFileExt (const HideFileExtType& x)
{
  this->hideFileExt_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ShowSuperHiddenType& GlobalFolderOptionsVistaProperties_t::
showSuperHidden () const
{
  return this->showSuperHidden_.get ();
}

GlobalFolderOptionsVistaProperties_t::ShowSuperHiddenType& GlobalFolderOptionsVistaProperties_t::
showSuperHidden ()
{
  return this->showSuperHidden_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
showSuperHidden (const ShowSuperHiddenType& x)
{
  this->showSuperHidden_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::SeparateProcessType& GlobalFolderOptionsVistaProperties_t::
separateProcess () const
{
  return this->separateProcess_.get ();
}

GlobalFolderOptionsVistaProperties_t::SeparateProcessType& GlobalFolderOptionsVistaProperties_t::
separateProcess ()
{
  return this->separateProcess_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
separateProcess (const SeparateProcessType& x)
{
  this->separateProcess_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ClassicViewStateType& GlobalFolderOptionsVistaProperties_t::
classicViewState () const
{
  return this->classicViewState_.get ();
}

GlobalFolderOptionsVistaProperties_t::ClassicViewStateType& GlobalFolderOptionsVistaProperties_t::
classicViewState ()
{
  return this->classicViewState_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
classicViewState (const ClassicViewStateType& x)
{
  this->classicViewState_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::PersistBrowsersType& GlobalFolderOptionsVistaProperties_t::
persistBrowsers () const
{
  return this->persistBrowsers_.get ();
}

GlobalFolderOptionsVistaProperties_t::PersistBrowsersType& GlobalFolderOptionsVistaProperties_t::
persistBrowsers ()
{
  return this->persistBrowsers_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
persistBrowsers (const PersistBrowsersType& x)
{
  this->persistBrowsers_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ShowDriveLetterType& GlobalFolderOptionsVistaProperties_t::
showDriveLetter () const
{
  return this->showDriveLetter_.get ();
}

GlobalFolderOptionsVistaProperties_t::ShowDriveLetterType& GlobalFolderOptionsVistaProperties_t::
showDriveLetter ()
{
  return this->showDriveLetter_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
showDriveLetter (const ShowDriveLetterType& x)
{
  this->showDriveLetter_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ShowCompColorType& GlobalFolderOptionsVistaProperties_t::
showCompColor () const
{
  return this->showCompColor_.get ();
}

GlobalFolderOptionsVistaProperties_t::ShowCompColorType& GlobalFolderOptionsVistaProperties_t::
showCompColor ()
{
  return this->showCompColor_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
showCompColor (const ShowCompColorType& x)
{
  this->showCompColor_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ShowInfoTipType& GlobalFolderOptionsVistaProperties_t::
showInfoTip () const
{
  return this->showInfoTip_.get ();
}

GlobalFolderOptionsVistaProperties_t::ShowInfoTipType& GlobalFolderOptionsVistaProperties_t::
showInfoTip ()
{
  return this->showInfoTip_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
showInfoTip (const ShowInfoTipType& x)
{
  this->showInfoTip_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ShowPreviewHandlersType& GlobalFolderOptionsVistaProperties_t::
showPreviewHandlers () const
{
  return this->showPreviewHandlers_.get ();
}

GlobalFolderOptionsVistaProperties_t::ShowPreviewHandlersType& GlobalFolderOptionsVistaProperties_t::
showPreviewHandlers ()
{
  return this->showPreviewHandlers_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
showPreviewHandlers (const ShowPreviewHandlersType& x)
{
  this->showPreviewHandlers_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::UseCheckBoxesType& GlobalFolderOptionsVistaProperties_t::
useCheckBoxes () const
{
  return this->useCheckBoxes_.get ();
}

GlobalFolderOptionsVistaProperties_t::UseCheckBoxesType& GlobalFolderOptionsVistaProperties_t::
useCheckBoxes ()
{
  return this->useCheckBoxes_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
useCheckBoxes (const UseCheckBoxesType& x)
{
  this->useCheckBoxes_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::UseSharingWizardType& GlobalFolderOptionsVistaProperties_t::
useSharingWizard () const
{
  return this->useSharingWizard_.get ();
}

GlobalFolderOptionsVistaProperties_t::UseSharingWizardType& GlobalFolderOptionsVistaProperties_t::
useSharingWizard ()
{
  return this->useSharingWizard_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
useSharingWizard (const UseSharingWizardType& x)
{
  this->useSharingWizard_.set (x);
}

const GlobalFolderOptionsVistaProperties_t::ListViewTypingType& GlobalFolderOptionsVistaProperties_t::
listViewTyping () const
{
  return this->listViewTyping_.get ();
}

GlobalFolderOptionsVistaProperties_t::ListViewTypingType& GlobalFolderOptionsVistaProperties_t::
listViewTyping ()
{
  return this->listViewTyping_.get ();
}

void GlobalFolderOptionsVistaProperties_t::
listViewTyping (const ListViewTypingType& x)
{
  this->listViewTyping_.set (x);
}

void GlobalFolderOptionsVistaProperties_t::
listViewTyping (::std::unique_ptr< ListViewTypingType > x)
{
  this->listViewTyping_.set (std::move (x));
}

const GlobalFolderOptionsVistaProperties_t::DisabledOptional& GlobalFolderOptionsVistaProperties_t::
disabled () const
{
  return this->disabled_;
}

GlobalFolderOptionsVistaProperties_t::DisabledOptional& GlobalFolderOptionsVistaProperties_t::
disabled ()
{
  return this->disabled_;
}

void GlobalFolderOptionsVistaProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void GlobalFolderOptionsVistaProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// GlobalFolderOptionsVista_t
// 

const GlobalFolderOptionsVista_t::FiltersType& GlobalFolderOptionsVista_t::
Filters () const
{
  return this->Filters_.get ();
}

GlobalFolderOptionsVista_t::FiltersType& GlobalFolderOptionsVista_t::
Filters ()
{
  return this->Filters_.get ();
}

void GlobalFolderOptionsVista_t::
Filters (const FiltersType& x)
{
  this->Filters_.set (x);
}

void GlobalFolderOptionsVista_t::
Filters (::std::unique_ptr< FiltersType > x)
{
  this->Filters_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::PropertiesType& GlobalFolderOptionsVista_t::
Properties () const
{
  return this->Properties_.get ();
}

GlobalFolderOptionsVista_t::PropertiesType& GlobalFolderOptionsVista_t::
Properties ()
{
  return this->Properties_.get ();
}

void GlobalFolderOptionsVista_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void GlobalFolderOptionsVista_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::ClsidType& GlobalFolderOptionsVista_t::
clsid () const
{
  return this->clsid_.get ();
}

GlobalFolderOptionsVista_t::ClsidType& GlobalFolderOptionsVista_t::
clsid ()
{
  return this->clsid_.get ();
}

void GlobalFolderOptionsVista_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void GlobalFolderOptionsVista_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::ImageOptional& GlobalFolderOptionsVista_t::
image () const
{
  return this->image_;
}

GlobalFolderOptionsVista_t::ImageOptional& GlobalFolderOptionsVista_t::
image ()
{
  return this->image_;
}

void GlobalFolderOptionsVista_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void GlobalFolderOptionsVista_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const GlobalFolderOptionsVista_t::NameType& GlobalFolderOptionsVista_t::
name () const
{
  return this->name_.get ();
}

GlobalFolderOptionsVista_t::NameType& GlobalFolderOptionsVista_t::
name ()
{
  return this->name_.get ();
}

void GlobalFolderOptionsVista_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void GlobalFolderOptionsVista_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::ChangedOptional& GlobalFolderOptionsVista_t::
changed () const
{
  return this->changed_;
}

GlobalFolderOptionsVista_t::ChangedOptional& GlobalFolderOptionsVista_t::
changed ()
{
  return this->changed_;
}

void GlobalFolderOptionsVista_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void GlobalFolderOptionsVista_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void GlobalFolderOptionsVista_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::UidType& GlobalFolderOptionsVista_t::
uid () const
{
  return this->uid_.get ();
}

GlobalFolderOptionsVista_t::UidType& GlobalFolderOptionsVista_t::
uid ()
{
  return this->uid_.get ();
}

void GlobalFolderOptionsVista_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void GlobalFolderOptionsVista_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::DescOptional& GlobalFolderOptionsVista_t::
desc () const
{
  return this->desc_;
}

GlobalFolderOptionsVista_t::DescOptional& GlobalFolderOptionsVista_t::
desc ()
{
  return this->desc_;
}

void GlobalFolderOptionsVista_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void GlobalFolderOptionsVista_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void GlobalFolderOptionsVista_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const GlobalFolderOptionsVista_t::BypassErrorsOptional& GlobalFolderOptionsVista_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

GlobalFolderOptionsVista_t::BypassErrorsOptional& GlobalFolderOptionsVista_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void GlobalFolderOptionsVista_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void GlobalFolderOptionsVista_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const GlobalFolderOptionsVista_t::UserContextOptional& GlobalFolderOptionsVista_t::
userContext () const
{
  return this->userContext_;
}

GlobalFolderOptionsVista_t::UserContextOptional& GlobalFolderOptionsVista_t::
userContext ()
{
  return this->userContext_;
}

void GlobalFolderOptionsVista_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void GlobalFolderOptionsVista_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const GlobalFolderOptionsVista_t::RemovePolicyOptional& GlobalFolderOptionsVista_t::
removePolicy () const
{
  return this->removePolicy_;
}

GlobalFolderOptionsVista_t::RemovePolicyOptional& GlobalFolderOptionsVista_t::
removePolicy ()
{
  return this->removePolicy_;
}

void GlobalFolderOptionsVista_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void GlobalFolderOptionsVista_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// OpenWithProperties_t
// 

const OpenWithProperties_t::ActionOptional& OpenWithProperties_t::
action () const
{
  return this->action_;
}

OpenWithProperties_t::ActionOptional& OpenWithProperties_t::
action ()
{
  return this->action_;
}

void OpenWithProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void OpenWithProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void OpenWithProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const OpenWithProperties_t::FileExtensionType& OpenWithProperties_t::
fileExtension () const
{
  return this->fileExtension_.get ();
}

OpenWithProperties_t::FileExtensionType& OpenWithProperties_t::
fileExtension ()
{
  return this->fileExtension_.get ();
}

void OpenWithProperties_t::
fileExtension (const FileExtensionType& x)
{
  this->fileExtension_.set (x);
}

void OpenWithProperties_t::
fileExtension (::std::unique_ptr< FileExtensionType > x)
{
  this->fileExtension_.set (std::move (x));
}

const OpenWithProperties_t::ApplicationPathType& OpenWithProperties_t::
applicationPath () const
{
  return this->applicationPath_.get ();
}

OpenWithProperties_t::ApplicationPathType& OpenWithProperties_t::
applicationPath ()
{
  return this->applicationPath_.get ();
}

void OpenWithProperties_t::
applicationPath (const ApplicationPathType& x)
{
  this->applicationPath_.set (x);
}

void OpenWithProperties_t::
applicationPath (::std::unique_ptr< ApplicationPathType > x)
{
  this->applicationPath_.set (std::move (x));
}

const OpenWithProperties_t::DefaultOptional& OpenWithProperties_t::
default_ () const
{
  return this->default__;
}

OpenWithProperties_t::DefaultOptional& OpenWithProperties_t::
default_ ()
{
  return this->default__;
}

void OpenWithProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void OpenWithProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const OpenWithProperties_t::DisabledOptional& OpenWithProperties_t::
disabled () const
{
  return this->disabled_;
}

OpenWithProperties_t::DisabledOptional& OpenWithProperties_t::
disabled ()
{
  return this->disabled_;
}

void OpenWithProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void OpenWithProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// OpenWith_t
// 

const OpenWith_t::PropertiesType& OpenWith_t::
Properties () const
{
  return this->Properties_.get ();
}

OpenWith_t::PropertiesType& OpenWith_t::
Properties ()
{
  return this->Properties_.get ();
}

void OpenWith_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void OpenWith_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const OpenWith_t::ClsidType& OpenWith_t::
clsid () const
{
  return this->clsid_.get ();
}

OpenWith_t::ClsidType& OpenWith_t::
clsid ()
{
  return this->clsid_.get ();
}

void OpenWith_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void OpenWith_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const OpenWith_t::NameType& OpenWith_t::
name () const
{
  return this->name_.get ();
}

OpenWith_t::NameType& OpenWith_t::
name ()
{
  return this->name_.get ();
}

void OpenWith_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void OpenWith_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const OpenWith_t::ImageOptional& OpenWith_t::
image () const
{
  return this->image_;
}

OpenWith_t::ImageOptional& OpenWith_t::
image ()
{
  return this->image_;
}

void OpenWith_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void OpenWith_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const OpenWith_t::ChangedOptional& OpenWith_t::
changed () const
{
  return this->changed_;
}

OpenWith_t::ChangedOptional& OpenWith_t::
changed ()
{
  return this->changed_;
}

void OpenWith_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void OpenWith_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void OpenWith_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const OpenWith_t::UidType& OpenWith_t::
uid () const
{
  return this->uid_.get ();
}

OpenWith_t::UidType& OpenWith_t::
uid ()
{
  return this->uid_.get ();
}

void OpenWith_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void OpenWith_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const OpenWith_t::DescOptional& OpenWith_t::
desc () const
{
  return this->desc_;
}

OpenWith_t::DescOptional& OpenWith_t::
desc ()
{
  return this->desc_;
}

void OpenWith_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void OpenWith_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void OpenWith_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const OpenWith_t::BypassErrorsOptional& OpenWith_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

OpenWith_t::BypassErrorsOptional& OpenWith_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void OpenWith_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void OpenWith_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const OpenWith_t::UserContextOptional& OpenWith_t::
userContext () const
{
  return this->userContext_;
}

OpenWith_t::UserContextOptional& OpenWith_t::
userContext ()
{
  return this->userContext_;
}

void OpenWith_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void OpenWith_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const OpenWith_t::RemovePolicyOptional& OpenWith_t::
removePolicy () const
{
  return this->removePolicy_;
}

OpenWith_t::RemovePolicyOptional& OpenWith_t::
removePolicy ()
{
  return this->removePolicy_;
}

void OpenWith_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void OpenWith_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// FileTypeProperties_t
// 

const FileTypeProperties_t::ActionOptional& FileTypeProperties_t::
action () const
{
  return this->action_;
}

FileTypeProperties_t::ActionOptional& FileTypeProperties_t::
action ()
{
  return this->action_;
}

void FileTypeProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void FileTypeProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void FileTypeProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const FileTypeProperties_t::FileExtType& FileTypeProperties_t::
fileExt () const
{
  return this->fileExt_.get ();
}

FileTypeProperties_t::FileExtType& FileTypeProperties_t::
fileExt ()
{
  return this->fileExt_.get ();
}

void FileTypeProperties_t::
fileExt (const FileExtType& x)
{
  this->fileExt_.set (x);
}

void FileTypeProperties_t::
fileExt (::std::unique_ptr< FileExtType > x)
{
  this->fileExt_.set (std::move (x));
}

const FileTypeProperties_t::ApplicationType& FileTypeProperties_t::
application () const
{
  return this->application_.get ();
}

FileTypeProperties_t::ApplicationType& FileTypeProperties_t::
application ()
{
  return this->application_.get ();
}

void FileTypeProperties_t::
application (const ApplicationType& x)
{
  this->application_.set (x);
}

void FileTypeProperties_t::
application (::std::unique_ptr< ApplicationType > x)
{
  this->application_.set (std::move (x));
}

const FileTypeProperties_t::AppProgIDType& FileTypeProperties_t::
appProgID () const
{
  return this->appProgID_.get ();
}

FileTypeProperties_t::AppProgIDType& FileTypeProperties_t::
appProgID ()
{
  return this->appProgID_.get ();
}

void FileTypeProperties_t::
appProgID (const AppProgIDType& x)
{
  this->appProgID_.set (x);
}

void FileTypeProperties_t::
appProgID (::std::unique_ptr< AppProgIDType > x)
{
  this->appProgID_.set (std::move (x));
}

const FileTypeProperties_t::ConfigActionsType& FileTypeProperties_t::
configActions () const
{
  return this->configActions_.get ();
}

FileTypeProperties_t::ConfigActionsType& FileTypeProperties_t::
configActions ()
{
  return this->configActions_.get ();
}

void FileTypeProperties_t::
configActions (const ConfigActionsType& x)
{
  this->configActions_.set (x);
}

const FileTypeProperties_t::IconPathOptional& FileTypeProperties_t::
iconPath () const
{
  return this->iconPath_;
}

FileTypeProperties_t::IconPathOptional& FileTypeProperties_t::
iconPath ()
{
  return this->iconPath_;
}

void FileTypeProperties_t::
iconPath (const IconPathType& x)
{
  this->iconPath_.set (x);
}

void FileTypeProperties_t::
iconPath (const IconPathOptional& x)
{
  this->iconPath_ = x;
}

void FileTypeProperties_t::
iconPath (::std::unique_ptr< IconPathType > x)
{
  this->iconPath_.set (std::move (x));
}

const FileTypeProperties_t::IconIndexOptional& FileTypeProperties_t::
iconIndex () const
{
  return this->iconIndex_;
}

FileTypeProperties_t::IconIndexOptional& FileTypeProperties_t::
iconIndex ()
{
  return this->iconIndex_;
}

void FileTypeProperties_t::
iconIndex (const IconIndexType& x)
{
  this->iconIndex_.set (x);
}

void FileTypeProperties_t::
iconIndex (const IconIndexOptional& x)
{
  this->iconIndex_ = x;
}

void FileTypeProperties_t::
iconIndex (::std::unique_ptr< IconIndexType > x)
{
  this->iconIndex_.set (std::move (x));
}

const FileTypeProperties_t::ConfirmOpenOptional& FileTypeProperties_t::
confirmOpen () const
{
  return this->confirmOpen_;
}

FileTypeProperties_t::ConfirmOpenOptional& FileTypeProperties_t::
confirmOpen ()
{
  return this->confirmOpen_;
}

void FileTypeProperties_t::
confirmOpen (const ConfirmOpenType& x)
{
  this->confirmOpen_.set (x);
}

void FileTypeProperties_t::
confirmOpen (const ConfirmOpenOptional& x)
{
  this->confirmOpen_ = x;
}

const FileTypeProperties_t::AlwaysShowOptional& FileTypeProperties_t::
alwaysShow () const
{
  return this->alwaysShow_;
}

FileTypeProperties_t::AlwaysShowOptional& FileTypeProperties_t::
alwaysShow ()
{
  return this->alwaysShow_;
}

void FileTypeProperties_t::
alwaysShow (const AlwaysShowType& x)
{
  this->alwaysShow_.set (x);
}

void FileTypeProperties_t::
alwaysShow (const AlwaysShowOptional& x)
{
  this->alwaysShow_ = x;
}

const FileTypeProperties_t::SameWindowOptional& FileTypeProperties_t::
sameWindow () const
{
  return this->sameWindow_;
}

FileTypeProperties_t::SameWindowOptional& FileTypeProperties_t::
sameWindow ()
{
  return this->sameWindow_;
}

void FileTypeProperties_t::
sameWindow (const SameWindowType& x)
{
  this->sameWindow_.set (x);
}

void FileTypeProperties_t::
sameWindow (const SameWindowOptional& x)
{
  this->sameWindow_ = x;
}

const FileTypeProperties_t::NameOptional& FileTypeProperties_t::
name () const
{
  return this->name_;
}

FileTypeProperties_t::NameOptional& FileTypeProperties_t::
name ()
{
  return this->name_;
}

void FileTypeProperties_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void FileTypeProperties_t::
name (const NameOptional& x)
{
  this->name_ = x;
}

void FileTypeProperties_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const FileTypeProperties_t::AppUsedOptional& FileTypeProperties_t::
appUsed () const
{
  return this->appUsed_;
}

FileTypeProperties_t::AppUsedOptional& FileTypeProperties_t::
appUsed ()
{
  return this->appUsed_;
}

void FileTypeProperties_t::
appUsed (const AppUsedType& x)
{
  this->appUsed_.set (x);
}

void FileTypeProperties_t::
appUsed (const AppUsedOptional& x)
{
  this->appUsed_ = x;
}

void FileTypeProperties_t::
appUsed (::std::unique_ptr< AppUsedType > x)
{
  this->appUsed_.set (std::move (x));
}

const FileTypeProperties_t::DefaultOptional& FileTypeProperties_t::
default_ () const
{
  return this->default__;
}

FileTypeProperties_t::DefaultOptional& FileTypeProperties_t::
default_ ()
{
  return this->default__;
}

void FileTypeProperties_t::
default_ (const DefaultType& x)
{
  this->default__.set (x);
}

void FileTypeProperties_t::
default_ (const DefaultOptional& x)
{
  this->default__ = x;
}

const FileTypeProperties_t::UseDDEOptional& FileTypeProperties_t::
useDDE () const
{
  return this->useDDE_;
}

FileTypeProperties_t::UseDDEOptional& FileTypeProperties_t::
useDDE ()
{
  return this->useDDE_;
}

void FileTypeProperties_t::
useDDE (const UseDDEType& x)
{
  this->useDDE_.set (x);
}

void FileTypeProperties_t::
useDDE (const UseDDEOptional& x)
{
  this->useDDE_ = x;
}

const FileTypeProperties_t::DdeMessageOptional& FileTypeProperties_t::
ddeMessage () const
{
  return this->ddeMessage_;
}

FileTypeProperties_t::DdeMessageOptional& FileTypeProperties_t::
ddeMessage ()
{
  return this->ddeMessage_;
}

void FileTypeProperties_t::
ddeMessage (const DdeMessageType& x)
{
  this->ddeMessage_.set (x);
}

void FileTypeProperties_t::
ddeMessage (const DdeMessageOptional& x)
{
  this->ddeMessage_ = x;
}

void FileTypeProperties_t::
ddeMessage (::std::unique_ptr< DdeMessageType > x)
{
  this->ddeMessage_.set (std::move (x));
}

const FileTypeProperties_t::DdeApplicationOptional& FileTypeProperties_t::
ddeApplication () const
{
  return this->ddeApplication_;
}

FileTypeProperties_t::DdeApplicationOptional& FileTypeProperties_t::
ddeApplication ()
{
  return this->ddeApplication_;
}

void FileTypeProperties_t::
ddeApplication (const DdeApplicationType& x)
{
  this->ddeApplication_.set (x);
}

void FileTypeProperties_t::
ddeApplication (const DdeApplicationOptional& x)
{
  this->ddeApplication_ = x;
}

void FileTypeProperties_t::
ddeApplication (::std::unique_ptr< DdeApplicationType > x)
{
  this->ddeApplication_.set (std::move (x));
}

const FileTypeProperties_t::DdeAppNotRunningOptional& FileTypeProperties_t::
ddeAppNotRunning () const
{
  return this->ddeAppNotRunning_;
}

FileTypeProperties_t::DdeAppNotRunningOptional& FileTypeProperties_t::
ddeAppNotRunning ()
{
  return this->ddeAppNotRunning_;
}

void FileTypeProperties_t::
ddeAppNotRunning (const DdeAppNotRunningType& x)
{
  this->ddeAppNotRunning_.set (x);
}

void FileTypeProperties_t::
ddeAppNotRunning (const DdeAppNotRunningOptional& x)
{
  this->ddeAppNotRunning_ = x;
}

void FileTypeProperties_t::
ddeAppNotRunning (::std::unique_ptr< DdeAppNotRunningType > x)
{
  this->ddeAppNotRunning_.set (std::move (x));
}

const FileTypeProperties_t::DdeTopicOptional& FileTypeProperties_t::
ddeTopic () const
{
  return this->ddeTopic_;
}

FileTypeProperties_t::DdeTopicOptional& FileTypeProperties_t::
ddeTopic ()
{
  return this->ddeTopic_;
}

void FileTypeProperties_t::
ddeTopic (const DdeTopicType& x)
{
  this->ddeTopic_.set (x);
}

void FileTypeProperties_t::
ddeTopic (const DdeTopicOptional& x)
{
  this->ddeTopic_ = x;
}

void FileTypeProperties_t::
ddeTopic (::std::unique_ptr< DdeTopicType > x)
{
  this->ddeTopic_.set (std::move (x));
}

const FileTypeProperties_t::DisabledOptional& FileTypeProperties_t::
disabled () const
{
  return this->disabled_;
}

FileTypeProperties_t::DisabledOptional& FileTypeProperties_t::
disabled ()
{
  return this->disabled_;
}

void FileTypeProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void FileTypeProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// FileType_t
// 

const FileType_t::PropertiesType& FileType_t::
Properties () const
{
  return this->Properties_.get ();
}

FileType_t::PropertiesType& FileType_t::
Properties ()
{
  return this->Properties_.get ();
}

void FileType_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void FileType_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const FileType_t::ClsidType& FileType_t::
clsid () const
{
  return this->clsid_.get ();
}

FileType_t::ClsidType& FileType_t::
clsid ()
{
  return this->clsid_.get ();
}

void FileType_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void FileType_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const FileType_t::NameType& FileType_t::
name () const
{
  return this->name_.get ();
}

FileType_t::NameType& FileType_t::
name ()
{
  return this->name_.get ();
}

void FileType_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void FileType_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const FileType_t::ImageOptional& FileType_t::
image () const
{
  return this->image_;
}

FileType_t::ImageOptional& FileType_t::
image ()
{
  return this->image_;
}

void FileType_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void FileType_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const FileType_t::ChangedOptional& FileType_t::
changed () const
{
  return this->changed_;
}

FileType_t::ChangedOptional& FileType_t::
changed ()
{
  return this->changed_;
}

void FileType_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void FileType_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void FileType_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const FileType_t::UidType& FileType_t::
uid () const
{
  return this->uid_.get ();
}

FileType_t::UidType& FileType_t::
uid ()
{
  return this->uid_.get ();
}

void FileType_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void FileType_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const FileType_t::DescOptional& FileType_t::
desc () const
{
  return this->desc_;
}

FileType_t::DescOptional& FileType_t::
desc ()
{
  return this->desc_;
}

void FileType_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void FileType_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void FileType_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const FileType_t::BypassErrorsOptional& FileType_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

FileType_t::BypassErrorsOptional& FileType_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void FileType_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void FileType_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const FileType_t::UserContextOptional& FileType_t::
userContext () const
{
  return this->userContext_;
}

FileType_t::UserContextOptional& FileType_t::
userContext ()
{
  return this->userContext_;
}

void FileType_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void FileType_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const FileType_t::RemovePolicyOptional& FileType_t::
removePolicy () const
{
  return this->removePolicy_;
}

FileType_t::RemovePolicyOptional& FileType_t::
removePolicy ()
{
  return this->removePolicy_;
}

void FileType_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void FileType_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// FolderOptions
// 

const FolderOptions::GlobalFolderOptionsType& FolderOptions::
GlobalFolderOptions () const
{
  return this->GlobalFolderOptions_.get ();
}

FolderOptions::GlobalFolderOptionsType& FolderOptions::
GlobalFolderOptions ()
{
  return this->GlobalFolderOptions_.get ();
}

void FolderOptions::
GlobalFolderOptions (const GlobalFolderOptionsType& x)
{
  this->GlobalFolderOptions_.set (x);
}

void FolderOptions::
GlobalFolderOptions (::std::unique_ptr< GlobalFolderOptionsType > x)
{
  this->GlobalFolderOptions_.set (std::move (x));
}

const FolderOptions::GlobalFolderOptionsVistaType& FolderOptions::
GlobalFolderOptionsVista () const
{
  return this->GlobalFolderOptionsVista_.get ();
}

FolderOptions::GlobalFolderOptionsVistaType& FolderOptions::
GlobalFolderOptionsVista ()
{
  return this->GlobalFolderOptionsVista_.get ();
}

void FolderOptions::
GlobalFolderOptionsVista (const GlobalFolderOptionsVistaType& x)
{
  this->GlobalFolderOptionsVista_.set (x);
}

void FolderOptions::
GlobalFolderOptionsVista (::std::unique_ptr< GlobalFolderOptionsVistaType > x)
{
  this->GlobalFolderOptionsVista_.set (std::move (x));
}

const FolderOptions::OpenWithType& FolderOptions::
OpenWith () const
{
  return this->OpenWith_.get ();
}

FolderOptions::OpenWithType& FolderOptions::
OpenWith ()
{
  return this->OpenWith_.get ();
}

void FolderOptions::
OpenWith (const OpenWithType& x)
{
  this->OpenWith_.set (x);
}

void FolderOptions::
OpenWith (::std::unique_ptr< OpenWithType > x)
{
  this->OpenWith_.set (std::move (x));
}

const FolderOptions::FileTypeType& FolderOptions::
FileType () const
{
  return this->FileType_.get ();
}

FolderOptions::FileTypeType& FolderOptions::
FileType ()
{
  return this->FileType_.get ();
}

void FolderOptions::
FileType (const FileTypeType& x)
{
  this->FileType_.set (x);
}

void FolderOptions::
FileType (::std::unique_ptr< FileTypeType > x)
{
  this->FileType_.set (std::move (x));
}

const FolderOptions::ClsidType& FolderOptions::
clsid () const
{
  return this->clsid_.get ();
}

FolderOptions::ClsidType& FolderOptions::
clsid ()
{
  return this->clsid_.get ();
}

void FolderOptions::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void FolderOptions::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const FolderOptions::DisabledOptional& FolderOptions::
disabled () const
{
  return this->disabled_;
}

FolderOptions::DisabledOptional& FolderOptions::
disabled ()
{
  return this->disabled_;
}

void FolderOptions::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void FolderOptions::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// GlobalFolderOptionsProperties_t
//

GlobalFolderOptionsProperties_t::
GlobalFolderOptionsProperties_t (const NoNetCrawlingType& noNetCrawling,
                                 const FolderContentsInfoTipType& folderContentsInfoTip,
                                 const FriendlyTreeType& friendlyTree,
                                 const FullPathAddressType& fullPathAddress,
                                 const FullPathType& fullPath,
                                 const DisableThumbnailCacheType& disableThumbnailCache,
                                 const HiddenType& hidden,
                                 const HideFileExtType& hideFileExt,
                                 const SeparateProcessType& separateProcess,
                                 const ShowSuperHiddenType& showSuperHidden,
                                 const ClassicViewStateType& classicViewState,
                                 const PersistBrowsersType& persistBrowsers,
                                 const ShowControlPanelType& showControlPanel,
                                 const ShowCompColorType& showCompColor,
                                 const ShowInfoTipType& showInfoTip,
                                 const ForceGuestType& forceGuest,
                                 const WebViewBarricadeType& webViewBarricade)
: ::xml_schema::Type (),
  noNetCrawling_ (noNetCrawling, this),
  folderContentsInfoTip_ (folderContentsInfoTip, this),
  friendlyTree_ (friendlyTree, this),
  fullPathAddress_ (fullPathAddress, this),
  fullPath_ (fullPath, this),
  disableThumbnailCache_ (disableThumbnailCache, this),
  hidden_ (hidden, this),
  hideFileExt_ (hideFileExt, this),
  separateProcess_ (separateProcess, this),
  showSuperHidden_ (showSuperHidden, this),
  classicViewState_ (classicViewState, this),
  persistBrowsers_ (persistBrowsers, this),
  showControlPanel_ (showControlPanel, this),
  showCompColor_ (showCompColor, this),
  showInfoTip_ (showInfoTip, this),
  forceGuest_ (forceGuest, this),
  webViewBarricade_ (webViewBarricade, this),
  disabled_ (this)
{
}

GlobalFolderOptionsProperties_t::
GlobalFolderOptionsProperties_t (const GlobalFolderOptionsProperties_t& x,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  noNetCrawling_ (x.noNetCrawling_, f, this),
  folderContentsInfoTip_ (x.folderContentsInfoTip_, f, this),
  friendlyTree_ (x.friendlyTree_, f, this),
  fullPathAddress_ (x.fullPathAddress_, f, this),
  fullPath_ (x.fullPath_, f, this),
  disableThumbnailCache_ (x.disableThumbnailCache_, f, this),
  hidden_ (x.hidden_, f, this),
  hideFileExt_ (x.hideFileExt_, f, this),
  separateProcess_ (x.separateProcess_, f, this),
  showSuperHidden_ (x.showSuperHidden_, f, this),
  classicViewState_ (x.classicViewState_, f, this),
  persistBrowsers_ (x.persistBrowsers_, f, this),
  showControlPanel_ (x.showControlPanel_, f, this),
  showCompColor_ (x.showCompColor_, f, this),
  showInfoTip_ (x.showInfoTip_, f, this),
  forceGuest_ (x.forceGuest_, f, this),
  webViewBarricade_ (x.webViewBarricade_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

GlobalFolderOptionsProperties_t::
GlobalFolderOptionsProperties_t (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f,
                                 ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  noNetCrawling_ (this),
  folderContentsInfoTip_ (this),
  friendlyTree_ (this),
  fullPathAddress_ (this),
  fullPath_ (this),
  disableThumbnailCache_ (this),
  hidden_ (this),
  hideFileExt_ (this),
  separateProcess_ (this),
  showSuperHidden_ (this),
  classicViewState_ (this),
  persistBrowsers_ (this),
  showControlPanel_ (this),
  showCompColor_ (this),
  showInfoTip_ (this),
  forceGuest_ (this),
  webViewBarricade_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void GlobalFolderOptionsProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "noNetCrawling" && n.namespace_ ().empty ())
    {
      this->noNetCrawling_.set (NoNetCrawlingTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "folderContentsInfoTip" && n.namespace_ ().empty ())
    {
      this->folderContentsInfoTip_.set (FolderContentsInfoTipTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "friendlyTree" && n.namespace_ ().empty ())
    {
      this->friendlyTree_.set (FriendlyTreeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "fullPathAddress" && n.namespace_ ().empty ())
    {
      this->fullPathAddress_.set (FullPathAddressTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "fullPath" && n.namespace_ ().empty ())
    {
      this->fullPath_.set (FullPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disableThumbnailCache" && n.namespace_ ().empty ())
    {
      this->disableThumbnailCache_.set (DisableThumbnailCacheTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hidden" && n.namespace_ ().empty ())
    {
      this->hidden_.set (HiddenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hideFileExt" && n.namespace_ ().empty ())
    {
      this->hideFileExt_.set (HideFileExtTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "separateProcess" && n.namespace_ ().empty ())
    {
      this->separateProcess_.set (SeparateProcessTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showSuperHidden" && n.namespace_ ().empty ())
    {
      this->showSuperHidden_.set (ShowSuperHiddenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "classicViewState" && n.namespace_ ().empty ())
    {
      this->classicViewState_.set (ClassicViewStateTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "persistBrowsers" && n.namespace_ ().empty ())
    {
      this->persistBrowsers_.set (PersistBrowsersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showControlPanel" && n.namespace_ ().empty ())
    {
      this->showControlPanel_.set (ShowControlPanelTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showCompColor" && n.namespace_ ().empty ())
    {
      this->showCompColor_.set (ShowCompColorTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showInfoTip" && n.namespace_ ().empty ())
    {
      this->showInfoTip_.set (ShowInfoTipTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "forceGuest" && n.namespace_ ().empty ())
    {
      this->forceGuest_.set (ForceGuestTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "webViewBarricade" && n.namespace_ ().empty ())
    {
      this->webViewBarricade_.set (WebViewBarricadeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!noNetCrawling_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "noNetCrawling",
      "");
  }

  if (!folderContentsInfoTip_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "folderContentsInfoTip",
      "");
  }

  if (!friendlyTree_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "friendlyTree",
      "");
  }

  if (!fullPathAddress_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fullPathAddress",
      "");
  }

  if (!fullPath_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fullPath",
      "");
  }

  if (!disableThumbnailCache_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "disableThumbnailCache",
      "");
  }

  if (!hidden_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hidden",
      "");
  }

  if (!hideFileExt_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hideFileExt",
      "");
  }

  if (!separateProcess_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "separateProcess",
      "");
  }

  if (!showSuperHidden_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showSuperHidden",
      "");
  }

  if (!classicViewState_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "classicViewState",
      "");
  }

  if (!persistBrowsers_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "persistBrowsers",
      "");
  }

  if (!showControlPanel_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showControlPanel",
      "");
  }

  if (!showCompColor_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showCompColor",
      "");
  }

  if (!showInfoTip_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showInfoTip",
      "");
  }

  if (!forceGuest_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "forceGuest",
      "");
  }

  if (!webViewBarricade_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "webViewBarricade",
      "");
  }
}

GlobalFolderOptionsProperties_t* GlobalFolderOptionsProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalFolderOptionsProperties_t (*this, f, c);
}

GlobalFolderOptionsProperties_t& GlobalFolderOptionsProperties_t::
operator= (const GlobalFolderOptionsProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->noNetCrawling_ = x.noNetCrawling_;
    this->folderContentsInfoTip_ = x.folderContentsInfoTip_;
    this->friendlyTree_ = x.friendlyTree_;
    this->fullPathAddress_ = x.fullPathAddress_;
    this->fullPath_ = x.fullPath_;
    this->disableThumbnailCache_ = x.disableThumbnailCache_;
    this->hidden_ = x.hidden_;
    this->hideFileExt_ = x.hideFileExt_;
    this->separateProcess_ = x.separateProcess_;
    this->showSuperHidden_ = x.showSuperHidden_;
    this->classicViewState_ = x.classicViewState_;
    this->persistBrowsers_ = x.persistBrowsers_;
    this->showControlPanel_ = x.showControlPanel_;
    this->showCompColor_ = x.showCompColor_;
    this->showInfoTip_ = x.showInfoTip_;
    this->forceGuest_ = x.forceGuest_;
    this->webViewBarricade_ = x.webViewBarricade_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

GlobalFolderOptionsProperties_t::
~GlobalFolderOptionsProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalFolderOptionsProperties_t >
_xsd_GlobalFolderOptionsProperties_t_type_factory_init (
  "GlobalFolderOptionsProperties_t",
  "");

// GlobalFolderOptions_t
//

GlobalFolderOptions_t::
GlobalFolderOptions_t (const FiltersType& Filters,
                       const PropertiesType& Properties,
                       const ClsidType& clsid,
                       const NameType& name,
                       const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (Filters, this),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  image_ (this),
  name_ (name, this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

GlobalFolderOptions_t::
GlobalFolderOptions_t (::std::unique_ptr< FiltersType > Filters,
                       ::std::unique_ptr< PropertiesType > Properties,
                       const ClsidType& clsid,
                       const NameType& name,
                       const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (std::move (Filters), this),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  image_ (this),
  name_ (name, this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

GlobalFolderOptions_t::
GlobalFolderOptions_t (const GlobalFolderOptions_t& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Filters_ (x.Filters_, f, this),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  image_ (x.image_, f, this),
  name_ (x.name_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

GlobalFolderOptions_t::
GlobalFolderOptions_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Filters_ (this),
  Properties_ (this),
  clsid_ (this),
  image_ (this),
  name_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void GlobalFolderOptions_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Filters
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Filters",
          "",
          &::xsd::cxx::tree::factory_impl< FiltersType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Filters_.present ())
        {
          ::std::unique_ptr< FiltersType > r (
            dynamic_cast< FiltersType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Filters_.set (::std::move (r));
          continue;
        }
      }
    }

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Filters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Filters",
      "");
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

GlobalFolderOptions_t* GlobalFolderOptions_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalFolderOptions_t (*this, f, c);
}

GlobalFolderOptions_t& GlobalFolderOptions_t::
operator= (const GlobalFolderOptions_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Filters_ = x.Filters_;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->image_ = x.image_;
    this->name_ = x.name_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

GlobalFolderOptions_t::
~GlobalFolderOptions_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalFolderOptions_t >
_xsd_GlobalFolderOptions_t_type_factory_init (
  "GlobalFolderOptions_t",
  "");

// GlobalFolderOptionsVistaProperties_t
//

GlobalFolderOptionsVistaProperties_t::
GlobalFolderOptionsVistaProperties_t (const AlwaysShowIconsType& alwaysShowIcons,
                                      const AlwaysShowMenusType& alwaysShowMenus,
                                      const DisplayIconThumbType& displayIconThumb,
                                      const DisplayFileSizeType& displayFileSize,
                                      const DisplaySimpleFoldersType& displaySimpleFolders,
                                      const FullPathType& fullPath,
                                      const HiddenType& hidden,
                                      const HideFileExtType& hideFileExt,
                                      const ShowSuperHiddenType& showSuperHidden,
                                      const SeparateProcessType& separateProcess,
                                      const ClassicViewStateType& classicViewState,
                                      const PersistBrowsersType& persistBrowsers,
                                      const ShowDriveLetterType& showDriveLetter,
                                      const ShowCompColorType& showCompColor,
                                      const ShowInfoTipType& showInfoTip,
                                      const ShowPreviewHandlersType& showPreviewHandlers,
                                      const UseCheckBoxesType& useCheckBoxes,
                                      const UseSharingWizardType& useSharingWizard,
                                      const ListViewTypingType& listViewTyping)
: ::xml_schema::Type (),
  alwaysShowIcons_ (alwaysShowIcons, this),
  alwaysShowMenus_ (alwaysShowMenus, this),
  displayIconThumb_ (displayIconThumb, this),
  displayFileSize_ (displayFileSize, this),
  displaySimpleFolders_ (displaySimpleFolders, this),
  fullPath_ (fullPath, this),
  hidden_ (hidden, this),
  hideFileExt_ (hideFileExt, this),
  showSuperHidden_ (showSuperHidden, this),
  separateProcess_ (separateProcess, this),
  classicViewState_ (classicViewState, this),
  persistBrowsers_ (persistBrowsers, this),
  showDriveLetter_ (showDriveLetter, this),
  showCompColor_ (showCompColor, this),
  showInfoTip_ (showInfoTip, this),
  showPreviewHandlers_ (showPreviewHandlers, this),
  useCheckBoxes_ (useCheckBoxes, this),
  useSharingWizard_ (useSharingWizard, this),
  listViewTyping_ (listViewTyping, this),
  disabled_ (this)
{
}

GlobalFolderOptionsVistaProperties_t::
GlobalFolderOptionsVistaProperties_t (const GlobalFolderOptionsVistaProperties_t& x,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  alwaysShowIcons_ (x.alwaysShowIcons_, f, this),
  alwaysShowMenus_ (x.alwaysShowMenus_, f, this),
  displayIconThumb_ (x.displayIconThumb_, f, this),
  displayFileSize_ (x.displayFileSize_, f, this),
  displaySimpleFolders_ (x.displaySimpleFolders_, f, this),
  fullPath_ (x.fullPath_, f, this),
  hidden_ (x.hidden_, f, this),
  hideFileExt_ (x.hideFileExt_, f, this),
  showSuperHidden_ (x.showSuperHidden_, f, this),
  separateProcess_ (x.separateProcess_, f, this),
  classicViewState_ (x.classicViewState_, f, this),
  persistBrowsers_ (x.persistBrowsers_, f, this),
  showDriveLetter_ (x.showDriveLetter_, f, this),
  showCompColor_ (x.showCompColor_, f, this),
  showInfoTip_ (x.showInfoTip_, f, this),
  showPreviewHandlers_ (x.showPreviewHandlers_, f, this),
  useCheckBoxes_ (x.useCheckBoxes_, f, this),
  useSharingWizard_ (x.useSharingWizard_, f, this),
  listViewTyping_ (x.listViewTyping_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

GlobalFolderOptionsVistaProperties_t::
GlobalFolderOptionsVistaProperties_t (const ::xercesc::DOMElement& e,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  alwaysShowIcons_ (this),
  alwaysShowMenus_ (this),
  displayIconThumb_ (this),
  displayFileSize_ (this),
  displaySimpleFolders_ (this),
  fullPath_ (this),
  hidden_ (this),
  hideFileExt_ (this),
  showSuperHidden_ (this),
  separateProcess_ (this),
  classicViewState_ (this),
  persistBrowsers_ (this),
  showDriveLetter_ (this),
  showCompColor_ (this),
  showInfoTip_ (this),
  showPreviewHandlers_ (this),
  useCheckBoxes_ (this),
  useSharingWizard_ (this),
  listViewTyping_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void GlobalFolderOptionsVistaProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "alwaysShowIcons" && n.namespace_ ().empty ())
    {
      this->alwaysShowIcons_.set (AlwaysShowIconsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "alwaysShowMenus" && n.namespace_ ().empty ())
    {
      this->alwaysShowMenus_.set (AlwaysShowMenusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "displayIconThumb" && n.namespace_ ().empty ())
    {
      this->displayIconThumb_.set (DisplayIconThumbTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "displayFileSize" && n.namespace_ ().empty ())
    {
      this->displayFileSize_.set (DisplayFileSizeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "displaySimpleFolders" && n.namespace_ ().empty ())
    {
      this->displaySimpleFolders_.set (DisplaySimpleFoldersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "fullPath" && n.namespace_ ().empty ())
    {
      this->fullPath_.set (FullPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hidden" && n.namespace_ ().empty ())
    {
      this->hidden_.set (HiddenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "hideFileExt" && n.namespace_ ().empty ())
    {
      this->hideFileExt_.set (HideFileExtTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showSuperHidden" && n.namespace_ ().empty ())
    {
      this->showSuperHidden_.set (ShowSuperHiddenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "separateProcess" && n.namespace_ ().empty ())
    {
      this->separateProcess_.set (SeparateProcessTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "classicViewState" && n.namespace_ ().empty ())
    {
      this->classicViewState_.set (ClassicViewStateTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "persistBrowsers" && n.namespace_ ().empty ())
    {
      this->persistBrowsers_.set (PersistBrowsersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showDriveLetter" && n.namespace_ ().empty ())
    {
      this->showDriveLetter_.set (ShowDriveLetterTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showCompColor" && n.namespace_ ().empty ())
    {
      this->showCompColor_.set (ShowCompColorTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showInfoTip" && n.namespace_ ().empty ())
    {
      this->showInfoTip_.set (ShowInfoTipTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "showPreviewHandlers" && n.namespace_ ().empty ())
    {
      this->showPreviewHandlers_.set (ShowPreviewHandlersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useCheckBoxes" && n.namespace_ ().empty ())
    {
      this->useCheckBoxes_.set (UseCheckBoxesTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useSharingWizard" && n.namespace_ ().empty ())
    {
      this->useSharingWizard_.set (UseSharingWizardTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "listViewTyping" && n.namespace_ ().empty ())
    {
      this->listViewTyping_.set (ListViewTypingTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!alwaysShowIcons_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "alwaysShowIcons",
      "");
  }

  if (!alwaysShowMenus_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "alwaysShowMenus",
      "");
  }

  if (!displayIconThumb_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "displayIconThumb",
      "");
  }

  if (!displayFileSize_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "displayFileSize",
      "");
  }

  if (!displaySimpleFolders_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "displaySimpleFolders",
      "");
  }

  if (!fullPath_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fullPath",
      "");
  }

  if (!hidden_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hidden",
      "");
  }

  if (!hideFileExt_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hideFileExt",
      "");
  }

  if (!showSuperHidden_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showSuperHidden",
      "");
  }

  if (!separateProcess_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "separateProcess",
      "");
  }

  if (!classicViewState_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "classicViewState",
      "");
  }

  if (!persistBrowsers_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "persistBrowsers",
      "");
  }

  if (!showDriveLetter_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showDriveLetter",
      "");
  }

  if (!showCompColor_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showCompColor",
      "");
  }

  if (!showInfoTip_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showInfoTip",
      "");
  }

  if (!showPreviewHandlers_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "showPreviewHandlers",
      "");
  }

  if (!useCheckBoxes_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "useCheckBoxes",
      "");
  }

  if (!useSharingWizard_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "useSharingWizard",
      "");
  }

  if (!listViewTyping_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "listViewTyping",
      "");
  }
}

GlobalFolderOptionsVistaProperties_t* GlobalFolderOptionsVistaProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalFolderOptionsVistaProperties_t (*this, f, c);
}

GlobalFolderOptionsVistaProperties_t& GlobalFolderOptionsVistaProperties_t::
operator= (const GlobalFolderOptionsVistaProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->alwaysShowIcons_ = x.alwaysShowIcons_;
    this->alwaysShowMenus_ = x.alwaysShowMenus_;
    this->displayIconThumb_ = x.displayIconThumb_;
    this->displayFileSize_ = x.displayFileSize_;
    this->displaySimpleFolders_ = x.displaySimpleFolders_;
    this->fullPath_ = x.fullPath_;
    this->hidden_ = x.hidden_;
    this->hideFileExt_ = x.hideFileExt_;
    this->showSuperHidden_ = x.showSuperHidden_;
    this->separateProcess_ = x.separateProcess_;
    this->classicViewState_ = x.classicViewState_;
    this->persistBrowsers_ = x.persistBrowsers_;
    this->showDriveLetter_ = x.showDriveLetter_;
    this->showCompColor_ = x.showCompColor_;
    this->showInfoTip_ = x.showInfoTip_;
    this->showPreviewHandlers_ = x.showPreviewHandlers_;
    this->useCheckBoxes_ = x.useCheckBoxes_;
    this->useSharingWizard_ = x.useSharingWizard_;
    this->listViewTyping_ = x.listViewTyping_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

GlobalFolderOptionsVistaProperties_t::
~GlobalFolderOptionsVistaProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalFolderOptionsVistaProperties_t >
_xsd_GlobalFolderOptionsVistaProperties_t_type_factory_init (
  "GlobalFolderOptionsVistaProperties_t",
  "");

// GlobalFolderOptionsVista_t
//

GlobalFolderOptionsVista_t::
GlobalFolderOptionsVista_t (const FiltersType& Filters,
                            const PropertiesType& Properties,
                            const ClsidType& clsid,
                            const NameType& name,
                            const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (Filters, this),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  image_ (this),
  name_ (name, this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

GlobalFolderOptionsVista_t::
GlobalFolderOptionsVista_t (::std::unique_ptr< FiltersType > Filters,
                            ::std::unique_ptr< PropertiesType > Properties,
                            const ClsidType& clsid,
                            const NameType& name,
                            const UidType& uid)
: ::xml_schema::Type (),
  Filters_ (std::move (Filters), this),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  image_ (this),
  name_ (name, this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

GlobalFolderOptionsVista_t::
GlobalFolderOptionsVista_t (const GlobalFolderOptionsVista_t& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Filters_ (x.Filters_, f, this),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  image_ (x.image_, f, this),
  name_ (x.name_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

GlobalFolderOptionsVista_t::
GlobalFolderOptionsVista_t (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Filters_ (this),
  Properties_ (this),
  clsid_ (this),
  image_ (this),
  name_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void GlobalFolderOptionsVista_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Filters
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Filters",
          "",
          &::xsd::cxx::tree::factory_impl< FiltersType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Filters_.present ())
        {
          ::std::unique_ptr< FiltersType > r (
            dynamic_cast< FiltersType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Filters_.set (::std::move (r));
          continue;
        }
      }
    }

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Filters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Filters",
      "");
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

GlobalFolderOptionsVista_t* GlobalFolderOptionsVista_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GlobalFolderOptionsVista_t (*this, f, c);
}

GlobalFolderOptionsVista_t& GlobalFolderOptionsVista_t::
operator= (const GlobalFolderOptionsVista_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Filters_ = x.Filters_;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->image_ = x.image_;
    this->name_ = x.name_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

GlobalFolderOptionsVista_t::
~GlobalFolderOptionsVista_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GlobalFolderOptionsVista_t >
_xsd_GlobalFolderOptionsVista_t_type_factory_init (
  "GlobalFolderOptionsVista_t",
  "");

// OpenWithProperties_t
//

OpenWithProperties_t::
OpenWithProperties_t (const FileExtensionType& fileExtension,
                      const ApplicationPathType& applicationPath)
: ::xml_schema::Type (),
  action_ (this),
  fileExtension_ (fileExtension, this),
  applicationPath_ (applicationPath, this),
  default__ (this),
  disabled_ (this)
{
}

OpenWithProperties_t::
OpenWithProperties_t (const OpenWithProperties_t& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  fileExtension_ (x.fileExtension_, f, this),
  applicationPath_ (x.applicationPath_, f, this),
  default__ (x.default__, f, this),
  disabled_ (x.disabled_, f, this)
{
}

OpenWithProperties_t::
OpenWithProperties_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  fileExtension_ (this),
  applicationPath_ (this),
  default__ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void OpenWithProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "fileExtension" && n.namespace_ ().empty ())
    {
      this->fileExtension_.set (FileExtensionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "applicationPath" && n.namespace_ ().empty ())
    {
      this->applicationPath_.set (ApplicationPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!fileExtension_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fileExtension",
      "");
  }

  if (!applicationPath_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "applicationPath",
      "");
  }
}

OpenWithProperties_t* OpenWithProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class OpenWithProperties_t (*this, f, c);
}

OpenWithProperties_t& OpenWithProperties_t::
operator= (const OpenWithProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->fileExtension_ = x.fileExtension_;
    this->applicationPath_ = x.applicationPath_;
    this->default__ = x.default__;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

OpenWithProperties_t::
~OpenWithProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, OpenWithProperties_t >
_xsd_OpenWithProperties_t_type_factory_init (
  "OpenWithProperties_t",
  "");

// OpenWith_t
//

OpenWith_t::
OpenWith_t (const PropertiesType& Properties,
            const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

OpenWith_t::
OpenWith_t (::std::unique_ptr< PropertiesType > Properties,
            const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

OpenWith_t::
OpenWith_t (const OpenWith_t& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

OpenWith_t::
OpenWith_t (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void OpenWith_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

OpenWith_t* OpenWith_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class OpenWith_t (*this, f, c);
}

OpenWith_t& OpenWith_t::
operator= (const OpenWith_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

OpenWith_t::
~OpenWith_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, OpenWith_t >
_xsd_OpenWith_t_type_factory_init (
  "OpenWith_t",
  "");

// FileTypeProperties_t
//

FileTypeProperties_t::
FileTypeProperties_t (const FileExtType& fileExt,
                      const ApplicationType& application,
                      const AppProgIDType& appProgID,
                      const ConfigActionsType& configActions)
: ::xml_schema::Type (),
  action_ (this),
  fileExt_ (fileExt, this),
  application_ (application, this),
  appProgID_ (appProgID, this),
  configActions_ (configActions, this),
  iconPath_ (this),
  iconIndex_ (this),
  confirmOpen_ (this),
  alwaysShow_ (this),
  sameWindow_ (this),
  name_ (this),
  appUsed_ (this),
  default__ (this),
  useDDE_ (this),
  ddeMessage_ (this),
  ddeApplication_ (this),
  ddeAppNotRunning_ (this),
  ddeTopic_ (this),
  disabled_ (this)
{
}

FileTypeProperties_t::
FileTypeProperties_t (const FileTypeProperties_t& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  fileExt_ (x.fileExt_, f, this),
  application_ (x.application_, f, this),
  appProgID_ (x.appProgID_, f, this),
  configActions_ (x.configActions_, f, this),
  iconPath_ (x.iconPath_, f, this),
  iconIndex_ (x.iconIndex_, f, this),
  confirmOpen_ (x.confirmOpen_, f, this),
  alwaysShow_ (x.alwaysShow_, f, this),
  sameWindow_ (x.sameWindow_, f, this),
  name_ (x.name_, f, this),
  appUsed_ (x.appUsed_, f, this),
  default__ (x.default__, f, this),
  useDDE_ (x.useDDE_, f, this),
  ddeMessage_ (x.ddeMessage_, f, this),
  ddeApplication_ (x.ddeApplication_, f, this),
  ddeAppNotRunning_ (x.ddeAppNotRunning_, f, this),
  ddeTopic_ (x.ddeTopic_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

FileTypeProperties_t::
FileTypeProperties_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  fileExt_ (this),
  application_ (this),
  appProgID_ (this),
  configActions_ (this),
  iconPath_ (this),
  iconIndex_ (this),
  confirmOpen_ (this),
  alwaysShow_ (this),
  sameWindow_ (this),
  name_ (this),
  appUsed_ (this),
  default__ (this),
  useDDE_ (this),
  ddeMessage_ (this),
  ddeApplication_ (this),
  ddeAppNotRunning_ (this),
  ddeTopic_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void FileTypeProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "fileExt" && n.namespace_ ().empty ())
    {
      this->fileExt_.set (FileExtTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "application" && n.namespace_ ().empty ())
    {
      this->application_.set (ApplicationTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "appProgID" && n.namespace_ ().empty ())
    {
      this->appProgID_.set (AppProgIDTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "configActions" && n.namespace_ ().empty ())
    {
      this->configActions_.set (ConfigActionsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "iconPath" && n.namespace_ ().empty ())
    {
      this->iconPath_.set (IconPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "iconIndex" && n.namespace_ ().empty ())
    {
      this->iconIndex_.set (IconIndexTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "confirmOpen" && n.namespace_ ().empty ())
    {
      this->confirmOpen_.set (ConfirmOpenTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "alwaysShow" && n.namespace_ ().empty ())
    {
      this->alwaysShow_.set (AlwaysShowTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "sameWindow" && n.namespace_ ().empty ())
    {
      this->sameWindow_.set (SameWindowTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "appUsed" && n.namespace_ ().empty ())
    {
      this->appUsed_.set (AppUsedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "default" && n.namespace_ ().empty ())
    {
      this->default__.set (DefaultTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "useDDE" && n.namespace_ ().empty ())
    {
      this->useDDE_.set (UseDDETraits::create (i, f, this));
      continue;
    }

    if (n.name () == "ddeMessage" && n.namespace_ ().empty ())
    {
      this->ddeMessage_.set (DdeMessageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "ddeApplication" && n.namespace_ ().empty ())
    {
      this->ddeApplication_.set (DdeApplicationTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "ddeAppNotRunning" && n.namespace_ ().empty ())
    {
      this->ddeAppNotRunning_.set (DdeAppNotRunningTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "ddeTopic" && n.namespace_ ().empty ())
    {
      this->ddeTopic_.set (DdeTopicTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!fileExt_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fileExt",
      "");
  }

  if (!application_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "application",
      "");
  }

  if (!appProgID_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "appProgID",
      "");
  }

  if (!configActions_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "configActions",
      "");
  }
}

FileTypeProperties_t* FileTypeProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class FileTypeProperties_t (*this, f, c);
}

FileTypeProperties_t& FileTypeProperties_t::
operator= (const FileTypeProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->fileExt_ = x.fileExt_;
    this->application_ = x.application_;
    this->appProgID_ = x.appProgID_;
    this->configActions_ = x.configActions_;
    this->iconPath_ = x.iconPath_;
    this->iconIndex_ = x.iconIndex_;
    this->confirmOpen_ = x.confirmOpen_;
    this->alwaysShow_ = x.alwaysShow_;
    this->sameWindow_ = x.sameWindow_;
    this->name_ = x.name_;
    this->appUsed_ = x.appUsed_;
    this->default__ = x.default__;
    this->useDDE_ = x.useDDE_;
    this->ddeMessage_ = x.ddeMessage_;
    this->ddeApplication_ = x.ddeApplication_;
    this->ddeAppNotRunning_ = x.ddeAppNotRunning_;
    this->ddeTopic_ = x.ddeTopic_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

FileTypeProperties_t::
~FileTypeProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, FileTypeProperties_t >
_xsd_FileTypeProperties_t_type_factory_init (
  "FileTypeProperties_t",
  "");

// FileType_t
//

FileType_t::
FileType_t (const PropertiesType& Properties,
            const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (Properties, this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

FileType_t::
FileType_t (::std::unique_ptr< PropertiesType > Properties,
            const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (std::move (Properties), this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

FileType_t::
FileType_t (const FileType_t& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

FileType_t::
FileType_t (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void FileType_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

FileType_t* FileType_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class FileType_t (*this, f, c);
}

FileType_t& FileType_t::
operator= (const FileType_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

FileType_t::
~FileType_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, FileType_t >
_xsd_FileType_t_type_factory_init (
  "FileType_t",
  "");

// FolderOptions
//

FolderOptions::
FolderOptions (const GlobalFolderOptionsType& GlobalFolderOptions,
               const GlobalFolderOptionsVistaType& GlobalFolderOptionsVista,
               const OpenWithType& OpenWith,
               const FileTypeType& FileType,
               const ClsidType& clsid)
: ::xml_schema::Type (),
  GlobalFolderOptions_ (GlobalFolderOptions, this),
  GlobalFolderOptionsVista_ (GlobalFolderOptionsVista, this),
  OpenWith_ (OpenWith, this),
  FileType_ (FileType, this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

FolderOptions::
FolderOptions (::std::unique_ptr< GlobalFolderOptionsType > GlobalFolderOptions,
               ::std::unique_ptr< GlobalFolderOptionsVistaType > GlobalFolderOptionsVista,
               ::std::unique_ptr< OpenWithType > OpenWith,
               ::std::unique_ptr< FileTypeType > FileType,
               const ClsidType& clsid)
: ::xml_schema::Type (),
  GlobalFolderOptions_ (std::move (GlobalFolderOptions), this),
  GlobalFolderOptionsVista_ (std::move (GlobalFolderOptionsVista), this),
  OpenWith_ (std::move (OpenWith), this),
  FileType_ (std::move (FileType), this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

FolderOptions::
FolderOptions (const FolderOptions& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  GlobalFolderOptions_ (x.GlobalFolderOptions_, f, this),
  GlobalFolderOptionsVista_ (x.GlobalFolderOptionsVista_, f, this),
  OpenWith_ (x.OpenWith_, f, this),
  FileType_ (x.FileType_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

FolderOptions::
FolderOptions (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  GlobalFolderOptions_ (this),
  GlobalFolderOptionsVista_ (this),
  OpenWith_ (this),
  FileType_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void FolderOptions::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // GlobalFolderOptions
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GlobalFolderOptions",
          "",
          &::xsd::cxx::tree::factory_impl< GlobalFolderOptionsType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!GlobalFolderOptions_.present ())
        {
          ::std::unique_ptr< GlobalFolderOptionsType > r (
            dynamic_cast< GlobalFolderOptionsType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->GlobalFolderOptions_.set (::std::move (r));
          continue;
        }
      }
    }

    // GlobalFolderOptionsVista
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GlobalFolderOptionsVista",
          "",
          &::xsd::cxx::tree::factory_impl< GlobalFolderOptionsVistaType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!GlobalFolderOptionsVista_.present ())
        {
          ::std::unique_ptr< GlobalFolderOptionsVistaType > r (
            dynamic_cast< GlobalFolderOptionsVistaType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->GlobalFolderOptionsVista_.set (::std::move (r));
          continue;
        }
      }
    }

    // OpenWith
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "OpenWith",
          "",
          &::xsd::cxx::tree::factory_impl< OpenWithType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!OpenWith_.present ())
        {
          ::std::unique_ptr< OpenWithType > r (
            dynamic_cast< OpenWithType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->OpenWith_.set (::std::move (r));
          continue;
        }
      }
    }

    // FileType
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "FileType",
          "",
          &::xsd::cxx::tree::factory_impl< FileTypeType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!FileType_.present ())
        {
          ::std::unique_ptr< FileTypeType > r (
            dynamic_cast< FileTypeType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->FileType_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!GlobalFolderOptions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "GlobalFolderOptions",
      "");
  }

  if (!GlobalFolderOptionsVista_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "GlobalFolderOptionsVista",
      "");
  }

  if (!OpenWith_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "OpenWith",
      "");
  }

  if (!FileType_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "FileType",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

FolderOptions* FolderOptions::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class FolderOptions (*this, f, c);
}

FolderOptions& FolderOptions::
operator= (const FolderOptions& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->GlobalFolderOptions_ = x.GlobalFolderOptions_;
    this->GlobalFolderOptionsVista_ = x.GlobalFolderOptionsVista_;
    this->OpenWith_ = x.OpenWith_;
    this->FileType_ = x.FileType_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

FolderOptions::
~FolderOptions ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const GlobalFolderOptionsProperties_t& i)
{
  o << ::std::endl << "noNetCrawling: " << i.noNetCrawling ();
  o << ::std::endl << "folderContentsInfoTip: " << i.folderContentsInfoTip ();
  o << ::std::endl << "friendlyTree: " << i.friendlyTree ();
  o << ::std::endl << "fullPathAddress: " << i.fullPathAddress ();
  o << ::std::endl << "fullPath: " << i.fullPath ();
  o << ::std::endl << "disableThumbnailCache: " << i.disableThumbnailCache ();
  o << ::std::endl << "hidden: " << i.hidden ();
  o << ::std::endl << "hideFileExt: " << i.hideFileExt ();
  o << ::std::endl << "separateProcess: " << i.separateProcess ();
  o << ::std::endl << "showSuperHidden: " << i.showSuperHidden ();
  o << ::std::endl << "classicViewState: " << i.classicViewState ();
  o << ::std::endl << "persistBrowsers: " << i.persistBrowsers ();
  o << ::std::endl << "showControlPanel: " << i.showControlPanel ();
  o << ::std::endl << "showCompColor: " << i.showCompColor ();
  o << ::std::endl << "showInfoTip: " << i.showInfoTip ();
  o << ::std::endl << "forceGuest: " << i.forceGuest ();
  o << ::std::endl << "webViewBarricade: " << i.webViewBarricade ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalFolderOptionsProperties_t >
_xsd_GlobalFolderOptionsProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalFolderOptions_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Filters: ";
    om.insert (o, i.Filters ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  o << ::std::endl << "name: " << i.name ();
  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalFolderOptions_t >
_xsd_GlobalFolderOptions_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalFolderOptionsVistaProperties_t& i)
{
  o << ::std::endl << "alwaysShowIcons: " << i.alwaysShowIcons ();
  o << ::std::endl << "alwaysShowMenus: " << i.alwaysShowMenus ();
  o << ::std::endl << "displayIconThumb: " << i.displayIconThumb ();
  o << ::std::endl << "displayFileSize: " << i.displayFileSize ();
  o << ::std::endl << "displaySimpleFolders: " << i.displaySimpleFolders ();
  o << ::std::endl << "fullPath: " << i.fullPath ();
  o << ::std::endl << "hidden: " << i.hidden ();
  o << ::std::endl << "hideFileExt: " << i.hideFileExt ();
  o << ::std::endl << "showSuperHidden: " << i.showSuperHidden ();
  o << ::std::endl << "separateProcess: " << i.separateProcess ();
  o << ::std::endl << "classicViewState: " << i.classicViewState ();
  o << ::std::endl << "persistBrowsers: " << i.persistBrowsers ();
  o << ::std::endl << "showDriveLetter: " << i.showDriveLetter ();
  o << ::std::endl << "showCompColor: " << i.showCompColor ();
  o << ::std::endl << "showInfoTip: " << i.showInfoTip ();
  o << ::std::endl << "showPreviewHandlers: " << i.showPreviewHandlers ();
  o << ::std::endl << "useCheckBoxes: " << i.useCheckBoxes ();
  o << ::std::endl << "useSharingWizard: " << i.useSharingWizard ();
  o << ::std::endl << "listViewTyping: " << i.listViewTyping ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalFolderOptionsVistaProperties_t >
_xsd_GlobalFolderOptionsVistaProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GlobalFolderOptionsVista_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Filters: ";
    om.insert (o, i.Filters ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  o << ::std::endl << "name: " << i.name ();
  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GlobalFolderOptionsVista_t >
_xsd_GlobalFolderOptionsVista_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const OpenWithProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "fileExtension: " << i.fileExtension ();
  o << ::std::endl << "applicationPath: " << i.applicationPath ();
  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OpenWithProperties_t >
_xsd_OpenWithProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const OpenWith_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, OpenWith_t >
_xsd_OpenWith_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const FileTypeProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "fileExt: " << i.fileExt ();
  o << ::std::endl << "application: " << i.application ();
  o << ::std::endl << "appProgID: " << i.appProgID ();
  o << ::std::endl << "configActions: " << i.configActions ();
  if (i.iconPath ())
  {
    o << ::std::endl << "iconPath: " << *i.iconPath ();
  }

  if (i.iconIndex ())
  {
    o << ::std::endl << "iconIndex: " << *i.iconIndex ();
  }

  if (i.confirmOpen ())
  {
    o << ::std::endl << "confirmOpen: " << *i.confirmOpen ();
  }

  if (i.alwaysShow ())
  {
    o << ::std::endl << "alwaysShow: " << *i.alwaysShow ();
  }

  if (i.sameWindow ())
  {
    o << ::std::endl << "sameWindow: " << *i.sameWindow ();
  }

  if (i.name ())
  {
    o << ::std::endl << "name: " << *i.name ();
  }

  if (i.appUsed ())
  {
    o << ::std::endl << "appUsed: " << *i.appUsed ();
  }

  if (i.default_ ())
  {
    o << ::std::endl << "default: " << *i.default_ ();
  }

  if (i.useDDE ())
  {
    o << ::std::endl << "useDDE: " << *i.useDDE ();
  }

  if (i.ddeMessage ())
  {
    o << ::std::endl << "ddeMessage: " << *i.ddeMessage ();
  }

  if (i.ddeApplication ())
  {
    o << ::std::endl << "ddeApplication: " << *i.ddeApplication ();
  }

  if (i.ddeAppNotRunning ())
  {
    o << ::std::endl << "ddeAppNotRunning: " << *i.ddeAppNotRunning ();
  }

  if (i.ddeTopic ())
  {
    o << ::std::endl << "ddeTopic: " << *i.ddeTopic ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FileTypeProperties_t >
_xsd_FileTypeProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const FileType_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, FileType_t >
_xsd_FileType_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const FolderOptions& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "GlobalFolderOptions: ";
    om.insert (o, i.GlobalFolderOptions ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "GlobalFolderOptionsVista: ";
    om.insert (o, i.GlobalFolderOptionsVista ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "OpenWith: ";
    om.insert (o, i.OpenWith ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "FileType: ";
    om.insert (o, i.FileType ());
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::FolderOptions > (
    ::FolderOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::FolderOptions > (
    ::FolderOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::FolderOptions > (
    ::FolderOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::FolderOptions_ (isrc, f, p);
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::FolderOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::FolderOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::FolderOptions_ (isrc, f, p);
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::FolderOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::FolderOptions_ (isrc, h, f, p);
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::FolderOptions > (
    ::FolderOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::FolderOptions > (
    ::FolderOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::FolderOptions > (
    ::FolderOptions_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::xercesc::DOMDocument& doc,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::FolderOptions > (
      ::FolderOptions_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "FolderOptions" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::FolderOptions > r (
      ::xsd::cxx::tree::traits< ::FolderOptions, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "FolderOptions",
    "");
}

::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "FolderOptions" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::FolderOptions > r (
      ::xsd::cxx::tree::traits< ::FolderOptions, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "FolderOptions",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const GlobalFolderOptionsProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // noNetCrawling
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "noNetCrawling",
        e));

    a << i.noNetCrawling ();
  }

  // folderContentsInfoTip
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "folderContentsInfoTip",
        e));

    a << i.folderContentsInfoTip ();
  }

  // friendlyTree
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "friendlyTree",
        e));

    a << i.friendlyTree ();
  }

  // fullPathAddress
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fullPathAddress",
        e));

    a << i.fullPathAddress ();
  }

  // fullPath
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fullPath",
        e));

    a << i.fullPath ();
  }

  // disableThumbnailCache
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disableThumbnailCache",
        e));

    a << i.disableThumbnailCache ();
  }

  // hidden
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hidden",
        e));

    a << i.hidden ();
  }

  // hideFileExt
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hideFileExt",
        e));

    a << i.hideFileExt ();
  }

  // separateProcess
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "separateProcess",
        e));

    a << i.separateProcess ();
  }

  // showSuperHidden
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showSuperHidden",
        e));

    a << i.showSuperHidden ();
  }

  // classicViewState
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "classicViewState",
        e));

    a << i.classicViewState ();
  }

  // persistBrowsers
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "persistBrowsers",
        e));

    a << i.persistBrowsers ();
  }

  // showControlPanel
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showControlPanel",
        e));

    a << i.showControlPanel ();
  }

  // showCompColor
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showCompColor",
        e));

    a << i.showCompColor ();
  }

  // showInfoTip
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showInfoTip",
        e));

    a << i.showInfoTip ();
  }

  // forceGuest
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "forceGuest",
        e));

    a << i.forceGuest ();
  }

  // webViewBarricade
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "webViewBarricade",
        e));

    a << i.webViewBarricade ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalFolderOptionsProperties_t >
_xsd_GlobalFolderOptionsProperties_t_type_serializer_init (
  "GlobalFolderOptionsProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalFolderOptions_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Filters
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const GlobalFolderOptions_t::FiltersType& x (i.Filters ());
    if (typeid (GlobalFolderOptions_t::FiltersType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filters",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Filters",
        "",
        false, true, e, x);
  }

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const GlobalFolderOptions_t::PropertiesType& x (i.Properties ());
    if (typeid (GlobalFolderOptions_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalFolderOptions_t >
_xsd_GlobalFolderOptions_t_type_serializer_init (
  "GlobalFolderOptions_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalFolderOptionsVistaProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // alwaysShowIcons
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "alwaysShowIcons",
        e));

    a << i.alwaysShowIcons ();
  }

  // alwaysShowMenus
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "alwaysShowMenus",
        e));

    a << i.alwaysShowMenus ();
  }

  // displayIconThumb
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "displayIconThumb",
        e));

    a << i.displayIconThumb ();
  }

  // displayFileSize
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "displayFileSize",
        e));

    a << i.displayFileSize ();
  }

  // displaySimpleFolders
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "displaySimpleFolders",
        e));

    a << i.displaySimpleFolders ();
  }

  // fullPath
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fullPath",
        e));

    a << i.fullPath ();
  }

  // hidden
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hidden",
        e));

    a << i.hidden ();
  }

  // hideFileExt
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "hideFileExt",
        e));

    a << i.hideFileExt ();
  }

  // showSuperHidden
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showSuperHidden",
        e));

    a << i.showSuperHidden ();
  }

  // separateProcess
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "separateProcess",
        e));

    a << i.separateProcess ();
  }

  // classicViewState
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "classicViewState",
        e));

    a << i.classicViewState ();
  }

  // persistBrowsers
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "persistBrowsers",
        e));

    a << i.persistBrowsers ();
  }

  // showDriveLetter
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showDriveLetter",
        e));

    a << i.showDriveLetter ();
  }

  // showCompColor
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showCompColor",
        e));

    a << i.showCompColor ();
  }

  // showInfoTip
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showInfoTip",
        e));

    a << i.showInfoTip ();
  }

  // showPreviewHandlers
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "showPreviewHandlers",
        e));

    a << i.showPreviewHandlers ();
  }

  // useCheckBoxes
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useCheckBoxes",
        e));

    a << i.useCheckBoxes ();
  }

  // useSharingWizard
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useSharingWizard",
        e));

    a << i.useSharingWizard ();
  }

  // listViewTyping
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "listViewTyping",
        e));

    a << i.listViewTyping ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalFolderOptionsVistaProperties_t >
_xsd_GlobalFolderOptionsVistaProperties_t_type_serializer_init (
  "GlobalFolderOptionsVistaProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GlobalFolderOptionsVista_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Filters
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const GlobalFolderOptionsVista_t::FiltersType& x (i.Filters ());
    if (typeid (GlobalFolderOptionsVista_t::FiltersType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filters",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Filters",
        "",
        false, true, e, x);
  }

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const GlobalFolderOptionsVista_t::PropertiesType& x (i.Properties ());
    if (typeid (GlobalFolderOptionsVista_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GlobalFolderOptionsVista_t >
_xsd_GlobalFolderOptionsVista_t_type_serializer_init (
  "GlobalFolderOptionsVista_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const OpenWithProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // fileExtension
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fileExtension",
        e));

    a << i.fileExtension ();
  }

  // applicationPath
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "applicationPath",
        e));

    a << i.applicationPath ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OpenWithProperties_t >
_xsd_OpenWithProperties_t_type_serializer_init (
  "OpenWithProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const OpenWith_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const OpenWith_t::PropertiesType& x (i.Properties ());
    if (typeid (OpenWith_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OpenWith_t >
_xsd_OpenWith_t_type_serializer_init (
  "OpenWith_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const FileTypeProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // fileExt
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fileExt",
        e));

    a << i.fileExt ();
  }

  // application
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "application",
        e));

    a << i.application ();
  }

  // appProgID
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "appProgID",
        e));

    a << i.appProgID ();
  }

  // configActions
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "configActions",
        e));

    a << i.configActions ();
  }

  // iconPath
  //
  if (i.iconPath ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "iconPath",
        e));

    a << *i.iconPath ();
  }

  // iconIndex
  //
  if (i.iconIndex ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "iconIndex",
        e));

    a << *i.iconIndex ();
  }

  // confirmOpen
  //
  if (i.confirmOpen ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "confirmOpen",
        e));

    a << *i.confirmOpen ();
  }

  // alwaysShow
  //
  if (i.alwaysShow ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "alwaysShow",
        e));

    a << *i.alwaysShow ();
  }

  // sameWindow
  //
  if (i.sameWindow ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sameWindow",
        e));

    a << *i.sameWindow ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << *i.name ();
  }

  // appUsed
  //
  if (i.appUsed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "appUsed",
        e));

    a << *i.appUsed ();
  }

  // default
  //
  if (i.default_ ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "default",
        e));

    a << *i.default_ ();
  }

  // useDDE
  //
  if (i.useDDE ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "useDDE",
        e));

    a << *i.useDDE ();
  }

  // ddeMessage
  //
  if (i.ddeMessage ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ddeMessage",
        e));

    a << *i.ddeMessage ();
  }

  // ddeApplication
  //
  if (i.ddeApplication ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ddeApplication",
        e));

    a << *i.ddeApplication ();
  }

  // ddeAppNotRunning
  //
  if (i.ddeAppNotRunning ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ddeAppNotRunning",
        e));

    a << *i.ddeAppNotRunning ();
  }

  // ddeTopic
  //
  if (i.ddeTopic ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ddeTopic",
        e));

    a << *i.ddeTopic ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FileTypeProperties_t >
_xsd_FileTypeProperties_t_type_serializer_init (
  "FileTypeProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const FileType_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const FileType_t::PropertiesType& x (i.Properties ());
    if (typeid (FileType_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, FileType_t >
_xsd_FileType_t_type_serializer_init (
  "FileType_t",
  "");


void
FolderOptions_ (::std::ostream& o,
                const ::FolderOptions& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::FolderOptions_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
FolderOptions_ (::std::ostream& o,
                const ::FolderOptions& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::FolderOptions_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FolderOptions_ (::std::ostream& o,
                const ::FolderOptions& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::FolderOptions_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FolderOptions_ (::xercesc::XMLFormatTarget& t,
                const ::FolderOptions& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::FolderOptions_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
FolderOptions_ (::xercesc::XMLFormatTarget& t,
                const ::FolderOptions& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::FolderOptions_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FolderOptions_ (::xercesc::XMLFormatTarget& t,
                const ::FolderOptions& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::FolderOptions_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FolderOptions_ (::xercesc::DOMDocument& d,
                const ::FolderOptions& s,
                ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "FolderOptions" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FolderOptions",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
FolderOptions_ (const ::FolderOptions& s,
                const ::xml_schema::NamespaceInfomap& m,
                ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "FolderOptions",
      "",
      m, f));

  ::FolderOptions_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const FolderOptions& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // GlobalFolderOptions
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const FolderOptions::GlobalFolderOptionsType& x (i.GlobalFolderOptions ());
    if (typeid (FolderOptions::GlobalFolderOptionsType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GlobalFolderOptions",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "GlobalFolderOptions",
        "",
        false, true, e, x);
  }

  // GlobalFolderOptionsVista
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const FolderOptions::GlobalFolderOptionsVistaType& x (i.GlobalFolderOptionsVista ());
    if (typeid (FolderOptions::GlobalFolderOptionsVistaType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GlobalFolderOptionsVista",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "GlobalFolderOptionsVista",
        "",
        false, true, e, x);
  }

  // OpenWith
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const FolderOptions::OpenWithType& x (i.OpenWith ());
    if (typeid (FolderOptions::OpenWithType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OpenWith",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "OpenWith",
        "",
        false, true, e, x);
  }

  // FileType
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const FolderOptions::FileTypeType& x (i.FileType ());
    if (typeid (FolderOptions::FileTypeType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FileType",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "FileType",
        "",
        false, true, e, x);
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "shortcutsschema.h"

// ShortcutsProperties_t
// 

const ShortcutsProperties_t::PidlOptional& ShortcutsProperties_t::
pidl () const
{
  return this->pidl_;
}

ShortcutsProperties_t::PidlOptional& ShortcutsProperties_t::
pidl ()
{
  return this->pidl_;
}

void ShortcutsProperties_t::
pidl (const PidlType& x)
{
  this->pidl_.set (x);
}

void ShortcutsProperties_t::
pidl (const PidlOptional& x)
{
  this->pidl_ = x;
}

void ShortcutsProperties_t::
pidl (::std::unique_ptr< PidlType > x)
{
  this->pidl_.set (std::move (x));
}

const ShortcutsProperties_t::TargetTypeType& ShortcutsProperties_t::
targetType () const
{
  return this->targetType_.get ();
}

ShortcutsProperties_t::TargetTypeType& ShortcutsProperties_t::
targetType ()
{
  return this->targetType_.get ();
}

void ShortcutsProperties_t::
targetType (const TargetTypeType& x)
{
  this->targetType_.set (x);
}

void ShortcutsProperties_t::
targetType (::std::unique_ptr< TargetTypeType > x)
{
  this->targetType_.set (std::move (x));
}

const ShortcutsProperties_t::ActionOptional& ShortcutsProperties_t::
action () const
{
  return this->action_;
}

ShortcutsProperties_t::ActionOptional& ShortcutsProperties_t::
action ()
{
  return this->action_;
}

void ShortcutsProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void ShortcutsProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void ShortcutsProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const ShortcutsProperties_t::CommentOptional& ShortcutsProperties_t::
comment () const
{
  return this->comment_;
}

ShortcutsProperties_t::CommentOptional& ShortcutsProperties_t::
comment ()
{
  return this->comment_;
}

void ShortcutsProperties_t::
comment (const CommentType& x)
{
  this->comment_.set (x);
}

void ShortcutsProperties_t::
comment (const CommentOptional& x)
{
  this->comment_ = x;
}

void ShortcutsProperties_t::
comment (::std::unique_ptr< CommentType > x)
{
  this->comment_.set (std::move (x));
}

const ShortcutsProperties_t::ShortcutKeyOptional& ShortcutsProperties_t::
shortcutKey () const
{
  return this->shortcutKey_;
}

ShortcutsProperties_t::ShortcutKeyOptional& ShortcutsProperties_t::
shortcutKey ()
{
  return this->shortcutKey_;
}

void ShortcutsProperties_t::
shortcutKey (const ShortcutKeyType& x)
{
  this->shortcutKey_.set (x);
}

void ShortcutsProperties_t::
shortcutKey (const ShortcutKeyOptional& x)
{
  this->shortcutKey_ = x;
}

const ShortcutsProperties_t::StartInOptional& ShortcutsProperties_t::
startIn () const
{
  return this->startIn_;
}

ShortcutsProperties_t::StartInOptional& ShortcutsProperties_t::
startIn ()
{
  return this->startIn_;
}

void ShortcutsProperties_t::
startIn (const StartInType& x)
{
  this->startIn_.set (x);
}

void ShortcutsProperties_t::
startIn (const StartInOptional& x)
{
  this->startIn_ = x;
}

void ShortcutsProperties_t::
startIn (::std::unique_ptr< StartInType > x)
{
  this->startIn_.set (std::move (x));
}

const ShortcutsProperties_t::ArgumentsOptional& ShortcutsProperties_t::
arguments () const
{
  return this->arguments_;
}

ShortcutsProperties_t::ArgumentsOptional& ShortcutsProperties_t::
arguments ()
{
  return this->arguments_;
}

void ShortcutsProperties_t::
arguments (const ArgumentsType& x)
{
  this->arguments_.set (x);
}

void ShortcutsProperties_t::
arguments (const ArgumentsOptional& x)
{
  this->arguments_ = x;
}

void ShortcutsProperties_t::
arguments (::std::unique_ptr< ArgumentsType > x)
{
  this->arguments_.set (std::move (x));
}

const ShortcutsProperties_t::IconIndexOptional& ShortcutsProperties_t::
iconIndex () const
{
  return this->iconIndex_;
}

ShortcutsProperties_t::IconIndexOptional& ShortcutsProperties_t::
iconIndex ()
{
  return this->iconIndex_;
}

void ShortcutsProperties_t::
iconIndex (const IconIndexType& x)
{
  this->iconIndex_.set (x);
}

void ShortcutsProperties_t::
iconIndex (const IconIndexOptional& x)
{
  this->iconIndex_ = x;
}

const ShortcutsProperties_t::TargetPathType& ShortcutsProperties_t::
targetPath () const
{
  return this->targetPath_.get ();
}

ShortcutsProperties_t::TargetPathType& ShortcutsProperties_t::
targetPath ()
{
  return this->targetPath_.get ();
}

void ShortcutsProperties_t::
targetPath (const TargetPathType& x)
{
  this->targetPath_.set (x);
}

void ShortcutsProperties_t::
targetPath (::std::unique_ptr< TargetPathType > x)
{
  this->targetPath_.set (std::move (x));
}

const ShortcutsProperties_t::IconPathOptional& ShortcutsProperties_t::
iconPath () const
{
  return this->iconPath_;
}

ShortcutsProperties_t::IconPathOptional& ShortcutsProperties_t::
iconPath ()
{
  return this->iconPath_;
}

void ShortcutsProperties_t::
iconPath (const IconPathType& x)
{
  this->iconPath_.set (x);
}

void ShortcutsProperties_t::
iconPath (const IconPathOptional& x)
{
  this->iconPath_ = x;
}

void ShortcutsProperties_t::
iconPath (::std::unique_ptr< IconPathType > x)
{
  this->iconPath_.set (std::move (x));
}

const ShortcutsProperties_t::WindowOptional& ShortcutsProperties_t::
window () const
{
  return this->window_;
}

ShortcutsProperties_t::WindowOptional& ShortcutsProperties_t::
window ()
{
  return this->window_;
}

void ShortcutsProperties_t::
window (const WindowType& x)
{
  this->window_.set (x);
}

void ShortcutsProperties_t::
window (const WindowOptional& x)
{
  this->window_ = x;
}

void ShortcutsProperties_t::
window (::std::unique_ptr< WindowType > x)
{
  this->window_.set (std::move (x));
}

const ShortcutsProperties_t::ShortcutPathType& ShortcutsProperties_t::
shortcutPath () const
{
  return this->shortcutPath_.get ();
}

ShortcutsProperties_t::ShortcutPathType& ShortcutsProperties_t::
shortcutPath ()
{
  return this->shortcutPath_.get ();
}

void ShortcutsProperties_t::
shortcutPath (const ShortcutPathType& x)
{
  this->shortcutPath_.set (x);
}

void ShortcutsProperties_t::
shortcutPath (::std::unique_ptr< ShortcutPathType > x)
{
  this->shortcutPath_.set (std::move (x));
}

const ShortcutsProperties_t::DisabledOptional& ShortcutsProperties_t::
disabled () const
{
  return this->disabled_;
}

ShortcutsProperties_t::DisabledOptional& ShortcutsProperties_t::
disabled ()
{
  return this->disabled_;
}

void ShortcutsProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void ShortcutsProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Shortcut_t
// 

const Shortcut_t::PropertiesSequence& Shortcut_t::
Properties () const
{
  return this->Properties_;
}

Shortcut_t::PropertiesSequence& Shortcut_t::
Properties ()
{
  return this->Properties_;
}

void Shortcut_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const Shortcut_t::ClsidType& Shortcut_t::
clsid () const
{
  return this->clsid_.get ();
}

Shortcut_t::ClsidType& Shortcut_t::
clsid ()
{
  return this->clsid_.get ();
}

void Shortcut_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Shortcut_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Shortcut_t::NameType& Shortcut_t::
name () const
{
  return this->name_.get ();
}

Shortcut_t::NameType& Shortcut_t::
name ()
{
  return this->name_.get ();
}

void Shortcut_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Shortcut_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Shortcut_t::ImageOptional& Shortcut_t::
image () const
{
  return this->image_;
}

Shortcut_t::ImageOptional& Shortcut_t::
image ()
{
  return this->image_;
}

void Shortcut_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Shortcut_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Shortcut_t::ChangedOptional& Shortcut_t::
changed () const
{
  return this->changed_;
}

Shortcut_t::ChangedOptional& Shortcut_t::
changed ()
{
  return this->changed_;
}

void Shortcut_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Shortcut_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Shortcut_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Shortcut_t::UidType& Shortcut_t::
uid () const
{
  return this->uid_.get ();
}

Shortcut_t::UidType& Shortcut_t::
uid ()
{
  return this->uid_.get ();
}

void Shortcut_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Shortcut_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const Shortcut_t::DescOptional& Shortcut_t::
desc () const
{
  return this->desc_;
}

Shortcut_t::DescOptional& Shortcut_t::
desc ()
{
  return this->desc_;
}

void Shortcut_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void Shortcut_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void Shortcut_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const Shortcut_t::BypassErrorsOptional& Shortcut_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

Shortcut_t::BypassErrorsOptional& Shortcut_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void Shortcut_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void Shortcut_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const Shortcut_t::UserContextOptional& Shortcut_t::
userContext () const
{
  return this->userContext_;
}

Shortcut_t::UserContextOptional& Shortcut_t::
userContext ()
{
  return this->userContext_;
}

void Shortcut_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void Shortcut_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const Shortcut_t::StatusOptional& Shortcut_t::
status () const
{
  return this->status_;
}

Shortcut_t::StatusOptional& Shortcut_t::
status ()
{
  return this->status_;
}

void Shortcut_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Shortcut_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Shortcut_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}

const Shortcut_t::RemovePolicyOptional& Shortcut_t::
removePolicy () const
{
  return this->removePolicy_;
}

Shortcut_t::RemovePolicyOptional& Shortcut_t::
removePolicy ()
{
  return this->removePolicy_;
}

void Shortcut_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void Shortcut_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// Shortcuts
// 

const Shortcuts::ShortcutSequence& Shortcuts::
Shortcut () const
{
  return this->Shortcut_;
}

Shortcuts::ShortcutSequence& Shortcuts::
Shortcut ()
{
  return this->Shortcut_;
}

void Shortcuts::
Shortcut (const ShortcutSequence& s)
{
  this->Shortcut_ = s;
}

const Shortcuts::ClsidType& Shortcuts::
clsid () const
{
  return this->clsid_.get ();
}

Shortcuts::ClsidType& Shortcuts::
clsid ()
{
  return this->clsid_.get ();
}

void Shortcuts::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Shortcuts::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Shortcuts::DisabledOptional& Shortcuts::
disabled () const
{
  return this->disabled_;
}

Shortcuts::DisabledOptional& Shortcuts::
disabled ()
{
  return this->disabled_;
}

void Shortcuts::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Shortcuts::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// ShortcutsProperties_t
//

ShortcutsProperties_t::
ShortcutsProperties_t (const TargetTypeType& targetType,
                       const TargetPathType& targetPath,
                       const ShortcutPathType& shortcutPath)
: ::xml_schema::Type (),
  pidl_ (this),
  targetType_ (targetType, this),
  action_ (this),
  comment_ (this),
  shortcutKey_ (this),
  startIn_ (this),
  arguments_ (this),
  iconIndex_ (this),
  targetPath_ (targetPath, this),
  iconPath_ (this),
  window_ (this),
  shortcutPath_ (shortcutPath, this),
  disabled_ (this)
{
}

ShortcutsProperties_t::
ShortcutsProperties_t (const ShortcutsProperties_t& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  pidl_ (x.pidl_, f, this),
  targetType_ (x.targetType_, f, this),
  action_ (x.action_, f, this),
  comment_ (x.comment_, f, this),
  shortcutKey_ (x.shortcutKey_, f, this),
  startIn_ (x.startIn_, f, this),
  arguments_ (x.arguments_, f, this),
  iconIndex_ (x.iconIndex_, f, this),
  targetPath_ (x.targetPath_, f, this),
  iconPath_ (x.iconPath_, f, this),
  window_ (x.window_, f, this),
  shortcutPath_ (x.shortcutPath_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

ShortcutsProperties_t::
ShortcutsProperties_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  pidl_ (this),
  targetType_ (this),
  action_ (this),
  comment_ (this),
  shortcutKey_ (this),
  startIn_ (this),
  arguments_ (this),
  iconIndex_ (this),
  targetPath_ (this),
  iconPath_ (this),
  window_ (this),
  shortcutPath_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void ShortcutsProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "pidl" && n.namespace_ ().empty ())
    {
      this->pidl_.set (PidlTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "targetType" && n.namespace_ ().empty ())
    {
      this->targetType_.set (TargetTypeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "comment" && n.namespace_ ().empty ())
    {
      this->comment_.set (CommentTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "shortcutKey" && n.namespace_ ().empty ())
    {
      this->shortcutKey_.set (ShortcutKeyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "startIn" && n.namespace_ ().empty ())
    {
      this->startIn_.set (StartInTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "arguments" && n.namespace_ ().empty ())
    {
      this->arguments_.set (ArgumentsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "iconIndex" && n.namespace_ ().empty ())
    {
      this->iconIndex_.set (IconIndexTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "targetPath" && n.namespace_ ().empty ())
    {
      this->targetPath_.set (TargetPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "iconPath" && n.namespace_ ().empty ())
    {
      this->iconPath_.set (IconPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "window" && n.namespace_ ().empty ())
    {
      this->window_.set (WindowTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "shortcutPath" && n.namespace_ ().empty ())
    {
      this->shortcutPath_.set (ShortcutPathTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!targetType_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "targetType",
      "");
  }

  if (!targetPath_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "targetPath",
      "");
  }

  if (!shortcutPath_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "shortcutPath",
      "");
  }
}

ShortcutsProperties_t* ShortcutsProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class ShortcutsProperties_t (*this, f, c);
}

ShortcutsProperties_t& ShortcutsProperties_t::
operator= (const ShortcutsProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->pidl_ = x.pidl_;
    this->targetType_ = x.targetType_;
    this->action_ = x.action_;
    this->comment_ = x.comment_;
    this->shortcutKey_ = x.shortcutKey_;
    this->startIn_ = x.startIn_;
    this->arguments_ = x.arguments_;
    this->iconIndex_ = x.iconIndex_;
    this->targetPath_ = x.targetPath_;
    this->iconPath_ = x.iconPath_;
    this->window_ = x.window_;
    this->shortcutPath_ = x.shortcutPath_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

ShortcutsProperties_t::
~ShortcutsProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, ShortcutsProperties_t >
_xsd_ShortcutsProperties_t_type_factory_init (
  "ShortcutsProperties_t",
  "");

// Shortcut_t
//

Shortcut_t::
Shortcut_t (const ClsidType& clsid,
            const NameType& name,
            const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  status_ (this),
  removePolicy_ (this)
{
}

Shortcut_t::
Shortcut_t (const Shortcut_t& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  status_ (x.status_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

Shortcut_t::
Shortcut_t (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  status_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Shortcut_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Shortcut_t* Shortcut_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Shortcut_t (*this, f, c);
}

Shortcut_t& Shortcut_t::
operator= (const Shortcut_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->status_ = x.status_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

Shortcut_t::
~Shortcut_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Shortcut_t >
_xsd_Shortcut_t_type_factory_init (
  "Shortcut_t",
  "");

// Shortcuts
//

Shortcuts::
Shortcuts (const ClsidType& clsid)
: ::xml_schema::Type (),
  Shortcut_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Shortcuts::
Shortcuts (const Shortcuts& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Shortcut_ (x.Shortcut_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Shortcuts::
Shortcuts (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Shortcut_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Shortcuts::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Shortcut
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Shortcut",
          "",
          &::xsd::cxx::tree::factory_impl< ShortcutType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< ShortcutType > r (
          dynamic_cast< ShortcutType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Shortcut_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

Shortcuts* Shortcuts::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Shortcuts (*this, f, c);
}

Shortcuts& Shortcuts::
operator= (const Shortcuts& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Shortcut_ = x.Shortcut_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Shortcuts::
~Shortcuts ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const ShortcutsProperties_t& i)
{
  if (i.pidl ())
  {
    o << ::std::endl << "pidl: " << *i.pidl ();
  }

  o << ::std::endl << "targetType: " << i.targetType ();
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.comment ())
  {
    o << ::std::endl << "comment: " << *i.comment ();
  }

  if (i.shortcutKey ())
  {
    o << ::std::endl << "shortcutKey: " << *i.shortcutKey ();
  }

  if (i.startIn ())
  {
    o << ::std::endl << "startIn: " << *i.startIn ();
  }

  if (i.arguments ())
  {
    o << ::std::endl << "arguments: " << *i.arguments ();
  }

  if (i.iconIndex ())
  {
    o << ::std::endl << "iconIndex: " << *i.iconIndex ();
  }

  o << ::std::endl << "targetPath: " << i.targetPath ();
  if (i.iconPath ())
  {
    o << ::std::endl << "iconPath: " << *i.iconPath ();
  }

  if (i.window ())
  {
    o << ::std::endl << "window: " << *i.window ();
  }

  o << ::std::endl << "shortcutPath: " << i.shortcutPath ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, ShortcutsProperties_t >
_xsd_ShortcutsProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Shortcut_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Shortcut_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Shortcut_t >
_xsd_Shortcut_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Shortcuts& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Shortcuts::ShortcutConstIterator
         b (i.Shortcut ().begin ()), e (i.Shortcut ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Shortcut: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Shortcuts > (
    ::Shortcuts_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Shortcuts > (
    ::Shortcuts_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Shortcuts > (
    ::Shortcuts_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Shortcuts_ (isrc, f, p);
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Shortcuts_ (isrc, h, f, p);
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Shortcuts_ (isrc, h, f, p);
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Shortcuts_ (isrc, f, p);
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Shortcuts_ (isrc, h, f, p);
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Shortcuts_ (isrc, h, f, p);
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Shortcuts > (
    ::Shortcuts_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Shortcuts > (
    ::Shortcuts_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Shortcuts > (
    ::Shortcuts_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (const ::xercesc::DOMDocument& doc,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Shortcuts > (
      ::Shortcuts_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Shortcuts" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Shortcuts > r (
      ::xsd::cxx::tree::traits< ::Shortcuts, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Shortcuts",
    "");
}

::std::unique_ptr< ::Shortcuts >
Shortcuts_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Shortcuts" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Shortcuts > r (
      ::xsd::cxx::tree::traits< ::Shortcuts, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Shortcuts",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const ShortcutsProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // pidl
  //
  if (i.pidl ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "pidl",
        e));

    a << *i.pidl ();
  }

  // targetType
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "targetType",
        e));

    a << i.targetType ();
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // comment
  //
  if (i.comment ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "comment",
        e));

    a << *i.comment ();
  }

  // shortcutKey
  //
  if (i.shortcutKey ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "shortcutKey",
        e));

    a << *i.shortcutKey ();
  }

  // startIn
  //
  if (i.startIn ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "startIn",
        e));

    a << *i.startIn ();
  }

  // arguments
  //
  if (i.arguments ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "arguments",
        e));

    a << *i.arguments ();
  }

  // iconIndex
  //
  if (i.iconIndex ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "iconIndex",
        e));

    a << *i.iconIndex ();
  }

  // targetPath
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "targetPath",
        e));

    a << i.targetPath ();
  }

  // iconPath
  //
  if (i.iconPath ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "iconPath",
        e));

    a << *i.iconPath ();
  }

  // window
  //
  if (i.window ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "window",
        e));

    a << *i.window ();
  }

  // shortcutPath
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "shortcutPath",
        e));

    a << i.shortcutPath ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ShortcutsProperties_t >
_xsd_ShortcutsProperties_t_type_serializer_init (
  "ShortcutsProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Shortcut_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Shortcut_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (Shortcut_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Shortcut_t >
_xsd_Shortcut_t_type_serializer_init (
  "Shortcut_t",
  "");


void
Shortcuts_ (::std::ostream& o,
            const ::Shortcuts& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Shortcuts_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Shortcuts_ (::std::ostream& o,
            const ::Shortcuts& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Shortcuts_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Shortcuts_ (::std::ostream& o,
            const ::Shortcuts& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Shortcuts_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Shortcuts_ (::xercesc::XMLFormatTarget& t,
            const ::Shortcuts& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Shortcuts_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Shortcuts_ (::xercesc::XMLFormatTarget& t,
            const ::Shortcuts& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Shortcuts_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Shortcuts_ (::xercesc::XMLFormatTarget& t,
            const ::Shortcuts& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Shortcuts_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Shortcuts_ (::xercesc::DOMDocument& d,
            const ::Shortcuts& s,
            ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Shortcuts" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Shortcuts",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
Shortcuts_ (const ::Shortcuts& s,
            const ::xml_schema::NamespaceInfomap& m,
            ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "Shortcuts",
      "",
      m, f));

  ::Shortcuts_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const Shortcuts& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Shortcut
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Shortcuts::ShortcutConstIterator
         b (i.Shortcut ().begin ()), n (i.Shortcut ().end ());
         b != n; ++b)
    {
      if (typeid (Shortcuts::ShortcutType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Shortcut",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Shortcut",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


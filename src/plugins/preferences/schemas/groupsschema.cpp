// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groupsschema.h"

// UserProperties_t
// 

const UserProperties_t::ActionOptional& UserProperties_t::
action () const
{
  return this->action_;
}

UserProperties_t::ActionOptional& UserProperties_t::
action ()
{
  return this->action_;
}

void UserProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void UserProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void UserProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const UserProperties_t::NewNameType& UserProperties_t::
newName () const
{
  return this->newName_.get ();
}

UserProperties_t::NewNameType& UserProperties_t::
newName ()
{
  return this->newName_.get ();
}

void UserProperties_t::
newName (const NewNameType& x)
{
  this->newName_.set (x);
}

void UserProperties_t::
newName (::std::unique_ptr< NewNameType > x)
{
  this->newName_.set (std::move (x));
}

const UserProperties_t::FullNameType& UserProperties_t::
fullName () const
{
  return this->fullName_.get ();
}

UserProperties_t::FullNameType& UserProperties_t::
fullName ()
{
  return this->fullName_.get ();
}

void UserProperties_t::
fullName (const FullNameType& x)
{
  this->fullName_.set (x);
}

void UserProperties_t::
fullName (::std::unique_ptr< FullNameType > x)
{
  this->fullName_.set (std::move (x));
}

const UserProperties_t::DescriptionOptional& UserProperties_t::
description () const
{
  return this->description_;
}

UserProperties_t::DescriptionOptional& UserProperties_t::
description ()
{
  return this->description_;
}

void UserProperties_t::
description (const DescriptionType& x)
{
  this->description_.set (x);
}

void UserProperties_t::
description (const DescriptionOptional& x)
{
  this->description_ = x;
}

void UserProperties_t::
description (::std::unique_ptr< DescriptionType > x)
{
  this->description_.set (std::move (x));
}

const UserProperties_t::CpasswordOptional& UserProperties_t::
cpassword () const
{
  return this->cpassword_;
}

UserProperties_t::CpasswordOptional& UserProperties_t::
cpassword ()
{
  return this->cpassword_;
}

void UserProperties_t::
cpassword (const CpasswordType& x)
{
  this->cpassword_.set (x);
}

void UserProperties_t::
cpassword (const CpasswordOptional& x)
{
  this->cpassword_ = x;
}

void UserProperties_t::
cpassword (::std::unique_ptr< CpasswordType > x)
{
  this->cpassword_.set (std::move (x));
}

const UserProperties_t::ChangeLogonOptional& UserProperties_t::
changeLogon () const
{
  return this->changeLogon_;
}

UserProperties_t::ChangeLogonOptional& UserProperties_t::
changeLogon ()
{
  return this->changeLogon_;
}

void UserProperties_t::
changeLogon (const ChangeLogonType& x)
{
  this->changeLogon_.set (x);
}

void UserProperties_t::
changeLogon (const ChangeLogonOptional& x)
{
  this->changeLogon_ = x;
}

const UserProperties_t::NoChangeOptional& UserProperties_t::
noChange () const
{
  return this->noChange_;
}

UserProperties_t::NoChangeOptional& UserProperties_t::
noChange ()
{
  return this->noChange_;
}

void UserProperties_t::
noChange (const NoChangeType& x)
{
  this->noChange_.set (x);
}

void UserProperties_t::
noChange (const NoChangeOptional& x)
{
  this->noChange_ = x;
}

const UserProperties_t::NeverExpiresOptional& UserProperties_t::
neverExpires () const
{
  return this->neverExpires_;
}

UserProperties_t::NeverExpiresOptional& UserProperties_t::
neverExpires ()
{
  return this->neverExpires_;
}

void UserProperties_t::
neverExpires (const NeverExpiresType& x)
{
  this->neverExpires_.set (x);
}

void UserProperties_t::
neverExpires (const NeverExpiresOptional& x)
{
  this->neverExpires_ = x;
}

const UserProperties_t::AcctDisabledOptional& UserProperties_t::
acctDisabled () const
{
  return this->acctDisabled_;
}

UserProperties_t::AcctDisabledOptional& UserProperties_t::
acctDisabled ()
{
  return this->acctDisabled_;
}

void UserProperties_t::
acctDisabled (const AcctDisabledType& x)
{
  this->acctDisabled_.set (x);
}

void UserProperties_t::
acctDisabled (const AcctDisabledOptional& x)
{
  this->acctDisabled_ = x;
}

const UserProperties_t::UserNameType& UserProperties_t::
userName () const
{
  return this->userName_.get ();
}

UserProperties_t::UserNameType& UserProperties_t::
userName ()
{
  return this->userName_.get ();
}

void UserProperties_t::
userName (const UserNameType& x)
{
  this->userName_.set (x);
}

void UserProperties_t::
userName (::std::unique_ptr< UserNameType > x)
{
  this->userName_.set (std::move (x));
}

const UserProperties_t::ExpiresOptional& UserProperties_t::
expires () const
{
  return this->expires_;
}

UserProperties_t::ExpiresOptional& UserProperties_t::
expires ()
{
  return this->expires_;
}

void UserProperties_t::
expires (const ExpiresType& x)
{
  this->expires_.set (x);
}

void UserProperties_t::
expires (const ExpiresOptional& x)
{
  this->expires_ = x;
}

void UserProperties_t::
expires (::std::unique_ptr< ExpiresType > x)
{
  this->expires_.set (std::move (x));
}


// User_t
// 

const User_t::PropertiesSequence& User_t::
Properties () const
{
  return this->Properties_;
}

User_t::PropertiesSequence& User_t::
Properties ()
{
  return this->Properties_;
}

void User_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const User_t::ClsidType& User_t::
clsid () const
{
  return this->clsid_.get ();
}

User_t::ClsidType& User_t::
clsid ()
{
  return this->clsid_.get ();
}

void User_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void User_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const User_t::NameType& User_t::
name () const
{
  return this->name_.get ();
}

User_t::NameType& User_t::
name ()
{
  return this->name_.get ();
}

void User_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void User_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const User_t::ImageOptional& User_t::
image () const
{
  return this->image_;
}

User_t::ImageOptional& User_t::
image ()
{
  return this->image_;
}

void User_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void User_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const User_t::ChangedOptional& User_t::
changed () const
{
  return this->changed_;
}

User_t::ChangedOptional& User_t::
changed ()
{
  return this->changed_;
}

void User_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void User_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void User_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const User_t::UidType& User_t::
uid () const
{
  return this->uid_.get ();
}

User_t::UidType& User_t::
uid ()
{
  return this->uid_.get ();
}

void User_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void User_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const User_t::DescOptional& User_t::
desc () const
{
  return this->desc_;
}

User_t::DescOptional& User_t::
desc ()
{
  return this->desc_;
}

void User_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void User_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void User_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const User_t::BypassErrorsOptional& User_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

User_t::BypassErrorsOptional& User_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void User_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void User_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const User_t::UserContextOptional& User_t::
userContext () const
{
  return this->userContext_;
}

User_t::UserContextOptional& User_t::
userContext ()
{
  return this->userContext_;
}

void User_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void User_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const User_t::RemovePolicyOptional& User_t::
removePolicy () const
{
  return this->removePolicy_;
}

User_t::RemovePolicyOptional& User_t::
removePolicy ()
{
  return this->removePolicy_;
}

void User_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void User_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const User_t::StatusOptional& User_t::
status () const
{
  return this->status_;
}

User_t::StatusOptional& User_t::
status ()
{
  return this->status_;
}

void User_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void User_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void User_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// Member_t
// 

const Member_t::NameOptional& Member_t::
name () const
{
  return this->name_;
}

Member_t::NameOptional& Member_t::
name ()
{
  return this->name_;
}

void Member_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Member_t::
name (const NameOptional& x)
{
  this->name_ = x;
}

void Member_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Member_t::ActionOptional& Member_t::
action () const
{
  return this->action_;
}

Member_t::ActionOptional& Member_t::
action ()
{
  return this->action_;
}

void Member_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void Member_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void Member_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const Member_t::SidOptional& Member_t::
sid () const
{
  return this->sid_;
}

Member_t::SidOptional& Member_t::
sid ()
{
  return this->sid_;
}

void Member_t::
sid (const SidType& x)
{
  this->sid_.set (x);
}

void Member_t::
sid (const SidOptional& x)
{
  this->sid_ = x;
}

void Member_t::
sid (::std::unique_ptr< SidType > x)
{
  this->sid_.set (std::move (x));
}


// Members_t
// 

const Members_t::MemberSequence& Members_t::
Member () const
{
  return this->Member_;
}

Members_t::MemberSequence& Members_t::
Member ()
{
  return this->Member_;
}

void Members_t::
Member (const MemberSequence& s)
{
  this->Member_ = s;
}


// GroupProperties_t
// 

const GroupProperties_t::MembersSequence& GroupProperties_t::
Members () const
{
  return this->Members_;
}

GroupProperties_t::MembersSequence& GroupProperties_t::
Members ()
{
  return this->Members_;
}

void GroupProperties_t::
Members (const MembersSequence& s)
{
  this->Members_ = s;
}

const GroupProperties_t::ActionOptional& GroupProperties_t::
action () const
{
  return this->action_;
}

GroupProperties_t::ActionOptional& GroupProperties_t::
action ()
{
  return this->action_;
}

void GroupProperties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void GroupProperties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void GroupProperties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const GroupProperties_t::NewNameOptional& GroupProperties_t::
newName () const
{
  return this->newName_;
}

GroupProperties_t::NewNameOptional& GroupProperties_t::
newName ()
{
  return this->newName_;
}

void GroupProperties_t::
newName (const NewNameType& x)
{
  this->newName_.set (x);
}

void GroupProperties_t::
newName (const NewNameOptional& x)
{
  this->newName_ = x;
}

void GroupProperties_t::
newName (::std::unique_ptr< NewNameType > x)
{
  this->newName_.set (std::move (x));
}

const GroupProperties_t::DescriptionOptional& GroupProperties_t::
description () const
{
  return this->description_;
}

GroupProperties_t::DescriptionOptional& GroupProperties_t::
description ()
{
  return this->description_;
}

void GroupProperties_t::
description (const DescriptionType& x)
{
  this->description_.set (x);
}

void GroupProperties_t::
description (const DescriptionOptional& x)
{
  this->description_ = x;
}

void GroupProperties_t::
description (::std::unique_ptr< DescriptionType > x)
{
  this->description_.set (std::move (x));
}

const GroupProperties_t::UserActionOptional& GroupProperties_t::
userAction () const
{
  return this->userAction_;
}

GroupProperties_t::UserActionOptional& GroupProperties_t::
userAction ()
{
  return this->userAction_;
}

void GroupProperties_t::
userAction (const UserActionType& x)
{
  this->userAction_.set (x);
}

void GroupProperties_t::
userAction (const UserActionOptional& x)
{
  this->userAction_ = x;
}

void GroupProperties_t::
userAction (::std::unique_ptr< UserActionType > x)
{
  this->userAction_.set (std::move (x));
}

const GroupProperties_t::DeleteAllUsersOptional& GroupProperties_t::
deleteAllUsers () const
{
  return this->deleteAllUsers_;
}

GroupProperties_t::DeleteAllUsersOptional& GroupProperties_t::
deleteAllUsers ()
{
  return this->deleteAllUsers_;
}

void GroupProperties_t::
deleteAllUsers (const DeleteAllUsersType& x)
{
  this->deleteAllUsers_.set (x);
}

void GroupProperties_t::
deleteAllUsers (const DeleteAllUsersOptional& x)
{
  this->deleteAllUsers_ = x;
}

const GroupProperties_t::DeleteAllGroupsOptional& GroupProperties_t::
deleteAllGroups () const
{
  return this->deleteAllGroups_;
}

GroupProperties_t::DeleteAllGroupsOptional& GroupProperties_t::
deleteAllGroups ()
{
  return this->deleteAllGroups_;
}

void GroupProperties_t::
deleteAllGroups (const DeleteAllGroupsType& x)
{
  this->deleteAllGroups_.set (x);
}

void GroupProperties_t::
deleteAllGroups (const DeleteAllGroupsOptional& x)
{
  this->deleteAllGroups_ = x;
}

const GroupProperties_t::RemoveAccountsOptional& GroupProperties_t::
removeAccounts () const
{
  return this->removeAccounts_;
}

GroupProperties_t::RemoveAccountsOptional& GroupProperties_t::
removeAccounts ()
{
  return this->removeAccounts_;
}

void GroupProperties_t::
removeAccounts (const RemoveAccountsType& x)
{
  this->removeAccounts_.set (x);
}

void GroupProperties_t::
removeAccounts (const RemoveAccountsOptional& x)
{
  this->removeAccounts_ = x;
}

const GroupProperties_t::GroupNameType& GroupProperties_t::
groupName () const
{
  return this->groupName_.get ();
}

GroupProperties_t::GroupNameType& GroupProperties_t::
groupName ()
{
  return this->groupName_.get ();
}

void GroupProperties_t::
groupName (const GroupNameType& x)
{
  this->groupName_.set (x);
}

void GroupProperties_t::
groupName (::std::unique_ptr< GroupNameType > x)
{
  this->groupName_.set (std::move (x));
}

const GroupProperties_t::GroupSidOptional& GroupProperties_t::
groupSid () const
{
  return this->groupSid_;
}

GroupProperties_t::GroupSidOptional& GroupProperties_t::
groupSid ()
{
  return this->groupSid_;
}

void GroupProperties_t::
groupSid (const GroupSidType& x)
{
  this->groupSid_.set (x);
}

void GroupProperties_t::
groupSid (const GroupSidOptional& x)
{
  this->groupSid_ = x;
}

void GroupProperties_t::
groupSid (::std::unique_ptr< GroupSidType > x)
{
  this->groupSid_.set (std::move (x));
}

const GroupProperties_t::DisabledOptional& GroupProperties_t::
disabled () const
{
  return this->disabled_;
}

GroupProperties_t::DisabledOptional& GroupProperties_t::
disabled ()
{
  return this->disabled_;
}

void GroupProperties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void GroupProperties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Group_t
// 

const Group_t::PropertiesSequence& Group_t::
Properties () const
{
  return this->Properties_;
}

Group_t::PropertiesSequence& Group_t::
Properties ()
{
  return this->Properties_;
}

void Group_t::
Properties (const PropertiesSequence& s)
{
  this->Properties_ = s;
}

const Group_t::ClsidType& Group_t::
clsid () const
{
  return this->clsid_.get ();
}

Group_t::ClsidType& Group_t::
clsid ()
{
  return this->clsid_.get ();
}

void Group_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Group_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Group_t::NameType& Group_t::
name () const
{
  return this->name_.get ();
}

Group_t::NameType& Group_t::
name ()
{
  return this->name_.get ();
}

void Group_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void Group_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Group_t::ImageOptional& Group_t::
image () const
{
  return this->image_;
}

Group_t::ImageOptional& Group_t::
image ()
{
  return this->image_;
}

void Group_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void Group_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const Group_t::StatusOptional& Group_t::
status () const
{
  return this->status_;
}

Group_t::StatusOptional& Group_t::
status ()
{
  return this->status_;
}

void Group_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void Group_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void Group_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}

const Group_t::ChangedOptional& Group_t::
changed () const
{
  return this->changed_;
}

Group_t::ChangedOptional& Group_t::
changed ()
{
  return this->changed_;
}

void Group_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void Group_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void Group_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const Group_t::UidType& Group_t::
uid () const
{
  return this->uid_.get ();
}

Group_t::UidType& Group_t::
uid ()
{
  return this->uid_.get ();
}

void Group_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void Group_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const Group_t::DescOptional& Group_t::
desc () const
{
  return this->desc_;
}

Group_t::DescOptional& Group_t::
desc ()
{
  return this->desc_;
}

void Group_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void Group_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void Group_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const Group_t::BypassErrorsOptional& Group_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

Group_t::BypassErrorsOptional& Group_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void Group_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void Group_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const Group_t::UserContextOptional& Group_t::
userContext () const
{
  return this->userContext_;
}

Group_t::UserContextOptional& Group_t::
userContext ()
{
  return this->userContext_;
}

void Group_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void Group_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const Group_t::RemovePolicyOptional& Group_t::
removePolicy () const
{
  return this->removePolicy_;
}

Group_t::RemovePolicyOptional& Group_t::
removePolicy ()
{
  return this->removePolicy_;
}

void Group_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void Group_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}


// Groups
// 

const Groups::UserSequence& Groups::
User () const
{
  return this->User_;
}

Groups::UserSequence& Groups::
User ()
{
  return this->User_;
}

void Groups::
User (const UserSequence& s)
{
  this->User_ = s;
}

const Groups::GroupSequence& Groups::
Group () const
{
  return this->Group_;
}

Groups::GroupSequence& Groups::
Group ()
{
  return this->Group_;
}

void Groups::
Group (const GroupSequence& s)
{
  this->Group_ = s;
}

const Groups::ClsidType& Groups::
clsid () const
{
  return this->clsid_.get ();
}

Groups::ClsidType& Groups::
clsid ()
{
  return this->clsid_.get ();
}

void Groups::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void Groups::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const Groups::DisabledOptional& Groups::
disabled () const
{
  return this->disabled_;
}

Groups::DisabledOptional& Groups::
disabled ()
{
  return this->disabled_;
}

void Groups::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Groups::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// UserProperties_t
//

UserProperties_t::
UserProperties_t (const NewNameType& newName,
                  const FullNameType& fullName,
                  const UserNameType& userName)
: ::xml_schema::Type (),
  action_ (this),
  newName_ (newName, this),
  fullName_ (fullName, this),
  description_ (this),
  cpassword_ (this),
  changeLogon_ (this),
  noChange_ (this),
  neverExpires_ (this),
  acctDisabled_ (this),
  userName_ (userName, this),
  expires_ (this)
{
}

UserProperties_t::
UserProperties_t (const UserProperties_t& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  action_ (x.action_, f, this),
  newName_ (x.newName_, f, this),
  fullName_ (x.fullName_, f, this),
  description_ (x.description_, f, this),
  cpassword_ (x.cpassword_, f, this),
  changeLogon_ (x.changeLogon_, f, this),
  noChange_ (x.noChange_, f, this),
  neverExpires_ (x.neverExpires_, f, this),
  acctDisabled_ (x.acctDisabled_, f, this),
  userName_ (x.userName_, f, this),
  expires_ (x.expires_, f, this)
{
}

UserProperties_t::
UserProperties_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  action_ (this),
  newName_ (this),
  fullName_ (this),
  description_ (this),
  cpassword_ (this),
  changeLogon_ (this),
  noChange_ (this),
  neverExpires_ (this),
  acctDisabled_ (this),
  userName_ (this),
  expires_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void UserProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "newName" && n.namespace_ ().empty ())
    {
      this->newName_.set (NewNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "fullName" && n.namespace_ ().empty ())
    {
      this->fullName_.set (FullNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      this->description_.set (DescriptionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cpassword" && n.namespace_ ().empty ())
    {
      this->cpassword_.set (CpasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changeLogon" && n.namespace_ ().empty ())
    {
      this->changeLogon_.set (ChangeLogonTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "noChange" && n.namespace_ ().empty ())
    {
      this->noChange_.set (NoChangeTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "neverExpires" && n.namespace_ ().empty ())
    {
      this->neverExpires_.set (NeverExpiresTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "acctDisabled" && n.namespace_ ().empty ())
    {
      this->acctDisabled_.set (AcctDisabledTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userName" && n.namespace_ ().empty ())
    {
      this->userName_.set (UserNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "expires" && n.namespace_ ().empty ())
    {
      this->expires_.set (ExpiresTraits::create (i, f, this));
      continue;
    }
  }

  if (!newName_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "newName",
      "");
  }

  if (!fullName_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "fullName",
      "");
  }

  if (!userName_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "userName",
      "");
  }
}

UserProperties_t* UserProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class UserProperties_t (*this, f, c);
}

UserProperties_t& UserProperties_t::
operator= (const UserProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->action_ = x.action_;
    this->newName_ = x.newName_;
    this->fullName_ = x.fullName_;
    this->description_ = x.description_;
    this->cpassword_ = x.cpassword_;
    this->changeLogon_ = x.changeLogon_;
    this->noChange_ = x.noChange_;
    this->neverExpires_ = x.neverExpires_;
    this->acctDisabled_ = x.acctDisabled_;
    this->userName_ = x.userName_;
    this->expires_ = x.expires_;
  }

  return *this;
}

UserProperties_t::
~UserProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, UserProperties_t >
_xsd_UserProperties_t_type_factory_init (
  "UserProperties_t",
  "");

// User_t
//

User_t::
User_t (const ClsidType& clsid,
        const NameType& name,
        const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
}

User_t::
User_t (const User_t& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  status_ (x.status_, f, this)
{
}

User_t::
User_t (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void User_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

User_t* User_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class User_t (*this, f, c);
}

User_t& User_t::
operator= (const User_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->status_ = x.status_;
  }

  return *this;
}

User_t::
~User_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, User_t >
_xsd_User_t_type_factory_init (
  "User_t",
  "");

// Member_t
//

Member_t::
Member_t ()
: ::xml_schema::Type (),
  name_ (this),
  action_ (this),
  sid_ (this)
{
}

Member_t::
Member_t (const Member_t& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  name_ (x.name_, f, this),
  action_ (x.action_, f, this),
  sid_ (x.sid_, f, this)
{
}

Member_t::
Member_t (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  name_ (this),
  action_ (this),
  sid_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Member_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "sid" && n.namespace_ ().empty ())
    {
      this->sid_.set (SidTraits::create (i, f, this));
      continue;
    }
  }
}

Member_t* Member_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Member_t (*this, f, c);
}

Member_t& Member_t::
operator= (const Member_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->name_ = x.name_;
    this->action_ = x.action_;
    this->sid_ = x.sid_;
  }

  return *this;
}

Member_t::
~Member_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Member_t >
_xsd_Member_t_type_factory_init (
  "Member_t",
  "");

// Members_t
//

Members_t::
Members_t ()
: ::xml_schema::Type (),
  Member_ (this)
{
}

Members_t::
Members_t (const Members_t& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Member_ (x.Member_, f, this)
{
}

Members_t::
Members_t (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Member_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Members_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Member
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Member",
          "",
          &::xsd::cxx::tree::factory_impl< MemberType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< MemberType > r (
          dynamic_cast< MemberType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Member_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }
}

Members_t* Members_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Members_t (*this, f, c);
}

Members_t& Members_t::
operator= (const Members_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Member_ = x.Member_;
  }

  return *this;
}

Members_t::
~Members_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Members_t >
_xsd_Members_t_type_factory_init (
  "Members_t",
  "");

// GroupProperties_t
//

GroupProperties_t::
GroupProperties_t (const GroupNameType& groupName)
: ::xml_schema::Type (),
  Members_ (this),
  action_ (this),
  newName_ (this),
  description_ (this),
  userAction_ (this),
  deleteAllUsers_ (this),
  deleteAllGroups_ (this),
  removeAccounts_ (this),
  groupName_ (groupName, this),
  groupSid_ (this),
  disabled_ (this)
{
}

GroupProperties_t::
GroupProperties_t (const GroupProperties_t& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Members_ (x.Members_, f, this),
  action_ (x.action_, f, this),
  newName_ (x.newName_, f, this),
  description_ (x.description_, f, this),
  userAction_ (x.userAction_, f, this),
  deleteAllUsers_ (x.deleteAllUsers_, f, this),
  deleteAllGroups_ (x.deleteAllGroups_, f, this),
  removeAccounts_ (x.removeAccounts_, f, this),
  groupName_ (x.groupName_, f, this),
  groupSid_ (x.groupSid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

GroupProperties_t::
GroupProperties_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Members_ (this),
  action_ (this),
  newName_ (this),
  description_ (this),
  userAction_ (this),
  deleteAllUsers_ (this),
  deleteAllGroups_ (this),
  removeAccounts_ (this),
  groupName_ (this),
  groupSid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void GroupProperties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Members
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Members",
          "",
          &::xsd::cxx::tree::factory_impl< MembersType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< MembersType > r (
          dynamic_cast< MembersType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Members_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "newName" && n.namespace_ ().empty ())
    {
      this->newName_.set (NewNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      this->description_.set (DescriptionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userAction" && n.namespace_ ().empty ())
    {
      this->userAction_.set (UserActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteAllUsers" && n.namespace_ ().empty ())
    {
      this->deleteAllUsers_.set (DeleteAllUsersTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "deleteAllGroups" && n.namespace_ ().empty ())
    {
      this->deleteAllGroups_.set (DeleteAllGroupsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removeAccounts" && n.namespace_ ().empty ())
    {
      this->removeAccounts_.set (RemoveAccountsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "groupName" && n.namespace_ ().empty ())
    {
      this->groupName_.set (GroupNameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "groupSid" && n.namespace_ ().empty ())
    {
      this->groupSid_.set (GroupSidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!groupName_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "groupName",
      "");
  }
}

GroupProperties_t* GroupProperties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class GroupProperties_t (*this, f, c);
}

GroupProperties_t& GroupProperties_t::
operator= (const GroupProperties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Members_ = x.Members_;
    this->action_ = x.action_;
    this->newName_ = x.newName_;
    this->description_ = x.description_;
    this->userAction_ = x.userAction_;
    this->deleteAllUsers_ = x.deleteAllUsers_;
    this->deleteAllGroups_ = x.deleteAllGroups_;
    this->removeAccounts_ = x.removeAccounts_;
    this->groupName_ = x.groupName_;
    this->groupSid_ = x.groupSid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

GroupProperties_t::
~GroupProperties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, GroupProperties_t >
_xsd_GroupProperties_t_type_factory_init (
  "GroupProperties_t",
  "");

// Group_t
//

Group_t::
Group_t (const ClsidType& clsid,
         const NameType& name,
         const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  status_ (this),
  changed_ (this),
  uid_ (uid, this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
}

Group_t::
Group_t (const Group_t& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  status_ (x.status_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  desc_ (x.desc_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this)
{
}

Group_t::
Group_t (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  status_ (this),
  changed_ (this),
  uid_ (this),
  desc_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Group_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< PropertiesType > r (
          dynamic_cast< PropertiesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Properties_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

Group_t* Group_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Group_t (*this, f, c);
}

Group_t& Group_t::
operator= (const Group_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->status_ = x.status_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->desc_ = x.desc_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
  }

  return *this;
}

Group_t::
~Group_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Group_t >
_xsd_Group_t_type_factory_init (
  "Group_t",
  "");

// Groups
//

Groups::
Groups (const ClsidType& clsid)
: ::xml_schema::Type (),
  User_ (this),
  Group_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

Groups::
Groups (const Groups& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  User_ (x.User_, f, this),
  Group_ (x.Group_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Groups::
Groups (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  User_ (this),
  Group_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Groups::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // User
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "User",
          "",
          &::xsd::cxx::tree::factory_impl< UserType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< UserType > r (
          dynamic_cast< UserType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->User_.push_back (::std::move (r));
        continue;
      }
    }

    // Group
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Group",
          "",
          &::xsd::cxx::tree::factory_impl< GroupType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< GroupType > r (
          dynamic_cast< GroupType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->Group_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

Groups* Groups::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Groups (*this, f, c);
}

Groups& Groups::
operator= (const Groups& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->User_ = x.User_;
    this->Group_ = x.Group_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Groups::
~Groups ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const UserProperties_t& i)
{
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  o << ::std::endl << "newName: " << i.newName ();
  o << ::std::endl << "fullName: " << i.fullName ();
  if (i.description ())
  {
    o << ::std::endl << "description: " << *i.description ();
  }

  if (i.cpassword ())
  {
    o << ::std::endl << "cpassword: " << *i.cpassword ();
  }

  if (i.changeLogon ())
  {
    o << ::std::endl << "changeLogon: " << *i.changeLogon ();
  }

  if (i.noChange ())
  {
    o << ::std::endl << "noChange: " << *i.noChange ();
  }

  if (i.neverExpires ())
  {
    o << ::std::endl << "neverExpires: " << *i.neverExpires ();
  }

  if (i.acctDisabled ())
  {
    o << ::std::endl << "acctDisabled: " << *i.acctDisabled ();
  }

  o << ::std::endl << "userName: " << i.userName ();
  if (i.expires ())
  {
    o << ::std::endl << "expires: " << *i.expires ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, UserProperties_t >
_xsd_UserProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const User_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (User_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, User_t >
_xsd_User_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Member_t& i)
{
  if (i.name ())
  {
    o << ::std::endl << "name: " << *i.name ();
  }

  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.sid ())
  {
    o << ::std::endl << "sid: " << *i.sid ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Member_t >
_xsd_Member_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Members_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Members_t::MemberConstIterator
         b (i.Member ().begin ()), e (i.Member ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Member: ";
      om.insert (o, *b);
    }
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Members_t >
_xsd_Members_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const GroupProperties_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (GroupProperties_t::MembersConstIterator
         b (i.Members ().begin ()), e (i.Members ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Members: ";
      om.insert (o, *b);
    }
  }

  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.newName ())
  {
    o << ::std::endl << "newName: " << *i.newName ();
  }

  if (i.description ())
  {
    o << ::std::endl << "description: " << *i.description ();
  }

  if (i.userAction ())
  {
    o << ::std::endl << "userAction: " << *i.userAction ();
  }

  if (i.deleteAllUsers ())
  {
    o << ::std::endl << "deleteAllUsers: " << *i.deleteAllUsers ();
  }

  if (i.deleteAllGroups ())
  {
    o << ::std::endl << "deleteAllGroups: " << *i.deleteAllGroups ();
  }

  if (i.removeAccounts ())
  {
    o << ::std::endl << "removeAccounts: " << *i.removeAccounts ();
  }

  o << ::std::endl << "groupName: " << i.groupName ();
  if (i.groupSid ())
  {
    o << ::std::endl << "groupSid: " << *i.groupSid ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, GroupProperties_t >
_xsd_GroupProperties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Group_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Group_t::PropertiesConstIterator
         b (i.Properties ().begin ()), e (i.Properties ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Properties: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Group_t >
_xsd_Group_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Groups& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Groups::UserConstIterator
         b (i.User ().begin ()), e (i.User ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "User: ";
      om.insert (o, *b);
    }
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (Groups::GroupConstIterator
         b (i.Group ().begin ()), e (i.Group ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "Group: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Groups >
Groups_ (const ::std::string& u,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Groups > (
    ::Groups_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Groups >
Groups_ (const ::std::string& u,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Groups > (
    ::Groups_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Groups >
Groups_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Groups > (
    ::Groups_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Groups >
Groups_ (::std::istream& is,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Groups_ (isrc, f, p);
}

::std::unique_ptr< ::Groups >
Groups_ (::std::istream& is,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Groups_ (isrc, h, f, p);
}

::std::unique_ptr< ::Groups >
Groups_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Groups_ (isrc, h, f, p);
}

::std::unique_ptr< ::Groups >
Groups_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Groups_ (isrc, f, p);
}

::std::unique_ptr< ::Groups >
Groups_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Groups_ (isrc, h, f, p);
}

::std::unique_ptr< ::Groups >
Groups_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Groups_ (isrc, h, f, p);
}

::std::unique_ptr< ::Groups >
Groups_ (::xercesc::InputSource& i,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Groups > (
    ::Groups_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Groups >
Groups_ (::xercesc::InputSource& i,
         ::xml_schema::ErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Groups > (
    ::Groups_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Groups >
Groups_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Groups > (
    ::Groups_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::Groups >
Groups_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Groups > (
      ::Groups_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Groups" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Groups > r (
      ::xsd::cxx::tree::traits< ::Groups, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Groups",
    "");
}

::std::unique_ptr< ::Groups >
Groups_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::Flags f,
         const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Groups" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Groups > r (
      ::xsd::cxx::tree::traits< ::Groups, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Groups",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const UserProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // newName
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "newName",
        e));

    a << i.newName ();
  }

  // fullName
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fullName",
        e));

    a << i.fullName ();
  }

  // description
  //
  if (i.description ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "description",
        e));

    a << *i.description ();
  }

  // cpassword
  //
  if (i.cpassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cpassword",
        e));

    a << *i.cpassword ();
  }

  // changeLogon
  //
  if (i.changeLogon ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changeLogon",
        e));

    a << *i.changeLogon ();
  }

  // noChange
  //
  if (i.noChange ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "noChange",
        e));

    a << *i.noChange ();
  }

  // neverExpires
  //
  if (i.neverExpires ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "neverExpires",
        e));

    a << *i.neverExpires ();
  }

  // acctDisabled
  //
  if (i.acctDisabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "acctDisabled",
        e));

    a << *i.acctDisabled ();
  }

  // userName
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userName",
        e));

    a << i.userName ();
  }

  // expires
  //
  if (i.expires ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "expires",
        e));

    a << *i.expires ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UserProperties_t >
_xsd_UserProperties_t_type_serializer_init (
  "UserProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const User_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (User_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (User_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, User_t >
_xsd_User_t_type_serializer_init (
  "User_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Member_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << *i.name ();
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // sid
  //
  if (i.sid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sid",
        e));

    a << *i.sid ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Member_t >
_xsd_Member_t_type_serializer_init (
  "Member_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Members_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Member
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Members_t::MemberConstIterator
         b (i.Member ().begin ()), n (i.Member ().end ());
         b != n; ++b)
    {
      if (typeid (Members_t::MemberType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Member",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Member",
          "",
          false, true, e, *b);
    }
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Members_t >
_xsd_Members_t_type_serializer_init (
  "Members_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const GroupProperties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Members
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (GroupProperties_t::MembersConstIterator
         b (i.Members ().begin ()), n (i.Members ().end ());
         b != n; ++b)
    {
      if (typeid (GroupProperties_t::MembersType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Members",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Members",
          "",
          false, true, e, *b);
    }
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // newName
  //
  if (i.newName ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "newName",
        e));

    a << *i.newName ();
  }

  // description
  //
  if (i.description ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "description",
        e));

    a << *i.description ();
  }

  // userAction
  //
  if (i.userAction ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userAction",
        e));

    a << *i.userAction ();
  }

  // deleteAllUsers
  //
  if (i.deleteAllUsers ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deleteAllUsers",
        e));

    a << *i.deleteAllUsers ();
  }

  // deleteAllGroups
  //
  if (i.deleteAllGroups ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "deleteAllGroups",
        e));

    a << *i.deleteAllGroups ();
  }

  // removeAccounts
  //
  if (i.removeAccounts ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removeAccounts",
        e));

    a << *i.removeAccounts ();
  }

  // groupName
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "groupName",
        e));

    a << i.groupName ();
  }

  // groupSid
  //
  if (i.groupSid ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "groupSid",
        e));

    a << *i.groupSid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, GroupProperties_t >
_xsd_GroupProperties_t_type_serializer_init (
  "GroupProperties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const Group_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Group_t::PropertiesConstIterator
         b (i.Properties ().begin ()), n (i.Properties ().end ());
         b != n; ++b)
    {
      if (typeid (Group_t::PropertiesType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Properties",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Properties",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Group_t >
_xsd_Group_t_type_serializer_init (
  "Group_t",
  "");


void
Groups_ (::std::ostream& o,
         const ::Groups& s,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Groups_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Groups_ (::std::ostream& o,
         const ::Groups& s,
         ::xml_schema::ErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Groups_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Groups_ (::std::ostream& o,
         const ::Groups& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Groups_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Groups_ (::xercesc::XMLFormatTarget& t,
         const ::Groups& s,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Groups_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
Groups_ (::xercesc::XMLFormatTarget& t,
         const ::Groups& s,
         ::xml_schema::ErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Groups_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Groups_ (::xercesc::XMLFormatTarget& t,
         const ::Groups& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::NamespaceInfomap& m,
         const ::std::string& e,
         ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::Groups_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
Groups_ (::xercesc::DOMDocument& d,
         const ::Groups& s,
         ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Groups" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Groups",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
Groups_ (const ::Groups& s,
         const ::xml_schema::NamespaceInfomap& m,
         ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "Groups",
      "",
      m, f));

  ::Groups_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const Groups& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // User
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Groups::UserConstIterator
         b (i.User ().begin ()), n (i.User ().end ());
         b != n; ++b)
    {
      if (typeid (Groups::UserType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "User",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "User",
          "",
          false, true, e, *b);
    }
  }

  // Group
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (Groups::GroupConstIterator
         b (i.Group ().begin ()), n (i.Group ().end ());
         b != n; ++b)
    {
      if (typeid (Groups::GroupType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Group",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "Group",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


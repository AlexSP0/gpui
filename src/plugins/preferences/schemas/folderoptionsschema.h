// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from folderoptionsschema.xsd.
 */

#ifndef CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_FOLDEROPTIONSSCHEMA_H
#define CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_FOLDEROPTIONSSCHEMA_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4009911L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class GlobalFolderOptionsProperties_t;
class GlobalFolderOptions_t;
class GlobalFolderOptionsVistaProperties_t;
class GlobalFolderOptionsVista_t;
class OpenWithProperties_t;
class OpenWith_t;
class FileTypeProperties_t;
class FileType_t;
class FolderOptions;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "targetingschema.h"

/**
 * @brief Class corresponding to the %GlobalFolderOptionsProperties_t schema type.
 *
 * @nosubgrouping
 */
class GlobalFolderOptionsProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name noNetCrawling
   *
   * @brief Accessor and modifier functions for the %noNetCrawling
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean NoNetCrawlingType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NoNetCrawlingType, char > NoNetCrawlingTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NoNetCrawlingType&
  noNetCrawling () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NoNetCrawlingType&
  noNetCrawling ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  noNetCrawling (const NoNetCrawlingType& x);

  //@}

  /**
   * @name folderContentsInfoTip
   *
   * @brief Accessor and modifier functions for the %folderContentsInfoTip
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean FolderContentsInfoTipType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FolderContentsInfoTipType, char > FolderContentsInfoTipTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FolderContentsInfoTipType&
  folderContentsInfoTip () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FolderContentsInfoTipType&
  folderContentsInfoTip ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  folderContentsInfoTip (const FolderContentsInfoTipType& x);

  //@}

  /**
   * @name friendlyTree
   *
   * @brief Accessor and modifier functions for the %friendlyTree
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean FriendlyTreeType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FriendlyTreeType, char > FriendlyTreeTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FriendlyTreeType&
  friendlyTree () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FriendlyTreeType&
  friendlyTree ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  friendlyTree (const FriendlyTreeType& x);

  //@}

  /**
   * @name fullPathAddress
   *
   * @brief Accessor and modifier functions for the %fullPathAddress
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean FullPathAddressType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FullPathAddressType, char > FullPathAddressTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FullPathAddressType&
  fullPathAddress () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FullPathAddressType&
  fullPathAddress ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  fullPathAddress (const FullPathAddressType& x);

  //@}

  /**
   * @name fullPath
   *
   * @brief Accessor and modifier functions for the %fullPath
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean FullPathType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FullPathType, char > FullPathTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FullPathType&
  fullPath () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FullPathType&
  fullPath ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  fullPath (const FullPathType& x);

  //@}

  /**
   * @name disableThumbnailCache
   *
   * @brief Accessor and modifier functions for the %disableThumbnailCache
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisableThumbnailCacheType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisableThumbnailCacheType, char > DisableThumbnailCacheTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const DisableThumbnailCacheType&
  disableThumbnailCache () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  DisableThumbnailCacheType&
  disableThumbnailCache ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disableThumbnailCache (const DisableThumbnailCacheType& x);

  //@}

  /**
   * @name hidden
   *
   * @brief Accessor and modifier functions for the %hidden
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String HiddenType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HiddenType, char > HiddenTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const HiddenType&
  hidden () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  HiddenType&
  hidden ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hidden (const HiddenType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  hidden (::std::unique_ptr< HiddenType > p);

  //@}

  /**
   * @name hideFileExt
   *
   * @brief Accessor and modifier functions for the %hideFileExt
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean HideFileExtType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HideFileExtType, char > HideFileExtTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const HideFileExtType&
  hideFileExt () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  HideFileExtType&
  hideFileExt ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hideFileExt (const HideFileExtType& x);

  //@}

  /**
   * @name separateProcess
   *
   * @brief Accessor and modifier functions for the %separateProcess
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean SeparateProcessType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SeparateProcessType, char > SeparateProcessTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const SeparateProcessType&
  separateProcess () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  SeparateProcessType&
  separateProcess ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  separateProcess (const SeparateProcessType& x);

  //@}

  /**
   * @name showSuperHidden
   *
   * @brief Accessor and modifier functions for the %showSuperHidden
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowSuperHiddenType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowSuperHiddenType, char > ShowSuperHiddenTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowSuperHiddenType&
  showSuperHidden () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowSuperHiddenType&
  showSuperHidden ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showSuperHidden (const ShowSuperHiddenType& x);

  //@}

  /**
   * @name classicViewState
   *
   * @brief Accessor and modifier functions for the %classicViewState
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ClassicViewStateType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClassicViewStateType, char > ClassicViewStateTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClassicViewStateType&
  classicViewState () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClassicViewStateType&
  classicViewState ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  classicViewState (const ClassicViewStateType& x);

  //@}

  /**
   * @name persistBrowsers
   *
   * @brief Accessor and modifier functions for the %persistBrowsers
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean PersistBrowsersType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PersistBrowsersType, char > PersistBrowsersTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const PersistBrowsersType&
  persistBrowsers () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  PersistBrowsersType&
  persistBrowsers ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  persistBrowsers (const PersistBrowsersType& x);

  //@}

  /**
   * @name showControlPanel
   *
   * @brief Accessor and modifier functions for the %showControlPanel
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowControlPanelType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowControlPanelType, char > ShowControlPanelTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowControlPanelType&
  showControlPanel () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowControlPanelType&
  showControlPanel ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showControlPanel (const ShowControlPanelType& x);

  //@}

  /**
   * @name showCompColor
   *
   * @brief Accessor and modifier functions for the %showCompColor
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowCompColorType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowCompColorType, char > ShowCompColorTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowCompColorType&
  showCompColor () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowCompColorType&
  showCompColor ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showCompColor (const ShowCompColorType& x);

  //@}

  /**
   * @name showInfoTip
   *
   * @brief Accessor and modifier functions for the %showInfoTip
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowInfoTipType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowInfoTipType, char > ShowInfoTipTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowInfoTipType&
  showInfoTip () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowInfoTipType&
  showInfoTip ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showInfoTip (const ShowInfoTipType& x);

  //@}

  /**
   * @name forceGuest
   *
   * @brief Accessor and modifier functions for the %forceGuest
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ForceGuestType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ForceGuestType, char > ForceGuestTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ForceGuestType&
  forceGuest () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ForceGuestType&
  forceGuest ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  forceGuest (const ForceGuestType& x);

  //@}

  /**
   * @name webViewBarricade
   *
   * @brief Accessor and modifier functions for the %webViewBarricade
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean WebViewBarricadeType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< WebViewBarricadeType, char > WebViewBarricadeTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const WebViewBarricadeType&
  webViewBarricade () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  WebViewBarricadeType&
  webViewBarricade ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  webViewBarricade (const WebViewBarricadeType& x);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalFolderOptionsProperties_t (const NoNetCrawlingType&,
                                   const FolderContentsInfoTipType&,
                                   const FriendlyTreeType&,
                                   const FullPathAddressType&,
                                   const FullPathType&,
                                   const DisableThumbnailCacheType&,
                                   const HiddenType&,
                                   const HideFileExtType&,
                                   const SeparateProcessType&,
                                   const ShowSuperHiddenType&,
                                   const ClassicViewStateType&,
                                   const PersistBrowsersType&,
                                   const ShowControlPanelType&,
                                   const ShowCompColorType&,
                                   const ShowInfoTipType&,
                                   const ForceGuestType&,
                                   const WebViewBarricadeType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalFolderOptionsProperties_t (const ::xercesc::DOMElement& e,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptionsProperties_t (const GlobalFolderOptionsProperties_t& x,
                                   ::xml_schema::Flags f = 0,
                                   ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalFolderOptionsProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptionsProperties_t&
  operator= (const GlobalFolderOptionsProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalFolderOptionsProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< NoNetCrawlingType > noNetCrawling_;
  ::xsd::cxx::tree::one< FolderContentsInfoTipType > folderContentsInfoTip_;
  ::xsd::cxx::tree::one< FriendlyTreeType > friendlyTree_;
  ::xsd::cxx::tree::one< FullPathAddressType > fullPathAddress_;
  ::xsd::cxx::tree::one< FullPathType > fullPath_;
  ::xsd::cxx::tree::one< DisableThumbnailCacheType > disableThumbnailCache_;
  ::xsd::cxx::tree::one< HiddenType > hidden_;
  ::xsd::cxx::tree::one< HideFileExtType > hideFileExt_;
  ::xsd::cxx::tree::one< SeparateProcessType > separateProcess_;
  ::xsd::cxx::tree::one< ShowSuperHiddenType > showSuperHidden_;
  ::xsd::cxx::tree::one< ClassicViewStateType > classicViewState_;
  ::xsd::cxx::tree::one< PersistBrowsersType > persistBrowsers_;
  ::xsd::cxx::tree::one< ShowControlPanelType > showControlPanel_;
  ::xsd::cxx::tree::one< ShowCompColorType > showCompColor_;
  ::xsd::cxx::tree::one< ShowInfoTipType > showInfoTip_;
  ::xsd::cxx::tree::one< ForceGuestType > forceGuest_;
  ::xsd::cxx::tree::one< WebViewBarricadeType > webViewBarricade_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalFolderOptions_t schema type.
 *
 * @nosubgrouping
 */
class GlobalFolderOptions_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Filters
   *
   * @brief Accessor and modifier functions for the %Filters
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Filters_t FiltersType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< FiltersType, char > FiltersTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const FiltersType&
  Filters () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  FiltersType&
  Filters ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  Filters (const FiltersType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  Filters (::std::unique_ptr< FiltersType > p);

  //@}

  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalFolderOptionsProperties_t PropertiesType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const PropertiesType&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  PropertiesType&
  Properties ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  Properties (const PropertiesType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  Properties (::std::unique_ptr< PropertiesType > p);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name status
   *
   * @brief Accessor and modifier functions for the %status
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StatusType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StatusType > StatusOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StatusOptional&
  status () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StatusOptional&
  status ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  status (const StatusType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  status (const StatusOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  status (::std::unique_ptr< StatusType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalFolderOptions_t (const FiltersType&,
                         const PropertiesType&,
                         const ClsidType&,
                         const NameType&,
                         const UidType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (::std::unique_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  GlobalFolderOptions_t (::std::unique_ptr< FiltersType >,
                         ::std::unique_ptr< PropertiesType >,
                         const ClsidType&,
                         const NameType&,
                         const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalFolderOptions_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptions_t (const GlobalFolderOptions_t& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalFolderOptions_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptions_t&
  operator= (const GlobalFolderOptions_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalFolderOptions_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< FiltersType > Filters_;
  ::xsd::cxx::tree::one< PropertiesType > Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ImageOptional image_;
  ::xsd::cxx::tree::one< NameType > name_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;
  StatusOptional status_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalFolderOptionsVistaProperties_t schema type.
 *
 * @nosubgrouping
 */
class GlobalFolderOptionsVistaProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name alwaysShowIcons
   *
   * @brief Accessor and modifier functions for the %alwaysShowIcons
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean AlwaysShowIconsType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AlwaysShowIconsType, char > AlwaysShowIconsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const AlwaysShowIconsType&
  alwaysShowIcons () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  AlwaysShowIconsType&
  alwaysShowIcons ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  alwaysShowIcons (const AlwaysShowIconsType& x);

  //@}

  /**
   * @name alwaysShowMenus
   *
   * @brief Accessor and modifier functions for the %alwaysShowMenus
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean AlwaysShowMenusType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AlwaysShowMenusType, char > AlwaysShowMenusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const AlwaysShowMenusType&
  alwaysShowMenus () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  AlwaysShowMenusType&
  alwaysShowMenus ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  alwaysShowMenus (const AlwaysShowMenusType& x);

  //@}

  /**
   * @name displayIconThumb
   *
   * @brief Accessor and modifier functions for the %displayIconThumb
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisplayIconThumbType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisplayIconThumbType, char > DisplayIconThumbTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const DisplayIconThumbType&
  displayIconThumb () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  DisplayIconThumbType&
  displayIconThumb ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  displayIconThumb (const DisplayIconThumbType& x);

  //@}

  /**
   * @name displayFileSize
   *
   * @brief Accessor and modifier functions for the %displayFileSize
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisplayFileSizeType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisplayFileSizeType, char > DisplayFileSizeTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const DisplayFileSizeType&
  displayFileSize () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  DisplayFileSizeType&
  displayFileSize ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  displayFileSize (const DisplayFileSizeType& x);

  //@}

  /**
   * @name displaySimpleFolders
   *
   * @brief Accessor and modifier functions for the %displaySimpleFolders
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisplaySimpleFoldersType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisplaySimpleFoldersType, char > DisplaySimpleFoldersTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const DisplaySimpleFoldersType&
  displaySimpleFolders () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  DisplaySimpleFoldersType&
  displaySimpleFolders ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  displaySimpleFolders (const DisplaySimpleFoldersType& x);

  //@}

  /**
   * @name fullPath
   *
   * @brief Accessor and modifier functions for the %fullPath
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean FullPathType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FullPathType, char > FullPathTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FullPathType&
  fullPath () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FullPathType&
  fullPath ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  fullPath (const FullPathType& x);

  //@}

  /**
   * @name hidden
   *
   * @brief Accessor and modifier functions for the %hidden
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String HiddenType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HiddenType, char > HiddenTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const HiddenType&
  hidden () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  HiddenType&
  hidden ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hidden (const HiddenType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  hidden (::std::unique_ptr< HiddenType > p);

  //@}

  /**
   * @name hideFileExt
   *
   * @brief Accessor and modifier functions for the %hideFileExt
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean HideFileExtType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HideFileExtType, char > HideFileExtTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const HideFileExtType&
  hideFileExt () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  HideFileExtType&
  hideFileExt ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hideFileExt (const HideFileExtType& x);

  //@}

  /**
   * @name showSuperHidden
   *
   * @brief Accessor and modifier functions for the %showSuperHidden
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowSuperHiddenType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowSuperHiddenType, char > ShowSuperHiddenTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowSuperHiddenType&
  showSuperHidden () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowSuperHiddenType&
  showSuperHidden ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showSuperHidden (const ShowSuperHiddenType& x);

  //@}

  /**
   * @name separateProcess
   *
   * @brief Accessor and modifier functions for the %separateProcess
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean SeparateProcessType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SeparateProcessType, char > SeparateProcessTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const SeparateProcessType&
  separateProcess () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  SeparateProcessType&
  separateProcess ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  separateProcess (const SeparateProcessType& x);

  //@}

  /**
   * @name classicViewState
   *
   * @brief Accessor and modifier functions for the %classicViewState
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ClassicViewStateType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClassicViewStateType, char > ClassicViewStateTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClassicViewStateType&
  classicViewState () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClassicViewStateType&
  classicViewState ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  classicViewState (const ClassicViewStateType& x);

  //@}

  /**
   * @name persistBrowsers
   *
   * @brief Accessor and modifier functions for the %persistBrowsers
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean PersistBrowsersType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PersistBrowsersType, char > PersistBrowsersTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const PersistBrowsersType&
  persistBrowsers () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  PersistBrowsersType&
  persistBrowsers ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  persistBrowsers (const PersistBrowsersType& x);

  //@}

  /**
   * @name showDriveLetter
   *
   * @brief Accessor and modifier functions for the %showDriveLetter
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowDriveLetterType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowDriveLetterType, char > ShowDriveLetterTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowDriveLetterType&
  showDriveLetter () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowDriveLetterType&
  showDriveLetter ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showDriveLetter (const ShowDriveLetterType& x);

  //@}

  /**
   * @name showCompColor
   *
   * @brief Accessor and modifier functions for the %showCompColor
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowCompColorType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowCompColorType, char > ShowCompColorTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowCompColorType&
  showCompColor () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowCompColorType&
  showCompColor ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showCompColor (const ShowCompColorType& x);

  //@}

  /**
   * @name showInfoTip
   *
   * @brief Accessor and modifier functions for the %showInfoTip
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowInfoTipType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowInfoTipType, char > ShowInfoTipTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowInfoTipType&
  showInfoTip () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowInfoTipType&
  showInfoTip ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showInfoTip (const ShowInfoTipType& x);

  //@}

  /**
   * @name showPreviewHandlers
   *
   * @brief Accessor and modifier functions for the %showPreviewHandlers
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowPreviewHandlersType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowPreviewHandlersType, char > ShowPreviewHandlersTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ShowPreviewHandlersType&
  showPreviewHandlers () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ShowPreviewHandlersType&
  showPreviewHandlers ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showPreviewHandlers (const ShowPreviewHandlersType& x);

  //@}

  /**
   * @name useCheckBoxes
   *
   * @brief Accessor and modifier functions for the %useCheckBoxes
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UseCheckBoxesType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UseCheckBoxesType, char > UseCheckBoxesTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UseCheckBoxesType&
  useCheckBoxes () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UseCheckBoxesType&
  useCheckBoxes ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  useCheckBoxes (const UseCheckBoxesType& x);

  //@}

  /**
   * @name useSharingWizard
   *
   * @brief Accessor and modifier functions for the %useSharingWizard
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UseSharingWizardType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UseSharingWizardType, char > UseSharingWizardTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UseSharingWizardType&
  useSharingWizard () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UseSharingWizardType&
  useSharingWizard ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  useSharingWizard (const UseSharingWizardType& x);

  //@}

  /**
   * @name listViewTyping
   *
   * @brief Accessor and modifier functions for the %listViewTyping
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ListViewTypingType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ListViewTypingType, char > ListViewTypingTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ListViewTypingType&
  listViewTyping () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ListViewTypingType&
  listViewTyping ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  listViewTyping (const ListViewTypingType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  listViewTyping (::std::unique_ptr< ListViewTypingType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalFolderOptionsVistaProperties_t (const AlwaysShowIconsType&,
                                        const AlwaysShowMenusType&,
                                        const DisplayIconThumbType&,
                                        const DisplayFileSizeType&,
                                        const DisplaySimpleFoldersType&,
                                        const FullPathType&,
                                        const HiddenType&,
                                        const HideFileExtType&,
                                        const ShowSuperHiddenType&,
                                        const SeparateProcessType&,
                                        const ClassicViewStateType&,
                                        const PersistBrowsersType&,
                                        const ShowDriveLetterType&,
                                        const ShowCompColorType&,
                                        const ShowInfoTipType&,
                                        const ShowPreviewHandlersType&,
                                        const UseCheckBoxesType&,
                                        const UseSharingWizardType&,
                                        const ListViewTypingType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalFolderOptionsVistaProperties_t (const ::xercesc::DOMElement& e,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptionsVistaProperties_t (const GlobalFolderOptionsVistaProperties_t& x,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalFolderOptionsVistaProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptionsVistaProperties_t&
  operator= (const GlobalFolderOptionsVistaProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalFolderOptionsVistaProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< AlwaysShowIconsType > alwaysShowIcons_;
  ::xsd::cxx::tree::one< AlwaysShowMenusType > alwaysShowMenus_;
  ::xsd::cxx::tree::one< DisplayIconThumbType > displayIconThumb_;
  ::xsd::cxx::tree::one< DisplayFileSizeType > displayFileSize_;
  ::xsd::cxx::tree::one< DisplaySimpleFoldersType > displaySimpleFolders_;
  ::xsd::cxx::tree::one< FullPathType > fullPath_;
  ::xsd::cxx::tree::one< HiddenType > hidden_;
  ::xsd::cxx::tree::one< HideFileExtType > hideFileExt_;
  ::xsd::cxx::tree::one< ShowSuperHiddenType > showSuperHidden_;
  ::xsd::cxx::tree::one< SeparateProcessType > separateProcess_;
  ::xsd::cxx::tree::one< ClassicViewStateType > classicViewState_;
  ::xsd::cxx::tree::one< PersistBrowsersType > persistBrowsers_;
  ::xsd::cxx::tree::one< ShowDriveLetterType > showDriveLetter_;
  ::xsd::cxx::tree::one< ShowCompColorType > showCompColor_;
  ::xsd::cxx::tree::one< ShowInfoTipType > showInfoTip_;
  ::xsd::cxx::tree::one< ShowPreviewHandlersType > showPreviewHandlers_;
  ::xsd::cxx::tree::one< UseCheckBoxesType > useCheckBoxes_;
  ::xsd::cxx::tree::one< UseSharingWizardType > useSharingWizard_;
  ::xsd::cxx::tree::one< ListViewTypingType > listViewTyping_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalFolderOptionsVista_t schema type.
 *
 * @nosubgrouping
 */
class GlobalFolderOptionsVista_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Filters
   *
   * @brief Accessor and modifier functions for the %Filters
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::Filters_t FiltersType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< FiltersType, char > FiltersTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const FiltersType&
  Filters () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  FiltersType&
  Filters ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  Filters (const FiltersType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  Filters (::std::unique_ptr< FiltersType > p);

  //@}

  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalFolderOptionsVistaProperties_t PropertiesType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const PropertiesType&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  PropertiesType&
  Properties ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  Properties (const PropertiesType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  Properties (::std::unique_ptr< PropertiesType > p);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalFolderOptionsVista_t (const FiltersType&,
                              const PropertiesType&,
                              const ClsidType&,
                              const NameType&,
                              const UidType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (::std::unique_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  GlobalFolderOptionsVista_t (::std::unique_ptr< FiltersType >,
                              ::std::unique_ptr< PropertiesType >,
                              const ClsidType&,
                              const NameType&,
                              const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalFolderOptionsVista_t (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptionsVista_t (const GlobalFolderOptionsVista_t& x,
                              ::xml_schema::Flags f = 0,
                              ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalFolderOptionsVista_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalFolderOptionsVista_t&
  operator= (const GlobalFolderOptionsVista_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalFolderOptionsVista_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< FiltersType > Filters_;
  ::xsd::cxx::tree::one< PropertiesType > Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ImageOptional image_;
  ::xsd::cxx::tree::one< NameType > name_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;

  //@endcond
};

/**
 * @brief Class corresponding to the %OpenWithProperties_t schema type.
 *
 * @nosubgrouping
 */
class OpenWithProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name action
   *
   * @brief Accessor and modifier functions for the %action
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ActionType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ActionOptional&
  action () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ActionOptional&
  action ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  action (const ActionType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  action (const ActionOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  action (::std::unique_ptr< ActionType > p);

  //@}

  /**
   * @name fileExtension
   *
   * @brief Accessor and modifier functions for the %fileExtension
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String FileExtensionType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FileExtensionType, char > FileExtensionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FileExtensionType&
  fileExtension () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FileExtensionType&
  fileExtension ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  fileExtension (const FileExtensionType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  fileExtension (::std::unique_ptr< FileExtensionType > p);

  //@}

  /**
   * @name applicationPath
   *
   * @brief Accessor and modifier functions for the %applicationPath
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ApplicationPathType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ApplicationPathType, char > ApplicationPathTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ApplicationPathType&
  applicationPath () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ApplicationPathType&
  applicationPath ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  applicationPath (const ApplicationPathType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  applicationPath (::std::unique_ptr< ApplicationPathType > p);

  //@}

  /**
   * @name default
   *
   * @brief Accessor and modifier functions for the %default
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DefaultType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DefaultType > DefaultOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DefaultType, char > DefaultTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DefaultOptional&
  default_ () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DefaultOptional&
  default_ ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  default_ (const DefaultType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  default_ (const DefaultOptional& x);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  OpenWithProperties_t (const FileExtensionType&,
                        const ApplicationPathType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  OpenWithProperties_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  OpenWithProperties_t (const OpenWithProperties_t& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual OpenWithProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  OpenWithProperties_t&
  operator= (const OpenWithProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~OpenWithProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ActionOptional action_;
  ::xsd::cxx::tree::one< FileExtensionType > fileExtension_;
  ::xsd::cxx::tree::one< ApplicationPathType > applicationPath_;
  DefaultOptional default__;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %OpenWith_t schema type.
 *
 * @nosubgrouping
 */
class OpenWith_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::OpenWithProperties_t PropertiesType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const PropertiesType&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  PropertiesType&
  Properties ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  Properties (const PropertiesType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  Properties (::std::unique_ptr< PropertiesType > p);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  OpenWith_t (const PropertiesType&,
              const ClsidType&,
              const NameType&,
              const UidType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (::std::unique_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  OpenWith_t (::std::unique_ptr< PropertiesType >,
              const ClsidType&,
              const NameType&,
              const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  OpenWith_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  OpenWith_t (const OpenWith_t& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual OpenWith_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  OpenWith_t&
  operator= (const OpenWith_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~OpenWith_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< PropertiesType > Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;

  //@endcond
};

/**
 * @brief Class corresponding to the %FileTypeProperties_t schema type.
 *
 * @nosubgrouping
 */
class FileTypeProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name action
   *
   * @brief Accessor and modifier functions for the %action
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ActionType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ActionOptional&
  action () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ActionOptional&
  action ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  action (const ActionType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  action (const ActionOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  action (::std::unique_ptr< ActionType > p);

  //@}

  /**
   * @name fileExt
   *
   * @brief Accessor and modifier functions for the %fileExt
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String FileExtType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< FileExtType, char > FileExtTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const FileExtType&
  fileExt () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  FileExtType&
  fileExt ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  fileExt (const FileExtType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  fileExt (::std::unique_ptr< FileExtType > p);

  //@}

  /**
   * @name application
   *
   * @brief Accessor and modifier functions for the %application
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ApplicationType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ApplicationType, char > ApplicationTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ApplicationType&
  application () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ApplicationType&
  application ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  application (const ApplicationType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  application (::std::unique_ptr< ApplicationType > p);

  //@}

  /**
   * @name appProgID
   *
   * @brief Accessor and modifier functions for the %appProgID
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String AppProgIDType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AppProgIDType, char > AppProgIDTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const AppProgIDType&
  appProgID () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  AppProgIDType&
  appProgID ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  appProgID (const AppProgIDType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  appProgID (::std::unique_ptr< AppProgIDType > p);

  //@}

  /**
   * @name configActions
   *
   * @brief Accessor and modifier functions for the %configActions
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ConfigActionsType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ConfigActionsType, char > ConfigActionsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ConfigActionsType&
  configActions () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ConfigActionsType&
  configActions ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  configActions (const ConfigActionsType& x);

  //@}

  /**
   * @name iconPath
   *
   * @brief Accessor and modifier functions for the %iconPath
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String IconPathType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< IconPathType > IconPathOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< IconPathType, char > IconPathTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const IconPathOptional&
  iconPath () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  IconPathOptional&
  iconPath ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  iconPath (const IconPathType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  iconPath (const IconPathOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  iconPath (::std::unique_ptr< IconPathType > p);

  //@}

  /**
   * @name iconIndex
   *
   * @brief Accessor and modifier functions for the %iconIndex
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String IconIndexType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< IconIndexType > IconIndexOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< IconIndexType, char > IconIndexTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const IconIndexOptional&
  iconIndex () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  IconIndexOptional&
  iconIndex ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  iconIndex (const IconIndexType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  iconIndex (const IconIndexOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  iconIndex (::std::unique_ptr< IconIndexType > p);

  //@}

  /**
   * @name confirmOpen
   *
   * @brief Accessor and modifier functions for the %confirmOpen
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ConfirmOpenType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ConfirmOpenType > ConfirmOpenOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ConfirmOpenType, char > ConfirmOpenTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ConfirmOpenOptional&
  confirmOpen () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ConfirmOpenOptional&
  confirmOpen ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  confirmOpen (const ConfirmOpenType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  confirmOpen (const ConfirmOpenOptional& x);

  //@}

  /**
   * @name alwaysShow
   *
   * @brief Accessor and modifier functions for the %alwaysShow
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean AlwaysShowType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< AlwaysShowType > AlwaysShowOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AlwaysShowType, char > AlwaysShowTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const AlwaysShowOptional&
  alwaysShow () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  AlwaysShowOptional&
  alwaysShow ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  alwaysShow (const AlwaysShowType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  alwaysShow (const AlwaysShowOptional& x);

  //@}

  /**
   * @name sameWindow
   *
   * @brief Accessor and modifier functions for the %sameWindow
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean SameWindowType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< SameWindowType > SameWindowOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SameWindowType, char > SameWindowTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const SameWindowOptional&
  sameWindow () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  SameWindowOptional&
  sameWindow ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  sameWindow (const SameWindowType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  sameWindow (const SameWindowOptional& x);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< NameType > NameOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const NameOptional&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  NameOptional&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  name (const NameOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name appUsed
   *
   * @brief Accessor and modifier functions for the %appUsed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String AppUsedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< AppUsedType > AppUsedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AppUsedType, char > AppUsedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const AppUsedOptional&
  appUsed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  AppUsedOptional&
  appUsed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  appUsed (const AppUsedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  appUsed (const AppUsedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  appUsed (::std::unique_ptr< AppUsedType > p);

  //@}

  /**
   * @name default
   *
   * @brief Accessor and modifier functions for the %default
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DefaultType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DefaultType > DefaultOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DefaultType, char > DefaultTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DefaultOptional&
  default_ () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DefaultOptional&
  default_ ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  default_ (const DefaultType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  default_ (const DefaultOptional& x);

  //@}

  /**
   * @name useDDE
   *
   * @brief Accessor and modifier functions for the %useDDE
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UseDDEType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UseDDEType > UseDDEOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UseDDEType, char > UseDDETraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UseDDEOptional&
  useDDE () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UseDDEOptional&
  useDDE ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  useDDE (const UseDDEType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  useDDE (const UseDDEOptional& x);

  //@}

  /**
   * @name ddeMessage
   *
   * @brief Accessor and modifier functions for the %ddeMessage
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DdeMessageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DdeMessageType > DdeMessageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DdeMessageType, char > DdeMessageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DdeMessageOptional&
  ddeMessage () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DdeMessageOptional&
  ddeMessage ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  ddeMessage (const DdeMessageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  ddeMessage (const DdeMessageOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  ddeMessage (::std::unique_ptr< DdeMessageType > p);

  //@}

  /**
   * @name ddeApplication
   *
   * @brief Accessor and modifier functions for the %ddeApplication
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DdeApplicationType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DdeApplicationType > DdeApplicationOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DdeApplicationType, char > DdeApplicationTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DdeApplicationOptional&
  ddeApplication () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DdeApplicationOptional&
  ddeApplication ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  ddeApplication (const DdeApplicationType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  ddeApplication (const DdeApplicationOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  ddeApplication (::std::unique_ptr< DdeApplicationType > p);

  //@}

  /**
   * @name ddeAppNotRunning
   *
   * @brief Accessor and modifier functions for the %ddeAppNotRunning
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DdeAppNotRunningType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DdeAppNotRunningType > DdeAppNotRunningOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DdeAppNotRunningType, char > DdeAppNotRunningTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DdeAppNotRunningOptional&
  ddeAppNotRunning () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DdeAppNotRunningOptional&
  ddeAppNotRunning ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  ddeAppNotRunning (const DdeAppNotRunningType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  ddeAppNotRunning (const DdeAppNotRunningOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  ddeAppNotRunning (::std::unique_ptr< DdeAppNotRunningType > p);

  //@}

  /**
   * @name ddeTopic
   *
   * @brief Accessor and modifier functions for the %ddeTopic
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DdeTopicType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DdeTopicType > DdeTopicOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DdeTopicType, char > DdeTopicTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DdeTopicOptional&
  ddeTopic () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DdeTopicOptional&
  ddeTopic ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  ddeTopic (const DdeTopicType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  ddeTopic (const DdeTopicOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  ddeTopic (::std::unique_ptr< DdeTopicType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  FileTypeProperties_t (const FileExtType&,
                        const ApplicationType&,
                        const AppProgIDType&,
                        const ConfigActionsType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  FileTypeProperties_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FileTypeProperties_t (const FileTypeProperties_t& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual FileTypeProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FileTypeProperties_t&
  operator= (const FileTypeProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~FileTypeProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ActionOptional action_;
  ::xsd::cxx::tree::one< FileExtType > fileExt_;
  ::xsd::cxx::tree::one< ApplicationType > application_;
  ::xsd::cxx::tree::one< AppProgIDType > appProgID_;
  ::xsd::cxx::tree::one< ConfigActionsType > configActions_;
  IconPathOptional iconPath_;
  IconIndexOptional iconIndex_;
  ConfirmOpenOptional confirmOpen_;
  AlwaysShowOptional alwaysShow_;
  SameWindowOptional sameWindow_;
  NameOptional name_;
  AppUsedOptional appUsed_;
  DefaultOptional default__;
  UseDDEOptional useDDE_;
  DdeMessageOptional ddeMessage_;
  DdeApplicationOptional ddeApplication_;
  DdeAppNotRunningOptional ddeAppNotRunning_;
  DdeTopicOptional ddeTopic_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %FileType_t schema type.
 *
 * @nosubgrouping
 */
class FileType_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::FileTypeProperties_t PropertiesType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const PropertiesType&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  PropertiesType&
  Properties ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  Properties (const PropertiesType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  Properties (::std::unique_ptr< PropertiesType > p);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  FileType_t (const PropertiesType&,
              const ClsidType&,
              const NameType&,
              const UidType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (::std::unique_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  FileType_t (::std::unique_ptr< PropertiesType >,
              const ClsidType&,
              const NameType&,
              const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  FileType_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FileType_t (const FileType_t& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual FileType_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FileType_t&
  operator= (const FileType_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~FileType_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< PropertiesType > Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;

  //@endcond
};

/**
 * @brief Class corresponding to the %FolderOptions schema type.
 *
 * @nosubgrouping
 */
class FolderOptions: public ::xml_schema::Type
{
  public:
  /**
   * @name GlobalFolderOptions
   *
   * @brief Accessor and modifier functions for the %GlobalFolderOptions
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalFolderOptions_t GlobalFolderOptionsType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< GlobalFolderOptionsType, char > GlobalFolderOptionsTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const GlobalFolderOptionsType&
  GlobalFolderOptions () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  GlobalFolderOptionsType&
  GlobalFolderOptions ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  GlobalFolderOptions (const GlobalFolderOptionsType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  GlobalFolderOptions (::std::unique_ptr< GlobalFolderOptionsType > p);

  //@}

  /**
   * @name GlobalFolderOptionsVista
   *
   * @brief Accessor and modifier functions for the %GlobalFolderOptionsVista
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalFolderOptionsVista_t GlobalFolderOptionsVistaType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< GlobalFolderOptionsVistaType, char > GlobalFolderOptionsVistaTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const GlobalFolderOptionsVistaType&
  GlobalFolderOptionsVista () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  GlobalFolderOptionsVistaType&
  GlobalFolderOptionsVista ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  GlobalFolderOptionsVista (const GlobalFolderOptionsVistaType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  GlobalFolderOptionsVista (::std::unique_ptr< GlobalFolderOptionsVistaType > p);

  //@}

  /**
   * @name OpenWith
   *
   * @brief Accessor and modifier functions for the %OpenWith
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::OpenWith_t OpenWithType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< OpenWithType, char > OpenWithTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const OpenWithType&
  OpenWith () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  OpenWithType&
  OpenWith ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  OpenWith (const OpenWithType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  OpenWith (::std::unique_ptr< OpenWithType > p);

  //@}

  /**
   * @name FileType
   *
   * @brief Accessor and modifier functions for the %FileType
   * required element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::FileType_t FileTypeType;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< FileTypeType, char > FileTypeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element.
   *
   * @return A constant reference to the element.
   */
  const FileTypeType&
  FileType () const;

  /**
   * @brief Return a read-write reference to the element.
   *
   * @return A reference to the element.
   */
  FileTypeType&
  FileType ();

  /**
   * @brief Set the element value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the element.
   */
  void
  FileType (const FileTypeType& x);

  /**
   * @brief Set the element value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  FileType (::std::unique_ptr< FileTypeType > p);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  FolderOptions (const GlobalFolderOptionsType&,
                 const GlobalFolderOptionsVistaType&,
                 const OpenWithType&,
                 const FileTypeType&,
                 const ClsidType&);

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes
   * (::std::unique_ptr version).
   *
   * This constructor will try to use the passed values directly
   * instead of making copies.
   */
  FolderOptions (::std::unique_ptr< GlobalFolderOptionsType >,
                 ::std::unique_ptr< GlobalFolderOptionsVistaType >,
                 ::std::unique_ptr< OpenWithType >,
                 ::std::unique_ptr< FileTypeType >,
                 const ClsidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  FolderOptions (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FolderOptions (const FolderOptions& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual FolderOptions*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  FolderOptions&
  operator= (const FolderOptions& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~FolderOptions ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< GlobalFolderOptionsType > GlobalFolderOptions_;
  ::xsd::cxx::tree::one< GlobalFolderOptionsVistaType > GlobalFolderOptionsVista_;
  ::xsd::cxx::tree::one< OpenWithType > OpenWith_;
  ::xsd::cxx::tree::one< FileTypeType > FileType_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  DisabledOptional disabled_;

  //@endcond
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const GlobalFolderOptionsProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalFolderOptions_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalFolderOptionsVistaProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalFolderOptionsVista_t&);

::std::ostream&
operator<< (::std::ostream&, const OpenWithProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const OpenWith_t&);

::std::ostream&
operator<< (::std::ostream&, const FileTypeProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const FileType_t&);

::std::ostream&
operator<< (::std::ostream&, const FolderOptions&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

/**
 * @name Parsing functions for the %FolderOptions document root.
 */
//@{

/**
 * @brief Parse a URI or a local file.
 *
 * @param uri A URI or a local file name.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::std::string& uri,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with an error handler.
 *
 * @param uri A URI or a local file name.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::std::string& uri,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with a Xerces-C++ DOM error
 * handler.
 *
 * @param uri A URI or a local file name.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream.
 *
 * @param is A standrad input stream.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with an error handler.
 *
 * @param is A standrad input stream.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a Xerces-C++ DOM error
 * handler.
 *
 * @param is A standrad input stream.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and an
 * error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and a
 * Xerces-C++ DOM error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source.
 *
 * @param is A Xerces-C++ input source.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xercesc::InputSource& is,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with an error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xercesc::InputSource& is,
                ::xml_schema::ErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
 * error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A pointer to the Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function is normally used together with the keep_dom and
 * own_dom parsing flags to assign ownership of the DOM document
 * to the object model.
 */
::std::unique_ptr< ::FolderOptions >
FolderOptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f = 0,
                const ::xml_schema::Properties& p = ::xml_schema::Properties ());

//@}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const GlobalFolderOptionsProperties_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalFolderOptions_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalFolderOptionsVistaProperties_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalFolderOptionsVista_t&);

void
operator<< (::xercesc::DOMElement&, const OpenWithProperties_t&);

void
operator<< (::xercesc::DOMElement&, const OpenWith_t&);

void
operator<< (::xercesc::DOMElement&, const FileTypeProperties_t&);

void
operator<< (::xercesc::DOMElement&, const FileType_t&);

/**
 * @name Serialization functions for the %FolderOptions document root.
 */
//@{

/**
 * @brief Serialize to a standard output stream.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void
FolderOptions_ (::std::ostream& os,
                const ::FolderOptions& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with an error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
FolderOptions_ (::std::ostream& os,
                const ::FolderOptions& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with a Xerces-C++ DOM
 * error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
FolderOptions_ (::std::ostream& os,
                const ::FolderOptions& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void
FolderOptions_ (::xercesc::XMLFormatTarget& ft,
                const ::FolderOptions& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with an error
 * handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
FolderOptions_ (::xercesc::XMLFormatTarget& ft,
                const ::FolderOptions& x, 
                ::xml_schema::ErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with a
 * Xerces-C++ DOM error handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
FolderOptions_ (::xercesc::XMLFormatTarget& ft,
                const ::FolderOptions& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to an existing Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param x An object model to serialize.
 * @param f Serialization flags.
 *
 * Note that it is your responsibility to create the DOM document
 * with the correct root element as well as set the necessary
 * namespace mapping attributes.
 */
void
FolderOptions_ (::xercesc::DOMDocument& d,
                const ::FolderOptions& x,
                ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a new Xerces-C++ DOM document.
 *
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param f Serialization flags.
 * @return A pointer to the new Xerces-C++ DOM document.
 */
::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
FolderOptions_ (const ::FolderOptions& x, 
                const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                ::xml_schema::Flags f = 0);

//@}

void
operator<< (::xercesc::DOMElement&, const FolderOptions&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_FOLDEROPTIONSSCHEMA_H

// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from poweroptionsschema.xsd.
 */

#ifndef CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_POWEROPTIONSSCHEMA_H
#define CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_POWEROPTIONSSCHEMA_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4009911L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class PowerSchemeProperties_t;
class PowerScheme_t;
class GlobalPowerOptionsProperties_t;
class GlobalPowerOptions_t;
class GlobalPowerOptionsV2Properties_t;
class GlobalPowerOptionsV2_t;
class PowerOptions;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

/**
 * @brief Class corresponding to the %PowerSchemeProperties_t schema type.
 *
 * @nosubgrouping
 */
class PowerSchemeProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name action
   *
   * @brief Accessor and modifier functions for the %action
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ActionType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ActionOptional&
  action () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ActionOptional&
  action ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  action (const ActionType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  action (const ActionOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  action (::std::unique_ptr< ActionType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name default
   *
   * @brief Accessor and modifier functions for the %default
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DefaultType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DefaultType > DefaultOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DefaultType, char > DefaultTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DefaultOptional&
  default_ () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DefaultOptional&
  default_ ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  default_ (const DefaultType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  default_ (const DefaultOptional& x);

  //@}

  /**
   * @name monitorAc
   *
   * @brief Accessor and modifier functions for the %monitorAc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte MonitorAcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< MonitorAcType > MonitorAcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< MonitorAcType, char > MonitorAcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const MonitorAcOptional&
  monitorAc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  MonitorAcOptional&
  monitorAc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  monitorAc (const MonitorAcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  monitorAc (const MonitorAcOptional& x);

  //@}

  /**
   * @name monitorDc
   *
   * @brief Accessor and modifier functions for the %monitorDc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte MonitorDcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< MonitorDcType > MonitorDcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< MonitorDcType, char > MonitorDcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const MonitorDcOptional&
  monitorDc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  MonitorDcOptional&
  monitorDc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  monitorDc (const MonitorDcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  monitorDc (const MonitorDcOptional& x);

  //@}

  /**
   * @name hardDiskAc
   *
   * @brief Accessor and modifier functions for the %hardDiskAc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte HardDiskAcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< HardDiskAcType > HardDiskAcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HardDiskAcType, char > HardDiskAcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const HardDiskAcOptional&
  hardDiskAc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  HardDiskAcOptional&
  hardDiskAc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hardDiskAc (const HardDiskAcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  hardDiskAc (const HardDiskAcOptional& x);

  //@}

  /**
   * @name hardDiskDc
   *
   * @brief Accessor and modifier functions for the %hardDiskDc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte HardDiskDcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< HardDiskDcType > HardDiskDcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HardDiskDcType, char > HardDiskDcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const HardDiskDcOptional&
  hardDiskDc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  HardDiskDcOptional&
  hardDiskDc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hardDiskDc (const HardDiskDcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  hardDiskDc (const HardDiskDcOptional& x);

  //@}

  /**
   * @name standbyAc
   *
   * @brief Accessor and modifier functions for the %standbyAc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte StandbyAcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StandbyAcType > StandbyAcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StandbyAcType, char > StandbyAcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StandbyAcOptional&
  standbyAc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StandbyAcOptional&
  standbyAc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  standbyAc (const StandbyAcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  standbyAc (const StandbyAcOptional& x);

  //@}

  /**
   * @name standbyDc
   *
   * @brief Accessor and modifier functions for the %standbyDc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte StandbyDcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StandbyDcType > StandbyDcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StandbyDcType, char > StandbyDcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StandbyDcOptional&
  standbyDc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StandbyDcOptional&
  standbyDc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  standbyDc (const StandbyDcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  standbyDc (const StandbyDcOptional& x);

  //@}

  /**
   * @name hibernateAc
   *
   * @brief Accessor and modifier functions for the %hibernateAc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte HibernateAcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< HibernateAcType > HibernateAcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HibernateAcType, char > HibernateAcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const HibernateAcOptional&
  hibernateAc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  HibernateAcOptional&
  hibernateAc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hibernateAc (const HibernateAcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  hibernateAc (const HibernateAcOptional& x);

  //@}

  /**
   * @name hibernateDc
   *
   * @brief Accessor and modifier functions for the %hibernateDc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte HibernateDcType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< HibernateDcType > HibernateDcOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HibernateDcType, char > HibernateDcTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const HibernateDcOptional&
  hibernateDc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  HibernateDcOptional&
  hibernateDc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hibernateDc (const HibernateDcType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  hibernateDc (const HibernateDcOptional& x);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  PowerSchemeProperties_t (const NameType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  PowerSchemeProperties_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  PowerSchemeProperties_t (const PowerSchemeProperties_t& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual PowerSchemeProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  PowerSchemeProperties_t&
  operator= (const PowerSchemeProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~PowerSchemeProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ActionOptional action_;
  ::xsd::cxx::tree::one< NameType > name_;
  DefaultOptional default__;
  MonitorAcOptional monitorAc_;
  MonitorDcOptional monitorDc_;
  HardDiskAcOptional hardDiskAc_;
  HardDiskDcOptional hardDiskDc_;
  StandbyAcOptional standbyAc_;
  StandbyDcOptional standbyDc_;
  HibernateAcOptional hibernateAc_;
  HibernateDcOptional hibernateDc_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %PowerScheme_t schema type.
 *
 * @nosubgrouping
 */
class PowerScheme_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::PowerSchemeProperties_t PropertiesType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< PropertiesType > PropertiesSequence;

  /**
   * @brief Element iterator type.
   */
  typedef PropertiesSequence::iterator PropertiesIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef PropertiesSequence::const_iterator PropertiesConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const PropertiesSequence&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  PropertiesSequence&
  Properties ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  Properties (const PropertiesSequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name status
   *
   * @brief Accessor and modifier functions for the %status
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StatusType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StatusType > StatusOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StatusOptional&
  status () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StatusOptional&
  status ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  status (const StatusType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  status (const StatusOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  status (::std::unique_ptr< StatusType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  PowerScheme_t (const ClsidType&,
                 const NameType&,
                 const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  PowerScheme_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  PowerScheme_t (const PowerScheme_t& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual PowerScheme_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  PowerScheme_t&
  operator= (const PowerScheme_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~PowerScheme_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  PropertiesSequence Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;
  StatusOptional status_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalPowerOptionsProperties_t schema type.
 *
 * @nosubgrouping
 */
class GlobalPowerOptionsProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name showIcon
   *
   * @brief Accessor and modifier functions for the %showIcon
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowIconType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ShowIconType > ShowIconOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowIconType, char > ShowIconTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ShowIconOptional&
  showIcon () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ShowIconOptional&
  showIcon ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showIcon (const ShowIconType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  showIcon (const ShowIconOptional& x);

  //@}

  /**
   * @name promptPassword
   *
   * @brief Accessor and modifier functions for the %promptPassword
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean PromptPasswordType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< PromptPasswordType > PromptPasswordOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PromptPasswordType, char > PromptPasswordTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const PromptPasswordOptional&
  promptPassword () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  PromptPasswordOptional&
  promptPassword ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  promptPassword (const PromptPasswordType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  promptPassword (const PromptPasswordOptional& x);

  //@}

  /**
   * @name enableHibernation
   *
   * @brief Accessor and modifier functions for the %enableHibernation
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean EnableHibernationType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< EnableHibernationType > EnableHibernationOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< EnableHibernationType, char > EnableHibernationTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const EnableHibernationOptional&
  enableHibernation () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  EnableHibernationOptional&
  enableHibernation ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  enableHibernation (const EnableHibernationType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  enableHibernation (const EnableHibernationOptional& x);

  //@}

  /**
   * @name closeLid
   *
   * @brief Accessor and modifier functions for the %closeLid
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String CloseLidType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< CloseLidType > CloseLidOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< CloseLidType, char > CloseLidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const CloseLidOptional&
  closeLid () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  CloseLidOptional&
  closeLid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  closeLid (const CloseLidType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  closeLid (const CloseLidOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  closeLid (::std::unique_ptr< CloseLidType > p);

  //@}

  /**
   * @name pressPowerBtn
   *
   * @brief Accessor and modifier functions for the %pressPowerBtn
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String PressPowerBtnType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< PressPowerBtnType > PressPowerBtnOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PressPowerBtnType, char > PressPowerBtnTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const PressPowerBtnOptional&
  pressPowerBtn () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  PressPowerBtnOptional&
  pressPowerBtn ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  pressPowerBtn (const PressPowerBtnType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  pressPowerBtn (const PressPowerBtnOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  pressPowerBtn (::std::unique_ptr< PressPowerBtnType > p);

  //@}

  /**
   * @name pressSleepBtn
   *
   * @brief Accessor and modifier functions for the %pressSleepBtn
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String PressSleepBtnType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< PressSleepBtnType > PressSleepBtnOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PressSleepBtnType, char > PressSleepBtnTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const PressSleepBtnOptional&
  pressSleepBtn () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  PressSleepBtnOptional&
  pressSleepBtn ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  pressSleepBtn (const PressSleepBtnType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  pressSleepBtn (const PressSleepBtnOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  pressSleepBtn (::std::unique_ptr< PressSleepBtnType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalPowerOptionsProperties_t ();

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalPowerOptionsProperties_t (const ::xercesc::DOMElement& e,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptionsProperties_t (const GlobalPowerOptionsProperties_t& x,
                                  ::xml_schema::Flags f = 0,
                                  ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalPowerOptionsProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptionsProperties_t&
  operator= (const GlobalPowerOptionsProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalPowerOptionsProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ShowIconOptional showIcon_;
  PromptPasswordOptional promptPassword_;
  EnableHibernationOptional enableHibernation_;
  CloseLidOptional closeLid_;
  PressPowerBtnOptional pressPowerBtn_;
  PressSleepBtnOptional pressSleepBtn_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalPowerOptions_t schema type.
 *
 * @nosubgrouping
 */
class GlobalPowerOptions_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalPowerOptionsProperties_t PropertiesType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< PropertiesType > PropertiesSequence;

  /**
   * @brief Element iterator type.
   */
  typedef PropertiesSequence::iterator PropertiesIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef PropertiesSequence::const_iterator PropertiesConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const PropertiesSequence&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  PropertiesSequence&
  Properties ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  Properties (const PropertiesSequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name status
   *
   * @brief Accessor and modifier functions for the %status
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StatusType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StatusType > StatusOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StatusOptional&
  status () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StatusOptional&
  status ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  status (const StatusType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  status (const StatusOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  status (::std::unique_ptr< StatusType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalPowerOptions_t (const ClsidType&,
                        const NameType&,
                        const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalPowerOptions_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptions_t (const GlobalPowerOptions_t& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalPowerOptions_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptions_t&
  operator= (const GlobalPowerOptions_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalPowerOptions_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  PropertiesSequence Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;
  StatusOptional status_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalPowerOptionsV2Properties_t schema type.
 *
 * @nosubgrouping
 */
class GlobalPowerOptionsV2Properties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name action
   *
   * @brief Accessor and modifier functions for the %action
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ActionType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ActionOptional&
  action () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ActionOptional&
  action ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  action (const ActionType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  action (const ActionOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  action (::std::unique_ptr< ActionType > p);

  //@}

  /**
   * @name nameGuid
   *
   * @brief Accessor and modifier functions for the %nameGuid
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameGuidType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< NameGuidType > NameGuidOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameGuidType, char > NameGuidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const NameGuidOptional&
  nameGuid () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  NameGuidOptional&
  nameGuid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  nameGuid (const NameGuidType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  nameGuid (const NameGuidOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  nameGuid (::std::unique_ptr< NameGuidType > p);

  //@}

  /**
   * @name default
   *
   * @brief Accessor and modifier functions for the %default
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte DefaultType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DefaultType > DefaultOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DefaultType, char > DefaultTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DefaultOptional&
  default_ () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DefaultOptional&
  default_ ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  default_ (const DefaultType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  default_ (const DefaultOptional& x);

  //@}

  /**
   * @name requireWakePwdAC
   *
   * @brief Accessor and modifier functions for the %requireWakePwdAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String RequireWakePwdACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RequireWakePwdACType > RequireWakePwdACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RequireWakePwdACType, char > RequireWakePwdACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RequireWakePwdACOptional&
  requireWakePwdAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RequireWakePwdACOptional&
  requireWakePwdAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  requireWakePwdAC (const RequireWakePwdACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  requireWakePwdAC (const RequireWakePwdACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  requireWakePwdAC (::std::unique_ptr< RequireWakePwdACType > p);

  //@}

  /**
   * @name requireWakePwdDC
   *
   * @brief Accessor and modifier functions for the %requireWakePwdDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String RequireWakePwdDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RequireWakePwdDCType > RequireWakePwdDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RequireWakePwdDCType, char > RequireWakePwdDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RequireWakePwdDCOptional&
  requireWakePwdDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RequireWakePwdDCOptional&
  requireWakePwdDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  requireWakePwdDC (const RequireWakePwdDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  requireWakePwdDC (const RequireWakePwdDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  requireWakePwdDC (::std::unique_ptr< RequireWakePwdDCType > p);

  //@}

  /**
   * @name turnOffHDAC
   *
   * @brief Accessor and modifier functions for the %turnOffHDAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte TurnOffHDACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< TurnOffHDACType > TurnOffHDACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< TurnOffHDACType, char > TurnOffHDACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const TurnOffHDACOptional&
  turnOffHDAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  TurnOffHDACOptional&
  turnOffHDAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  turnOffHDAC (const TurnOffHDACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  turnOffHDAC (const TurnOffHDACOptional& x);

  //@}

  /**
   * @name turnOffHDDC
   *
   * @brief Accessor and modifier functions for the %turnOffHDDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte TurnOffHDDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< TurnOffHDDCType > TurnOffHDDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< TurnOffHDDCType, char > TurnOffHDDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const TurnOffHDDCOptional&
  turnOffHDDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  TurnOffHDDCOptional&
  turnOffHDDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  turnOffHDDC (const TurnOffHDDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  turnOffHDDC (const TurnOffHDDCOptional& x);

  //@}

  /**
   * @name sleepAfterAC
   *
   * @brief Accessor and modifier functions for the %sleepAfterAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte SleepAfterACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< SleepAfterACType > SleepAfterACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SleepAfterACType, char > SleepAfterACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const SleepAfterACOptional&
  sleepAfterAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  SleepAfterACOptional&
  sleepAfterAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  sleepAfterAC (const SleepAfterACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  sleepAfterAC (const SleepAfterACOptional& x);

  //@}

  /**
   * @name sleepAfterDC
   *
   * @brief Accessor and modifier functions for the %sleepAfterDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte SleepAfterDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< SleepAfterDCType > SleepAfterDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SleepAfterDCType, char > SleepAfterDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const SleepAfterDCOptional&
  sleepAfterDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  SleepAfterDCOptional&
  sleepAfterDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  sleepAfterDC (const SleepAfterDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  sleepAfterDC (const SleepAfterDCOptional& x);

  //@}

  /**
   * @name allowHybridSleepAC
   *
   * @brief Accessor and modifier functions for the %allowHybridSleepAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String AllowHybridSleepACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< AllowHybridSleepACType > AllowHybridSleepACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AllowHybridSleepACType, char > AllowHybridSleepACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const AllowHybridSleepACOptional&
  allowHybridSleepAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  AllowHybridSleepACOptional&
  allowHybridSleepAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  allowHybridSleepAC (const AllowHybridSleepACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  allowHybridSleepAC (const AllowHybridSleepACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  allowHybridSleepAC (::std::unique_ptr< AllowHybridSleepACType > p);

  //@}

  /**
   * @name allowHybridSleepDC
   *
   * @brief Accessor and modifier functions for the %allowHybridSleepDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String AllowHybridSleepDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< AllowHybridSleepDCType > AllowHybridSleepDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AllowHybridSleepDCType, char > AllowHybridSleepDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const AllowHybridSleepDCOptional&
  allowHybridSleepDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  AllowHybridSleepDCOptional&
  allowHybridSleepDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  allowHybridSleepDC (const AllowHybridSleepDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  allowHybridSleepDC (const AllowHybridSleepDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  allowHybridSleepDC (::std::unique_ptr< AllowHybridSleepDCType > p);

  //@}

  /**
   * @name hibernateAC
   *
   * @brief Accessor and modifier functions for the %hibernateAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte HibernateACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< HibernateACType > HibernateACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HibernateACType, char > HibernateACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const HibernateACOptional&
  hibernateAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  HibernateACOptional&
  hibernateAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hibernateAC (const HibernateACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  hibernateAC (const HibernateACOptional& x);

  //@}

  /**
   * @name hibernateDC
   *
   * @brief Accessor and modifier functions for the %hibernateDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte HibernateDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< HibernateDCType > HibernateDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< HibernateDCType, char > HibernateDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const HibernateDCOptional&
  hibernateDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  HibernateDCOptional&
  hibernateDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  hibernateDC (const HibernateDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  hibernateDC (const HibernateDCOptional& x);

  //@}

  /**
   * @name lidCloseAC
   *
   * @brief Accessor and modifier functions for the %lidCloseAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LidCloseACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LidCloseACType > LidCloseACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LidCloseACType, char > LidCloseACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LidCloseACOptional&
  lidCloseAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LidCloseACOptional&
  lidCloseAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lidCloseAC (const LidCloseACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lidCloseAC (const LidCloseACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  lidCloseAC (::std::unique_ptr< LidCloseACType > p);

  //@}

  /**
   * @name lidCloseDC
   *
   * @brief Accessor and modifier functions for the %lidCloseDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LidCloseDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LidCloseDCType > LidCloseDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LidCloseDCType, char > LidCloseDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LidCloseDCOptional&
  lidCloseDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LidCloseDCOptional&
  lidCloseDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lidCloseDC (const LidCloseDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lidCloseDC (const LidCloseDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  lidCloseDC (::std::unique_ptr< LidCloseDCType > p);

  //@}

  /**
   * @name pbActionAC
   *
   * @brief Accessor and modifier functions for the %pbActionAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String PbActionACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< PbActionACType > PbActionACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PbActionACType, char > PbActionACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const PbActionACOptional&
  pbActionAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  PbActionACOptional&
  pbActionAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  pbActionAC (const PbActionACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  pbActionAC (const PbActionACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  pbActionAC (::std::unique_ptr< PbActionACType > p);

  //@}

  /**
   * @name pbActionDC
   *
   * @brief Accessor and modifier functions for the %pbActionDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String PbActionDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< PbActionDCType > PbActionDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PbActionDCType, char > PbActionDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const PbActionDCOptional&
  pbActionDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  PbActionDCOptional&
  pbActionDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  pbActionDC (const PbActionDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  pbActionDC (const PbActionDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  pbActionDC (::std::unique_ptr< PbActionDCType > p);

  //@}

  /**
   * @name strtMenuActionAC
   *
   * @brief Accessor and modifier functions for the %strtMenuActionAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StrtMenuActionACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StrtMenuActionACType > StrtMenuActionACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StrtMenuActionACType, char > StrtMenuActionACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StrtMenuActionACOptional&
  strtMenuActionAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StrtMenuActionACOptional&
  strtMenuActionAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  strtMenuActionAC (const StrtMenuActionACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  strtMenuActionAC (const StrtMenuActionACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  strtMenuActionAC (::std::unique_ptr< StrtMenuActionACType > p);

  //@}

  /**
   * @name strtMenuActionDC
   *
   * @brief Accessor and modifier functions for the %strtMenuActionDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StrtMenuActionDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StrtMenuActionDCType > StrtMenuActionDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StrtMenuActionDCType, char > StrtMenuActionDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StrtMenuActionDCOptional&
  strtMenuActionDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StrtMenuActionDCOptional&
  strtMenuActionDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  strtMenuActionDC (const StrtMenuActionDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  strtMenuActionDC (const StrtMenuActionDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  strtMenuActionDC (::std::unique_ptr< StrtMenuActionDCType > p);

  //@}

  /**
   * @name linkPwrMgmtAC
   *
   * @brief Accessor and modifier functions for the %linkPwrMgmtAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LinkPwrMgmtACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LinkPwrMgmtACType > LinkPwrMgmtACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LinkPwrMgmtACType, char > LinkPwrMgmtACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LinkPwrMgmtACOptional&
  linkPwrMgmtAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LinkPwrMgmtACOptional&
  linkPwrMgmtAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  linkPwrMgmtAC (const LinkPwrMgmtACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  linkPwrMgmtAC (const LinkPwrMgmtACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  linkPwrMgmtAC (::std::unique_ptr< LinkPwrMgmtACType > p);

  //@}

  /**
   * @name linkPwrMgmtDC
   *
   * @brief Accessor and modifier functions for the %linkPwrMgmtDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LinkPwrMgmtDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LinkPwrMgmtDCType > LinkPwrMgmtDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LinkPwrMgmtDCType, char > LinkPwrMgmtDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LinkPwrMgmtDCOptional&
  linkPwrMgmtDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LinkPwrMgmtDCOptional&
  linkPwrMgmtDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  linkPwrMgmtDC (const LinkPwrMgmtDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  linkPwrMgmtDC (const LinkPwrMgmtDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  linkPwrMgmtDC (::std::unique_ptr< LinkPwrMgmtDCType > p);

  //@}

  /**
   * @name procStateMinAC
   *
   * @brief Accessor and modifier functions for the %procStateMinAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ProcStateMinACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ProcStateMinACType > ProcStateMinACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ProcStateMinACType, char > ProcStateMinACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ProcStateMinACOptional&
  procStateMinAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ProcStateMinACOptional&
  procStateMinAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  procStateMinAC (const ProcStateMinACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  procStateMinAC (const ProcStateMinACOptional& x);

  //@}

  /**
   * @name procStateMinDC
   *
   * @brief Accessor and modifier functions for the %procStateMinDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ProcStateMinDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ProcStateMinDCType > ProcStateMinDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ProcStateMinDCType, char > ProcStateMinDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ProcStateMinDCOptional&
  procStateMinDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ProcStateMinDCOptional&
  procStateMinDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  procStateMinDC (const ProcStateMinDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  procStateMinDC (const ProcStateMinDCOptional& x);

  //@}

  /**
   * @name procStateMaxAC
   *
   * @brief Accessor and modifier functions for the %procStateMaxAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ProcStateMaxACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ProcStateMaxACType > ProcStateMaxACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ProcStateMaxACType, char > ProcStateMaxACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ProcStateMaxACOptional&
  procStateMaxAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ProcStateMaxACOptional&
  procStateMaxAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  procStateMaxAC (const ProcStateMaxACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  procStateMaxAC (const ProcStateMaxACOptional& x);

  //@}

  /**
   * @name procStateMaxDC
   *
   * @brief Accessor and modifier functions for the %procStateMaxDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ProcStateMaxDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ProcStateMaxDCType > ProcStateMaxDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ProcStateMaxDCType, char > ProcStateMaxDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ProcStateMaxDCOptional&
  procStateMaxDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ProcStateMaxDCOptional&
  procStateMaxDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  procStateMaxDC (const ProcStateMaxDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  procStateMaxDC (const ProcStateMaxDCOptional& x);

  //@}

  /**
   * @name displayOffAC
   *
   * @brief Accessor and modifier functions for the %displayOffAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte DisplayOffACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisplayOffACType > DisplayOffACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisplayOffACType, char > DisplayOffACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisplayOffACOptional&
  displayOffAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisplayOffACOptional&
  displayOffAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  displayOffAC (const DisplayOffACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  displayOffAC (const DisplayOffACOptional& x);

  //@}

  /**
   * @name displayOffDC
   *
   * @brief Accessor and modifier functions for the %displayOffDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte DisplayOffDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisplayOffDCType > DisplayOffDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisplayOffDCType, char > DisplayOffDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisplayOffDCOptional&
  displayOffDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisplayOffDCOptional&
  displayOffDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  displayOffDC (const DisplayOffDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  displayOffDC (const DisplayOffDCOptional& x);

  //@}

  /**
   * @name adaptiveAC
   *
   * @brief Accessor and modifier functions for the %adaptiveAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String AdaptiveACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< AdaptiveACType > AdaptiveACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AdaptiveACType, char > AdaptiveACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const AdaptiveACOptional&
  adaptiveAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  AdaptiveACOptional&
  adaptiveAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  adaptiveAC (const AdaptiveACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  adaptiveAC (const AdaptiveACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  adaptiveAC (::std::unique_ptr< AdaptiveACType > p);

  //@}

  /**
   * @name adaptiveDC
   *
   * @brief Accessor and modifier functions for the %adaptiveDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String AdaptiveDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< AdaptiveDCType > AdaptiveDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< AdaptiveDCType, char > AdaptiveDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const AdaptiveDCOptional&
  adaptiveDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  AdaptiveDCOptional&
  adaptiveDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  adaptiveDC (const AdaptiveDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  adaptiveDC (const AdaptiveDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  adaptiveDC (::std::unique_ptr< AdaptiveDCType > p);

  //@}

  /**
   * @name critBatActionAC
   *
   * @brief Accessor and modifier functions for the %critBatActionAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String CritBatActionACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< CritBatActionACType > CritBatActionACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< CritBatActionACType, char > CritBatActionACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const CritBatActionACOptional&
  critBatActionAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  CritBatActionACOptional&
  critBatActionAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  critBatActionAC (const CritBatActionACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  critBatActionAC (const CritBatActionACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  critBatActionAC (::std::unique_ptr< CritBatActionACType > p);

  //@}

  /**
   * @name critBatActionDC
   *
   * @brief Accessor and modifier functions for the %critBatActionDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String CritBatActionDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< CritBatActionDCType > CritBatActionDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< CritBatActionDCType, char > CritBatActionDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const CritBatActionDCOptional&
  critBatActionDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  CritBatActionDCOptional&
  critBatActionDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  critBatActionDC (const CritBatActionDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  critBatActionDC (const CritBatActionDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  critBatActionDC (::std::unique_ptr< CritBatActionDCType > p);

  //@}

  /**
   * @name lowBatteryLvlAC
   *
   * @brief Accessor and modifier functions for the %lowBatteryLvlAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte LowBatteryLvlACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LowBatteryLvlACType > LowBatteryLvlACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LowBatteryLvlACType, char > LowBatteryLvlACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LowBatteryLvlACOptional&
  lowBatteryLvlAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LowBatteryLvlACOptional&
  lowBatteryLvlAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lowBatteryLvlAC (const LowBatteryLvlACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lowBatteryLvlAC (const LowBatteryLvlACOptional& x);

  //@}

  /**
   * @name lowBatteryLvlDC
   *
   * @brief Accessor and modifier functions for the %lowBatteryLvlDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte LowBatteryLvlDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LowBatteryLvlDCType > LowBatteryLvlDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LowBatteryLvlDCType, char > LowBatteryLvlDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LowBatteryLvlDCOptional&
  lowBatteryLvlDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LowBatteryLvlDCOptional&
  lowBatteryLvlDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lowBatteryLvlDC (const LowBatteryLvlDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lowBatteryLvlDC (const LowBatteryLvlDCOptional& x);

  //@}

  /**
   * @name critBatteryLvlAC
   *
   * @brief Accessor and modifier functions for the %critBatteryLvlAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte CritBatteryLvlACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< CritBatteryLvlACType > CritBatteryLvlACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< CritBatteryLvlACType, char > CritBatteryLvlACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const CritBatteryLvlACOptional&
  critBatteryLvlAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  CritBatteryLvlACOptional&
  critBatteryLvlAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  critBatteryLvlAC (const CritBatteryLvlACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  critBatteryLvlAC (const CritBatteryLvlACOptional& x);

  //@}

  /**
   * @name critBatteryLvlDC
   *
   * @brief Accessor and modifier functions for the %critBatteryLvlDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte CritBatteryLvlDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< CritBatteryLvlDCType > CritBatteryLvlDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< CritBatteryLvlDCType, char > CritBatteryLvlDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const CritBatteryLvlDCOptional&
  critBatteryLvlDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  CritBatteryLvlDCOptional&
  critBatteryLvlDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  critBatteryLvlDC (const CritBatteryLvlDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  critBatteryLvlDC (const CritBatteryLvlDCOptional& x);

  //@}

  /**
   * @name lowBatteryNotAC
   *
   * @brief Accessor and modifier functions for the %lowBatteryNotAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LowBatteryNotACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LowBatteryNotACType > LowBatteryNotACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LowBatteryNotACType, char > LowBatteryNotACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LowBatteryNotACOptional&
  lowBatteryNotAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LowBatteryNotACOptional&
  lowBatteryNotAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lowBatteryNotAC (const LowBatteryNotACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lowBatteryNotAC (const LowBatteryNotACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  lowBatteryNotAC (::std::unique_ptr< LowBatteryNotACType > p);

  //@}

  /**
   * @name lowBatteryNotDC
   *
   * @brief Accessor and modifier functions for the %lowBatteryNotDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LowBatteryNotDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LowBatteryNotDCType > LowBatteryNotDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LowBatteryNotDCType, char > LowBatteryNotDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LowBatteryNotDCOptional&
  lowBatteryNotDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LowBatteryNotDCOptional&
  lowBatteryNotDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lowBatteryNotDC (const LowBatteryNotDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lowBatteryNotDC (const LowBatteryNotDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  lowBatteryNotDC (::std::unique_ptr< LowBatteryNotDCType > p);

  //@}

  /**
   * @name lowBatteryActionAC
   *
   * @brief Accessor and modifier functions for the %lowBatteryActionAC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LowBatteryActionACType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LowBatteryActionACType > LowBatteryActionACOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LowBatteryActionACType, char > LowBatteryActionACTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LowBatteryActionACOptional&
  lowBatteryActionAC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LowBatteryActionACOptional&
  lowBatteryActionAC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lowBatteryActionAC (const LowBatteryActionACType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lowBatteryActionAC (const LowBatteryActionACOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  lowBatteryActionAC (::std::unique_ptr< LowBatteryActionACType > p);

  //@}

  /**
   * @name lowBatteryActionDC
   *
   * @brief Accessor and modifier functions for the %lowBatteryActionDC
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String LowBatteryActionDCType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< LowBatteryActionDCType > LowBatteryActionDCOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< LowBatteryActionDCType, char > LowBatteryActionDCTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const LowBatteryActionDCOptional&
  lowBatteryActionDC () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  LowBatteryActionDCOptional&
  lowBatteryActionDC ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  lowBatteryActionDC (const LowBatteryActionDCType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  lowBatteryActionDC (const LowBatteryActionDCOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  lowBatteryActionDC (::std::unique_ptr< LowBatteryActionDCType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalPowerOptionsV2Properties_t ();

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalPowerOptionsV2Properties_t (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptionsV2Properties_t (const GlobalPowerOptionsV2Properties_t& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalPowerOptionsV2Properties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptionsV2Properties_t&
  operator= (const GlobalPowerOptionsV2Properties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalPowerOptionsV2Properties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ActionOptional action_;
  NameGuidOptional nameGuid_;
  DefaultOptional default__;
  RequireWakePwdACOptional requireWakePwdAC_;
  RequireWakePwdDCOptional requireWakePwdDC_;
  TurnOffHDACOptional turnOffHDAC_;
  TurnOffHDDCOptional turnOffHDDC_;
  SleepAfterACOptional sleepAfterAC_;
  SleepAfterDCOptional sleepAfterDC_;
  AllowHybridSleepACOptional allowHybridSleepAC_;
  AllowHybridSleepDCOptional allowHybridSleepDC_;
  HibernateACOptional hibernateAC_;
  HibernateDCOptional hibernateDC_;
  LidCloseACOptional lidCloseAC_;
  LidCloseDCOptional lidCloseDC_;
  PbActionACOptional pbActionAC_;
  PbActionDCOptional pbActionDC_;
  StrtMenuActionACOptional strtMenuActionAC_;
  StrtMenuActionDCOptional strtMenuActionDC_;
  LinkPwrMgmtACOptional linkPwrMgmtAC_;
  LinkPwrMgmtDCOptional linkPwrMgmtDC_;
  ProcStateMinACOptional procStateMinAC_;
  ProcStateMinDCOptional procStateMinDC_;
  ProcStateMaxACOptional procStateMaxAC_;
  ProcStateMaxDCOptional procStateMaxDC_;
  DisplayOffACOptional displayOffAC_;
  DisplayOffDCOptional displayOffDC_;
  AdaptiveACOptional adaptiveAC_;
  AdaptiveDCOptional adaptiveDC_;
  CritBatActionACOptional critBatActionAC_;
  CritBatActionDCOptional critBatActionDC_;
  LowBatteryLvlACOptional lowBatteryLvlAC_;
  LowBatteryLvlDCOptional lowBatteryLvlDC_;
  CritBatteryLvlACOptional critBatteryLvlAC_;
  CritBatteryLvlDCOptional critBatteryLvlDC_;
  LowBatteryNotACOptional lowBatteryNotAC_;
  LowBatteryNotDCOptional lowBatteryNotDC_;
  LowBatteryActionACOptional lowBatteryActionAC_;
  LowBatteryActionDCOptional lowBatteryActionDC_;

  //@endcond
};

/**
 * @brief Class corresponding to the %GlobalPowerOptionsV2_t schema type.
 *
 * @nosubgrouping
 */
class GlobalPowerOptionsV2_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalPowerOptionsV2Properties_t PropertiesType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< PropertiesType > PropertiesSequence;

  /**
   * @brief Element iterator type.
   */
  typedef PropertiesSequence::iterator PropertiesIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef PropertiesSequence::const_iterator PropertiesConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const PropertiesSequence&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  PropertiesSequence&
  Properties ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  Properties (const PropertiesSequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name status
   *
   * @brief Accessor and modifier functions for the %status
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StatusType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StatusType > StatusOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StatusOptional&
  status () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StatusOptional&
  status ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  status (const StatusType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  status (const StatusOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  status (::std::unique_ptr< StatusType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  GlobalPowerOptionsV2_t (const ClsidType&,
                          const NameType&,
                          const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  GlobalPowerOptionsV2_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptionsV2_t (const GlobalPowerOptionsV2_t& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual GlobalPowerOptionsV2_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  GlobalPowerOptionsV2_t&
  operator= (const GlobalPowerOptionsV2_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~GlobalPowerOptionsV2_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  PropertiesSequence Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;
  StatusOptional status_;

  //@endcond
};

/**
 * @brief Class corresponding to the %PowerOptions schema type.
 *
 * @nosubgrouping
 */
class PowerOptions: public ::xml_schema::Type
{
  public:
  /**
   * @name GlobalPowerOptions
   *
   * @brief Accessor and modifier functions for the %GlobalPowerOptions
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalPowerOptions_t GlobalPowerOptionsType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< GlobalPowerOptionsType > GlobalPowerOptionsSequence;

  /**
   * @brief Element iterator type.
   */
  typedef GlobalPowerOptionsSequence::iterator GlobalPowerOptionsIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef GlobalPowerOptionsSequence::const_iterator GlobalPowerOptionsConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< GlobalPowerOptionsType, char > GlobalPowerOptionsTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const GlobalPowerOptionsSequence&
  GlobalPowerOptions () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  GlobalPowerOptionsSequence&
  GlobalPowerOptions ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  GlobalPowerOptions (const GlobalPowerOptionsSequence& s);

  //@}

  /**
   * @name PowerScheme
   *
   * @brief Accessor and modifier functions for the %PowerScheme
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::PowerScheme_t PowerSchemeType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< PowerSchemeType > PowerSchemeSequence;

  /**
   * @brief Element iterator type.
   */
  typedef PowerSchemeSequence::iterator PowerSchemeIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef PowerSchemeSequence::const_iterator PowerSchemeConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PowerSchemeType, char > PowerSchemeTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const PowerSchemeSequence&
  PowerScheme () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  PowerSchemeSequence&
  PowerScheme ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  PowerScheme (const PowerSchemeSequence& s);

  //@}

  /**
   * @name GlobalPowerOptionsV2
   *
   * @brief Accessor and modifier functions for the %GlobalPowerOptionsV2
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::GlobalPowerOptionsV2_t GlobalPowerOptionsV2Type;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< GlobalPowerOptionsV2Type > GlobalPowerOptionsV2Sequence;

  /**
   * @brief Element iterator type.
   */
  typedef GlobalPowerOptionsV2Sequence::iterator GlobalPowerOptionsV2Iterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef GlobalPowerOptionsV2Sequence::const_iterator GlobalPowerOptionsV2ConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< GlobalPowerOptionsV2Type, char > GlobalPowerOptionsV2Traits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const GlobalPowerOptionsV2Sequence&
  GlobalPowerOptionsV2 () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  GlobalPowerOptionsV2Sequence&
  GlobalPowerOptionsV2 ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  GlobalPowerOptionsV2 (const GlobalPowerOptionsV2Sequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  PowerOptions (const ClsidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  PowerOptions (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  PowerOptions (const PowerOptions& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual PowerOptions*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  PowerOptions&
  operator= (const PowerOptions& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~PowerOptions ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  GlobalPowerOptionsSequence GlobalPowerOptions_;
  PowerSchemeSequence PowerScheme_;
  GlobalPowerOptionsV2Sequence GlobalPowerOptionsV2_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  DisabledOptional disabled_;

  //@endcond
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const PowerSchemeProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const PowerScheme_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalPowerOptionsProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalPowerOptions_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalPowerOptionsV2Properties_t&);

::std::ostream&
operator<< (::std::ostream&, const GlobalPowerOptionsV2_t&);

::std::ostream&
operator<< (::std::ostream&, const PowerOptions&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

/**
 * @name Parsing functions for the %PowerOptions document root.
 */
//@{

/**
 * @brief Parse a URI or a local file.
 *
 * @param uri A URI or a local file name.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::std::string& uri,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with an error handler.
 *
 * @param uri A URI or a local file name.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::std::string& uri,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with a Xerces-C++ DOM error
 * handler.
 *
 * @param uri A URI or a local file name.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream.
 *
 * @param is A standrad input stream.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with an error handler.
 *
 * @param is A standrad input stream.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a Xerces-C++ DOM error
 * handler.
 *
 * @param is A standrad input stream.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and an
 * error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and a
 * Xerces-C++ DOM error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source.
 *
 * @param is A Xerces-C++ input source.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xercesc::InputSource& is,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with an error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xercesc::InputSource& is,
               ::xml_schema::ErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
 * error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A pointer to the Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function is normally used together with the keep_dom and
 * own_dom parsing flags to assign ownership of the DOM document
 * to the object model.
 */
::std::unique_ptr< ::PowerOptions >
PowerOptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::Flags f = 0,
               const ::xml_schema::Properties& p = ::xml_schema::Properties ());

//@}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const PowerSchemeProperties_t&);

void
operator<< (::xercesc::DOMElement&, const PowerScheme_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalPowerOptionsProperties_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalPowerOptions_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalPowerOptionsV2Properties_t&);

void
operator<< (::xercesc::DOMElement&, const GlobalPowerOptionsV2_t&);

/**
 * @name Serialization functions for the %PowerOptions document root.
 */
//@{

/**
 * @brief Serialize to a standard output stream.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void
PowerOptions_ (::std::ostream& os,
               const ::PowerOptions& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with an error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
PowerOptions_ (::std::ostream& os,
               const ::PowerOptions& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with a Xerces-C++ DOM
 * error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
PowerOptions_ (::std::ostream& os,
               const ::PowerOptions& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void
PowerOptions_ (::xercesc::XMLFormatTarget& ft,
               const ::PowerOptions& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with an error
 * handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
PowerOptions_ (::xercesc::XMLFormatTarget& ft,
               const ::PowerOptions& x, 
               ::xml_schema::ErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with a
 * Xerces-C++ DOM error handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
PowerOptions_ (::xercesc::XMLFormatTarget& ft,
               const ::PowerOptions& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to an existing Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param x An object model to serialize.
 * @param f Serialization flags.
 *
 * Note that it is your responsibility to create the DOM document
 * with the correct root element as well as set the necessary
 * namespace mapping attributes.
 */
void
PowerOptions_ (::xercesc::DOMDocument& d,
               const ::PowerOptions& x,
               ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a new Xerces-C++ DOM document.
 *
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param f Serialization flags.
 * @return A pointer to the new Xerces-C++ DOM document.
 */
::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
PowerOptions_ (const ::PowerOptions& x, 
               const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
               ::xml_schema::Flags f = 0);

//@}

void
operator<< (::xercesc::DOMElement&, const PowerOptions&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_POWEROPTIONSSCHEMA_H

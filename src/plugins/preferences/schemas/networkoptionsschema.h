// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from networkoptionsschema.xsd.
 */

#ifndef CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_NETWORKOPTIONSSCHEMA_H
#define CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_NETWORKOPTIONSSCHEMA_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4009911L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;



  /**
   * @brief Content order sequence entry.
   */
  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  /**
   * @brief Namespace serialization information.
   */
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

  /**
   * @brief Namespace serialization information map.
   */
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

  /**
   * @brief List serialization stream.
   */
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;

  /**
   * @brief Serialization wrapper for the %double type.
   */
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

  /**
   * @brief Serialization wrapper for the %decimal type.
   */
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

  /**
   * @brief Simple type facet.
   */
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;

  /**
   * @brief Exception indicating a serialization failure.
   */
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class VPNProperties_t;
class VPN_t;
class DUNProperties_t;
class DUN_t;
class NetworkOptions;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

/**
 * @brief Class corresponding to the %VPNProperties_t schema type.
 *
 * @nosubgrouping
 */
class VPNProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name action
   *
   * @brief Accessor and modifier functions for the %action
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ActionType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ActionOptional&
  action () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ActionOptional&
  action ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  action (const ActionType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  action (const ActionOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  action (::std::unique_ptr< ActionType > p);

  //@}

  /**
   * @name user
   *
   * @brief Accessor and modifier functions for the %user
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserType, char > UserTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UserType&
  user () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UserType&
  user ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  user (const UserType& x);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name ipAddress
   *
   * @brief Accessor and modifier functions for the %ipAddress
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String IpAddressType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< IpAddressType > IpAddressOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< IpAddressType, char > IpAddressTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const IpAddressOptional&
  ipAddress () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  IpAddressOptional&
  ipAddress ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  ipAddress (const IpAddressType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  ipAddress (const IpAddressOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  ipAddress (::std::unique_ptr< IpAddressType > p);

  //@}

  /**
   * @name useDNS
   *
   * @brief Accessor and modifier functions for the %useDNS
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UseDNSType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UseDNSType > UseDNSOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UseDNSType, char > UseDNSTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UseDNSOptional&
  useDNS () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UseDNSOptional&
  useDNS ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  useDNS (const UseDNSType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  useDNS (const UseDNSOptional& x);

  //@}

  /**
   * @name dialFirst
   *
   * @brief Accessor and modifier functions for the %dialFirst
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DialFirstType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DialFirstType > DialFirstOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DialFirstType, char > DialFirstTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DialFirstOptional&
  dialFirst () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DialFirstOptional&
  dialFirst ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  dialFirst (const DialFirstType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  dialFirst (const DialFirstOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  dialFirst (::std::unique_ptr< DialFirstType > p);

  //@}

  /**
   * @name trayIcon
   *
   * @brief Accessor and modifier functions for the %trayIcon
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean TrayIconType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< TrayIconType > TrayIconOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< TrayIconType, char > TrayIconTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const TrayIconOptional&
  trayIcon () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  TrayIconOptional&
  trayIcon ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  trayIcon (const TrayIconType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  trayIcon (const TrayIconOptional& x);

  //@}

  /**
   * @name showProgress
   *
   * @brief Accessor and modifier functions for the %showProgress
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowProgressType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ShowProgressType > ShowProgressOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowProgressType, char > ShowProgressTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ShowProgressOptional&
  showProgress () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ShowProgressOptional&
  showProgress ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showProgress (const ShowProgressType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  showProgress (const ShowProgressOptional& x);

  //@}

  /**
   * @name showPassword
   *
   * @brief Accessor and modifier functions for the %showPassword
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowPasswordType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ShowPasswordType > ShowPasswordOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowPasswordType, char > ShowPasswordTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ShowPasswordOptional&
  showPassword () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ShowPasswordOptional&
  showPassword ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showPassword (const ShowPasswordType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  showPassword (const ShowPasswordOptional& x);

  //@}

  /**
   * @name showDomain
   *
   * @brief Accessor and modifier functions for the %showDomain
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ShowDomainType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ShowDomainType > ShowDomainOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ShowDomainType, char > ShowDomainTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ShowDomainOptional&
  showDomain () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ShowDomainOptional&
  showDomain ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  showDomain (const ShowDomainType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  showDomain (const ShowDomainOptional& x);

  //@}

  /**
   * @name redialCount
   *
   * @brief Accessor and modifier functions for the %redialCount
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte RedialCountType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RedialCountType > RedialCountOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RedialCountType, char > RedialCountTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RedialCountOptional&
  redialCount () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RedialCountOptional&
  redialCount ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  redialCount (const RedialCountType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  redialCount (const RedialCountOptional& x);

  //@}

  /**
   * @name redialPause
   *
   * @brief Accessor and modifier functions for the %redialPause
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String RedialPauseType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RedialPauseType > RedialPauseOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RedialPauseType, char > RedialPauseTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RedialPauseOptional&
  redialPause () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RedialPauseOptional&
  redialPause ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  redialPause (const RedialPauseType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  redialPause (const RedialPauseOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  redialPause (::std::unique_ptr< RedialPauseType > p);

  //@}

  /**
   * @name idleDisconnect
   *
   * @brief Accessor and modifier functions for the %idleDisconnect
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean IdleDisconnectType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< IdleDisconnectType > IdleDisconnectOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< IdleDisconnectType, char > IdleDisconnectTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const IdleDisconnectOptional&
  idleDisconnect () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  IdleDisconnectOptional&
  idleDisconnect ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  idleDisconnect (const IdleDisconnectType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  idleDisconnect (const IdleDisconnectOptional& x);

  //@}

  /**
   * @name reconnect
   *
   * @brief Accessor and modifier functions for the %reconnect
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ReconnectType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ReconnectType > ReconnectOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ReconnectType, char > ReconnectTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ReconnectOptional&
  reconnect () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ReconnectOptional&
  reconnect ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  reconnect (const ReconnectType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  reconnect (const ReconnectOptional& x);

  //@}

  /**
   * @name customSettings
   *
   * @brief Accessor and modifier functions for the %customSettings
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean CustomSettingsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< CustomSettingsType > CustomSettingsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< CustomSettingsType, char > CustomSettingsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const CustomSettingsOptional&
  customSettings () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  CustomSettingsOptional&
  customSettings ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  customSettings (const CustomSettingsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  customSettings (const CustomSettingsOptional& x);

  //@}

  /**
   * @name securePassword
   *
   * @brief Accessor and modifier functions for the %securePassword
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean SecurePasswordType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< SecurePasswordType > SecurePasswordOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SecurePasswordType, char > SecurePasswordTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const SecurePasswordOptional&
  securePassword () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  SecurePasswordOptional&
  securePassword ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  securePassword (const SecurePasswordType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  securePassword (const SecurePasswordOptional& x);

  //@}

  /**
   * @name secureData
   *
   * @brief Accessor and modifier functions for the %secureData
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean SecureDataType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< SecureDataType > SecureDataOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SecureDataType, char > SecureDataTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const SecureDataOptional&
  secureData () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  SecureDataOptional&
  secureData ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  secureData (const SecureDataType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  secureData (const SecureDataOptional& x);

  //@}

  /**
   * @name useLogon
   *
   * @brief Accessor and modifier functions for the %useLogon
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UseLogonType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UseLogonType > UseLogonOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UseLogonType, char > UseLogonTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UseLogonOptional&
  useLogon () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UseLogonOptional&
  useLogon ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  useLogon (const UseLogonType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  useLogon (const UseLogonOptional& x);

  //@}

  /**
   * @name vpnStrategy
   *
   * @brief Accessor and modifier functions for the %vpnStrategy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String VpnStrategyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< VpnStrategyType > VpnStrategyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< VpnStrategyType, char > VpnStrategyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const VpnStrategyOptional&
  vpnStrategy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  VpnStrategyOptional&
  vpnStrategy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  vpnStrategy (const VpnStrategyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  vpnStrategy (const VpnStrategyOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  vpnStrategy (::std::unique_ptr< VpnStrategyType > p);

  //@}

  /**
   * @name encryptionType
   *
   * @brief Accessor and modifier functions for the %encryptionType
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String EncryptionTypeType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< EncryptionTypeType > EncryptionTypeOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< EncryptionTypeType, char > EncryptionTypeTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const EncryptionTypeOptional&
  encryptionType () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  EncryptionTypeOptional&
  encryptionType ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  encryptionType (const EncryptionTypeType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  encryptionType (const EncryptionTypeOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  encryptionType (::std::unique_ptr< EncryptionTypeType > p);

  //@}

  /**
   * @name eap
   *
   * @brief Accessor and modifier functions for the %eap
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean EapType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< EapType > EapOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< EapType, char > EapTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const EapOptional&
  eap () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  EapOptional&
  eap ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  eap (const EapType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  eap (const EapOptional& x);

  //@}

  /**
   * @name pap
   *
   * @brief Accessor and modifier functions for the %pap
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean PapType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< PapType > PapOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PapType, char > PapTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const PapOptional&
  pap () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  PapOptional&
  pap ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  pap (const PapType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  pap (const PapOptional& x);

  //@}

  /**
   * @name spap
   *
   * @brief Accessor and modifier functions for the %spap
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean SpapType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< SpapType > SpapOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< SpapType, char > SpapTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const SpapOptional&
  spap () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  SpapOptional&
  spap ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  spap (const SpapType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  spap (const SpapOptional& x);

  //@}

  /**
   * @name chap
   *
   * @brief Accessor and modifier functions for the %chap
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean ChapType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChapType > ChapOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChapType, char > ChapTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChapOptional&
  chap () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChapOptional&
  chap ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  chap (const ChapType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  chap (const ChapOptional& x);

  //@}

  /**
   * @name msChap
   *
   * @brief Accessor and modifier functions for the %msChap
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean MsChapType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< MsChapType > MsChapOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< MsChapType, char > MsChapTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const MsChapOptional&
  msChap () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  MsChapOptional&
  msChap ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  msChap (const MsChapType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  msChap (const MsChapOptional& x);

  //@}

  /**
   * @name oldMsChap
   *
   * @brief Accessor and modifier functions for the %oldMsChap
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean OldMsChapType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< OldMsChapType > OldMsChapOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< OldMsChapType, char > OldMsChapTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const OldMsChapOptional&
  oldMsChap () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  OldMsChapOptional&
  oldMsChap ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  oldMsChap (const OldMsChapType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  oldMsChap (const OldMsChapOptional& x);

  //@}

  /**
   * @name msChapV2
   *
   * @brief Accessor and modifier functions for the %msChapV2
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean MsChapV2Type;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< MsChapV2Type > MsChapV2Optional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< MsChapV2Type, char > MsChapV2Traits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const MsChapV2Optional&
  msChapV2 () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  MsChapV2Optional&
  msChapV2 ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  msChapV2 (const MsChapV2Type& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  msChapV2 (const MsChapV2Optional& x);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  VPNProperties_t (const UserType&,
                   const NameType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  VPNProperties_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  VPNProperties_t (const VPNProperties_t& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual VPNProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  VPNProperties_t&
  operator= (const VPNProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~VPNProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ActionOptional action_;
  ::xsd::cxx::tree::one< UserType > user_;
  ::xsd::cxx::tree::one< NameType > name_;
  IpAddressOptional ipAddress_;
  UseDNSOptional useDNS_;
  DialFirstOptional dialFirst_;
  TrayIconOptional trayIcon_;
  ShowProgressOptional showProgress_;
  ShowPasswordOptional showPassword_;
  ShowDomainOptional showDomain_;
  RedialCountOptional redialCount_;
  RedialPauseOptional redialPause_;
  IdleDisconnectOptional idleDisconnect_;
  ReconnectOptional reconnect_;
  CustomSettingsOptional customSettings_;
  SecurePasswordOptional securePassword_;
  SecureDataOptional secureData_;
  UseLogonOptional useLogon_;
  VpnStrategyOptional vpnStrategy_;
  EncryptionTypeOptional encryptionType_;
  EapOptional eap_;
  PapOptional pap_;
  SpapOptional spap_;
  ChapOptional chap_;
  MsChapOptional msChap_;
  OldMsChapOptional oldMsChap_;
  MsChapV2Optional msChapV2_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %VPN_t schema type.
 *
 * @nosubgrouping
 */
class VPN_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::VPNProperties_t PropertiesType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< PropertiesType > PropertiesSequence;

  /**
   * @brief Element iterator type.
   */
  typedef PropertiesSequence::iterator PropertiesIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef PropertiesSequence::const_iterator PropertiesConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const PropertiesSequence&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  PropertiesSequence&
  Properties ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  Properties (const PropertiesSequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name status
   *
   * @brief Accessor and modifier functions for the %status
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StatusType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StatusType > StatusOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StatusOptional&
  status () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StatusOptional&
  status ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  status (const StatusType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  status (const StatusOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  status (::std::unique_ptr< StatusType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  VPN_t (const ClsidType&,
         const NameType&,
         const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  VPN_t (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  VPN_t (const VPN_t& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual VPN_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  VPN_t&
  operator= (const VPN_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~VPN_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  PropertiesSequence Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;
  StatusOptional status_;

  //@endcond
};

/**
 * @brief Class corresponding to the %DUNProperties_t schema type.
 *
 * @nosubgrouping
 */
class DUNProperties_t: public ::xml_schema::Type
{
  public:
  /**
   * @name action
   *
   * @brief Accessor and modifier functions for the %action
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ActionType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ActionType > ActionOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ActionType, char > ActionTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ActionOptional&
  action () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ActionOptional&
  action ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  action (const ActionType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  action (const ActionOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  action (::std::unique_ptr< ActionType > p);

  //@}

  /**
   * @name user
   *
   * @brief Accessor and modifier functions for the %user
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserType, char > UserTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UserType&
  user () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UserType&
  user ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  user (const UserType& x);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name phoneNumber
   *
   * @brief Accessor and modifier functions for the %phoneNumber
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String PhoneNumberType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< PhoneNumberType, char > PhoneNumberTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const PhoneNumberType&
  phoneNumber () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  PhoneNumberType&
  phoneNumber ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  phoneNumber (const PhoneNumberType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  phoneNumber (::std::unique_ptr< PhoneNumberType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  DUNProperties_t (const UserType&,
                   const NameType&,
                   const PhoneNumberType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  DUNProperties_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  DUNProperties_t (const DUNProperties_t& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual DUNProperties_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  DUNProperties_t&
  operator= (const DUNProperties_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~DUNProperties_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ActionOptional action_;
  ::xsd::cxx::tree::one< UserType > user_;
  ::xsd::cxx::tree::one< NameType > name_;
  ::xsd::cxx::tree::one< PhoneNumberType > phoneNumber_;
  DisabledOptional disabled_;

  //@endcond
};

/**
 * @brief Class corresponding to the %DUN_t schema type.
 *
 * @nosubgrouping
 */
class DUN_t: public ::xml_schema::Type
{
  public:
  /**
   * @name Properties
   *
   * @brief Accessor and modifier functions for the %Properties
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::DUNProperties_t PropertiesType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< PropertiesType > PropertiesSequence;

  /**
   * @brief Element iterator type.
   */
  typedef PropertiesSequence::iterator PropertiesIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef PropertiesSequence::const_iterator PropertiesConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< PropertiesType, char > PropertiesTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const PropertiesSequence&
  Properties () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  PropertiesSequence&
  Properties ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  Properties (const PropertiesSequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name name
   *
   * @brief Accessor and modifier functions for the %name
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String NameType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const NameType&
  name () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  NameType&
  name ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  name (const NameType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  name (::std::unique_ptr< NameType > p);

  //@}

  /**
   * @name image
   *
   * @brief Accessor and modifier functions for the %image
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::UnsignedByte ImageType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ImageType > ImageOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ImageType, char > ImageTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ImageOptional&
  image () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ImageOptional&
  image ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  image (const ImageType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  image (const ImageOptional& x);

  //@}

  /**
   * @name changed
   *
   * @brief Accessor and modifier functions for the %changed
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ChangedType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< ChangedType > ChangedOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ChangedType, char > ChangedTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const ChangedOptional&
  changed () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  ChangedOptional&
  changed ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  changed (const ChangedType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  changed (const ChangedOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  changed (::std::unique_ptr< ChangedType > p);

  //@}

  /**
   * @name uid
   *
   * @brief Accessor and modifier functions for the %uid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String UidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UidType, char > UidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const UidType&
  uid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  UidType&
  uid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  uid (const UidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  uid (::std::unique_ptr< UidType > p);

  //@}

  /**
   * @name desc
   *
   * @brief Accessor and modifier functions for the %desc
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String DescType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DescType > DescOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DescType, char > DescTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DescOptional&
  desc () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DescOptional&
  desc ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  desc (const DescType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  desc (const DescOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  desc (::std::unique_ptr< DescType > p);

  //@}

  /**
   * @name bypassErrors
   *
   * @brief Accessor and modifier functions for the %bypassErrors
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean BypassErrorsType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< BypassErrorsType > BypassErrorsOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< BypassErrorsType, char > BypassErrorsTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const BypassErrorsOptional&
  bypassErrors () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  BypassErrorsOptional&
  bypassErrors ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  bypassErrors (const BypassErrorsType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  bypassErrors (const BypassErrorsOptional& x);

  //@}

  /**
   * @name userContext
   *
   * @brief Accessor and modifier functions for the %userContext
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean UserContextType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< UserContextType > UserContextOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< UserContextType, char > UserContextTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const UserContextOptional&
  userContext () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  UserContextOptional&
  userContext ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  userContext (const UserContextType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  userContext (const UserContextOptional& x);

  //@}

  /**
   * @name removePolicy
   *
   * @brief Accessor and modifier functions for the %removePolicy
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean RemovePolicyType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< RemovePolicyType > RemovePolicyOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< RemovePolicyType, char > RemovePolicyTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const RemovePolicyOptional&
  removePolicy () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  RemovePolicyOptional&
  removePolicy ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  removePolicy (const RemovePolicyType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  removePolicy (const RemovePolicyOptional& x);

  //@}

  /**
   * @name status
   *
   * @brief Accessor and modifier functions for the %status
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String StatusType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< StatusType > StatusOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< StatusType, char > StatusTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const StatusOptional&
  status () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  StatusOptional&
  status ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  status (const StatusType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  status (const StatusOptional& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly instead
   * of making a copy.
   */
  void
  status (::std::unique_ptr< StatusType > p);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  DUN_t (const ClsidType&,
         const NameType&,
         const UidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  DUN_t (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  DUN_t (const DUN_t& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual DUN_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  DUN_t&
  operator= (const DUN_t& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~DUN_t ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  PropertiesSequence Properties_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  ::xsd::cxx::tree::one< NameType > name_;
  ImageOptional image_;
  ChangedOptional changed_;
  ::xsd::cxx::tree::one< UidType > uid_;
  DescOptional desc_;
  BypassErrorsOptional bypassErrors_;
  UserContextOptional userContext_;
  RemovePolicyOptional removePolicy_;
  StatusOptional status_;

  //@endcond
};

/**
 * @brief Class corresponding to the %NetworkOptions schema type.
 *
 * @nosubgrouping
 */
class NetworkOptions: public ::xml_schema::Type
{
  public:
  /**
   * @name VPN
   *
   * @brief Accessor and modifier functions for the %VPN
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::VPN_t VPNType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< VPNType > VPNSequence;

  /**
   * @brief Element iterator type.
   */
  typedef VPNSequence::iterator VPNIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef VPNSequence::const_iterator VPNConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< VPNType, char > VPNTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const VPNSequence&
  VPN () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  VPNSequence&
  VPN ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  VPN (const VPNSequence& s);

  //@}

  /**
   * @name DUN
   *
   * @brief Accessor and modifier functions for the %DUN
   * sequence element.
   */
  //@{

  /**
   * @brief Element type.
   */
  typedef ::DUN_t DUNType;

  /**
   * @brief Element sequence container type.
   */
  typedef ::xsd::cxx::tree::sequence< DUNType > DUNSequence;

  /**
   * @brief Element iterator type.
   */
  typedef DUNSequence::iterator DUNIterator;

  /**
   * @brief Element constant iterator type.
   */
  typedef DUNSequence::const_iterator DUNConstIterator;

  /**
   * @brief Element traits type.
   */
  typedef ::xsd::cxx::tree::traits< DUNType, char > DUNTraits;

  /**
   * @brief Return a read-only (constant) reference to the element
   * sequence.
   *
   * @return A constant reference to the sequence container.
   */
  const DUNSequence&
  DUN () const;

  /**
   * @brief Return a read-write reference to the element sequence.
   *
   * @return A reference to the sequence container.
   */
  DUNSequence&
  DUN ();

  /**
   * @brief Copy elements from a given sequence.
   *
   * @param s A sequence to copy elements from.
   *
   * For each element in @a s this function makes a copy and adds it 
   * to the sequence. Note that this operation completely changes the 
   * sequence and all old elements will be lost.
   */
  void
  DUN (const DUNSequence& s);

  //@}

  /**
   * @name clsid
   *
   * @brief Accessor and modifier functions for the %clsid
   * required attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::String ClsidType;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< ClsidType, char > ClsidTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute.
   *
   * @return A constant reference to the attribute.
   */
  const ClsidType&
  clsid () const;

  /**
   * @brief Return a read-write reference to the attribute.
   *
   * @return A reference to the attribute.
   */
  ClsidType&
  clsid ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  clsid (const ClsidType& x);

  /**
   * @brief Set the attribute value without copying.
   *
   * @param p A new value to use.
   *
   * This function will try to use the passed value directly
   * instead of making a copy.
   */
  void
  clsid (::std::unique_ptr< ClsidType > p);

  //@}

  /**
   * @name disabled
   *
   * @brief Accessor and modifier functions for the %disabled
   * optional attribute.
   */
  //@{

  /**
   * @brief Attribute type.
   */
  typedef ::xml_schema::Boolean DisabledType;

  /**
   * @brief Attribute optional container type.
   */
  typedef ::xsd::cxx::tree::optional< DisabledType > DisabledOptional;

  /**
   * @brief Attribute traits type.
   */
  typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

  /**
   * @brief Return a read-only (constant) reference to the attribute
   * container.
   *
   * @return A constant reference to the optional container.
   */
  const DisabledOptional&
  disabled () const;

  /**
   * @brief Return a read-write reference to the attribute container.
   *
   * @return A reference to the optional container.
   */
  DisabledOptional&
  disabled ();

  /**
   * @brief Set the attribute value.
   *
   * @param x A new value to set.
   *
   * This function makes a copy of its argument and sets it as
   * the new value of the attribute.
   */
  void
  disabled (const DisabledType& x);

  /**
   * @brief Set the attribute value.
   *
   * @param x An optional container with the new value to set.
   *
   * If the value is present in @a x then this function makes a copy 
   * of this value and sets it as the new value of the attribute.
   * Otherwise the attribute container is set the 'not present' state.
   */
  void
  disabled (const DisabledOptional& x);

  //@}

  /**
   * @name Constructors
   */
  //@{

  /**
   * @brief Create an instance from the ultimate base and
   * initializers for required elements and attributes.
   */
  NetworkOptions (const ClsidType&);

  /**
   * @brief Create an instance from a DOM element.
   *
   * @param e A DOM element to extract the data from.
   * @param f Flags to create the new instance with.
   * @param c A pointer to the object that will contain the new
   * instance.
   */
  NetworkOptions (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  /**
   * @brief Copy constructor.
   *
   * @param x An instance to make a copy of.
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  NetworkOptions (const NetworkOptions& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  /**
   * @brief Copy the instance polymorphically.
   *
   * @param f Flags to create the copy with.
   * @param c A pointer to the object that will contain the copy.
   * @return A pointer to the dynamically allocated copy.
   *
   * This function ensures that the dynamic type of the instance is
   * used for copying and should be used for polymorphic object
   * models instead of the copy constructor.
   */
  virtual NetworkOptions*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  /**
   * @brief Copy assignment operator.
   *
   * @param x An instance to make a copy of.
   * @return A reference to itself.
   *
   * For polymorphic object models use the @c _clone function instead.
   */
  NetworkOptions&
  operator= (const NetworkOptions& x);

  //@}

  /**
   * @brief Destructor.
   */
  virtual 
  ~NetworkOptions ();

  // Implementation.
  //

  //@cond

  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  VPNSequence VPN_;
  DUNSequence DUN_;
  ::xsd::cxx::tree::one< ClsidType > clsid_;
  DisabledOptional disabled_;

  //@endcond
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const VPNProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const VPN_t&);

::std::ostream&
operator<< (::std::ostream&, const DUNProperties_t&);

::std::ostream&
operator<< (::std::ostream&, const DUN_t&);

::std::ostream&
operator<< (::std::ostream&, const NetworkOptions&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

/**
 * @name Parsing functions for the %NetworkOptions document root.
 */
//@{

/**
 * @brief Parse a URI or a local file.
 *
 * @param uri A URI or a local file name.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::std::string& uri,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with an error handler.
 *
 * @param uri A URI or a local file name.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::std::string& uri,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a URI or a local file with a Xerces-C++ DOM error
 * handler.
 *
 * @param uri A URI or a local file name.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream.
 *
 * @param is A standrad input stream.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with an error handler.
 *
 * @param is A standrad input stream.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a Xerces-C++ DOM error
 * handler.
 *
 * @param is A standrad input stream.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and an
 * error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a standard input stream with a resource id and a
 * Xerces-C++ DOM error handler.
 *
 * @param is A standrad input stream.
 * @param id A resource id.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * The resource id is used to identify the document being parsed in
 * diagnostics as well as to resolve relative paths.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source.
 *
 * @param is A Xerces-C++ input source.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function uses exceptions to report parsing errors.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xercesc::InputSource& is,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with an error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh An error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xercesc::InputSource& is,
                 ::xml_schema::ErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
 * error handler.
 *
 * @param is A Xerces-C++ input source.
 * @param eh A Xerces-C++ DOM error handler.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function reports parsing errors by calling the error handler.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

/**
 * @brief Parse a Xerces-C++ DOM document.
 *
 * @param d A pointer to the Xerces-C++ DOM document.
 * @param f Parsing flags.
 * @param p Parsing properties. 
 * @return A pointer to the root of the object model.
 *
 * This function is normally used together with the keep_dom and
 * own_dom parsing flags to assign ownership of the DOM document
 * to the object model.
 */
::std::unique_ptr< ::NetworkOptions >
NetworkOptions_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::Flags f = 0,
                 const ::xml_schema::Properties& p = ::xml_schema::Properties ());

//@}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const VPNProperties_t&);

void
operator<< (::xercesc::DOMElement&, const VPN_t&);

void
operator<< (::xercesc::DOMElement&, const DUNProperties_t&);

void
operator<< (::xercesc::DOMElement&, const DUN_t&);

/**
 * @name Serialization functions for the %NetworkOptions document root.
 */
//@{

/**
 * @brief Serialize to a standard output stream.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void
NetworkOptions_ (::std::ostream& os,
                 const ::NetworkOptions& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with an error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
NetworkOptions_ (::std::ostream& os,
                 const ::NetworkOptions& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a standard output stream with a Xerces-C++ DOM
 * error handler.
 *
 * @param os A standrad output stream.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
NetworkOptions_ (::std::ostream& os,
                 const ::NetworkOptions& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function uses exceptions to report serialization errors.
 */
void
NetworkOptions_ (::xercesc::XMLFormatTarget& ft,
                 const ::NetworkOptions& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with an error
 * handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh An error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
NetworkOptions_ (::xercesc::XMLFormatTarget& ft,
                 const ::NetworkOptions& x, 
                 ::xml_schema::ErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a Xerces-C++ XML format target with a
 * Xerces-C++ DOM error handler.
 *
 * @param ft A Xerces-C++ XML format target.
 * @param x An object model to serialize.
 * @param eh A Xerces-C++ DOM error handler.
 * @param m A namespace information map.
 * @param e A character encoding to produce XML in.
 * @param f Serialization flags.
 *
 * This function reports serialization errors by calling the error
 * handler.
 */
void
NetworkOptions_ (::xercesc::XMLFormatTarget& ft,
                 const ::NetworkOptions& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to an existing Xerces-C++ DOM document.
 *
 * @param d A Xerces-C++ DOM document.
 * @param x An object model to serialize.
 * @param f Serialization flags.
 *
 * Note that it is your responsibility to create the DOM document
 * with the correct root element as well as set the necessary
 * namespace mapping attributes.
 */
void
NetworkOptions_ (::xercesc::DOMDocument& d,
                 const ::NetworkOptions& x,
                 ::xml_schema::Flags f = 0);

/**
 * @brief Serialize to a new Xerces-C++ DOM document.
 *
 * @param x An object model to serialize.
 * @param m A namespace information map.
 * @param f Serialization flags.
 * @return A pointer to the new Xerces-C++ DOM document.
 */
::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
NetworkOptions_ (const ::NetworkOptions& x, 
                 const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                 ::xml_schema::Flags f = 0);

//@}

void
operator<< (::xercesc::DOMElement&, const NetworkOptions&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_AUGUST_DEVELOP_POLICY_PREFERENCES_EDITOR_SRC_APPS_GPUI_SCHEMAS_NETWORKOPTIONSSCHEMA_H

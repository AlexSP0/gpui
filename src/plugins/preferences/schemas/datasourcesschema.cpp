// Copyright (c) 2005-2017 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "datasourcesschema.h"

// Properties_t
// 

const Properties_t::AttributesType& Properties_t::
Attributes () const
{
  return this->Attributes_.get ();
}

Properties_t::AttributesType& Properties_t::
Attributes ()
{
  return this->Attributes_.get ();
}

void Properties_t::
Attributes (const AttributesType& x)
{
  this->Attributes_.set (x);
}

void Properties_t::
Attributes (::std::unique_ptr< AttributesType > x)
{
  this->Attributes_.set (std::move (x));
}

const Properties_t::ActionOptional& Properties_t::
action () const
{
  return this->action_;
}

Properties_t::ActionOptional& Properties_t::
action ()
{
  return this->action_;
}

void Properties_t::
action (const ActionType& x)
{
  this->action_.set (x);
}

void Properties_t::
action (const ActionOptional& x)
{
  this->action_ = x;
}

void Properties_t::
action (::std::unique_ptr< ActionType > x)
{
  this->action_.set (std::move (x));
}

const Properties_t::UserDSNOptional& Properties_t::
userDSN () const
{
  return this->userDSN_;
}

Properties_t::UserDSNOptional& Properties_t::
userDSN ()
{
  return this->userDSN_;
}

void Properties_t::
userDSN (const UserDSNType& x)
{
  this->userDSN_.set (x);
}

void Properties_t::
userDSN (const UserDSNOptional& x)
{
  this->userDSN_ = x;
}

const Properties_t::DsnType& Properties_t::
dsn () const
{
  return this->dsn_.get ();
}

Properties_t::DsnType& Properties_t::
dsn ()
{
  return this->dsn_.get ();
}

void Properties_t::
dsn (const DsnType& x)
{
  this->dsn_.set (x);
}

void Properties_t::
dsn (::std::unique_ptr< DsnType > x)
{
  this->dsn_.set (std::move (x));
}

const Properties_t::DriverType& Properties_t::
driver () const
{
  return this->driver_.get ();
}

Properties_t::DriverType& Properties_t::
driver ()
{
  return this->driver_.get ();
}

void Properties_t::
driver (const DriverType& x)
{
  this->driver_.set (x);
}

void Properties_t::
driver (::std::unique_ptr< DriverType > x)
{
  this->driver_.set (std::move (x));
}

const Properties_t::DescriptionOptional& Properties_t::
description () const
{
  return this->description_;
}

Properties_t::DescriptionOptional& Properties_t::
description ()
{
  return this->description_;
}

void Properties_t::
description (const DescriptionType& x)
{
  this->description_.set (x);
}

void Properties_t::
description (const DescriptionOptional& x)
{
  this->description_ = x;
}

void Properties_t::
description (::std::unique_ptr< DescriptionType > x)
{
  this->description_.set (std::move (x));
}

const Properties_t::UsernameOptional& Properties_t::
username () const
{
  return this->username_;
}

Properties_t::UsernameOptional& Properties_t::
username ()
{
  return this->username_;
}

void Properties_t::
username (const UsernameType& x)
{
  this->username_.set (x);
}

void Properties_t::
username (const UsernameOptional& x)
{
  this->username_ = x;
}

void Properties_t::
username (::std::unique_ptr< UsernameType > x)
{
  this->username_.set (std::move (x));
}

const Properties_t::CpasswordOptional& Properties_t::
cpassword () const
{
  return this->cpassword_;
}

Properties_t::CpasswordOptional& Properties_t::
cpassword ()
{
  return this->cpassword_;
}

void Properties_t::
cpassword (const CpasswordType& x)
{
  this->cpassword_.set (x);
}

void Properties_t::
cpassword (const CpasswordOptional& x)
{
  this->cpassword_ = x;
}

void Properties_t::
cpassword (::std::unique_ptr< CpasswordType > x)
{
  this->cpassword_.set (std::move (x));
}

const Properties_t::DisabledOptional& Properties_t::
disabled () const
{
  return this->disabled_;
}

Properties_t::DisabledOptional& Properties_t::
disabled ()
{
  return this->disabled_;
}

void Properties_t::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void Properties_t::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// DataSource_t
// 

const DataSource_t::PropertiesType& DataSource_t::
Properties () const
{
  return this->Properties_.get ();
}

DataSource_t::PropertiesType& DataSource_t::
Properties ()
{
  return this->Properties_.get ();
}

void DataSource_t::
Properties (const PropertiesType& x)
{
  this->Properties_.set (x);
}

void DataSource_t::
Properties (::std::unique_ptr< PropertiesType > x)
{
  this->Properties_.set (std::move (x));
}

const DataSource_t::FiltersOptional& DataSource_t::
Filters () const
{
  return this->Filters_;
}

DataSource_t::FiltersOptional& DataSource_t::
Filters ()
{
  return this->Filters_;
}

void DataSource_t::
Filters (const FiltersType& x)
{
  this->Filters_.set (x);
}

void DataSource_t::
Filters (const FiltersOptional& x)
{
  this->Filters_ = x;
}

void DataSource_t::
Filters (::std::unique_ptr< FiltersType > x)
{
  this->Filters_.set (std::move (x));
}

const DataSource_t::ClsidType& DataSource_t::
clsid () const
{
  return this->clsid_.get ();
}

DataSource_t::ClsidType& DataSource_t::
clsid ()
{
  return this->clsid_.get ();
}

void DataSource_t::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void DataSource_t::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const DataSource_t::NameType& DataSource_t::
name () const
{
  return this->name_.get ();
}

DataSource_t::NameType& DataSource_t::
name ()
{
  return this->name_.get ();
}

void DataSource_t::
name (const NameType& x)
{
  this->name_.set (x);
}

void DataSource_t::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const DataSource_t::ImageOptional& DataSource_t::
image () const
{
  return this->image_;
}

DataSource_t::ImageOptional& DataSource_t::
image ()
{
  return this->image_;
}

void DataSource_t::
image (const ImageType& x)
{
  this->image_.set (x);
}

void DataSource_t::
image (const ImageOptional& x)
{
  this->image_ = x;
}

const DataSource_t::BypassErrorsOptional& DataSource_t::
bypassErrors () const
{
  return this->bypassErrors_;
}

DataSource_t::BypassErrorsOptional& DataSource_t::
bypassErrors ()
{
  return this->bypassErrors_;
}

void DataSource_t::
bypassErrors (const BypassErrorsType& x)
{
  this->bypassErrors_.set (x);
}

void DataSource_t::
bypassErrors (const BypassErrorsOptional& x)
{
  this->bypassErrors_ = x;
}

const DataSource_t::UserContextOptional& DataSource_t::
userContext () const
{
  return this->userContext_;
}

DataSource_t::UserContextOptional& DataSource_t::
userContext ()
{
  return this->userContext_;
}

void DataSource_t::
userContext (const UserContextType& x)
{
  this->userContext_.set (x);
}

void DataSource_t::
userContext (const UserContextOptional& x)
{
  this->userContext_ = x;
}

const DataSource_t::RemovePolicyOptional& DataSource_t::
removePolicy () const
{
  return this->removePolicy_;
}

DataSource_t::RemovePolicyOptional& DataSource_t::
removePolicy ()
{
  return this->removePolicy_;
}

void DataSource_t::
removePolicy (const RemovePolicyType& x)
{
  this->removePolicy_.set (x);
}

void DataSource_t::
removePolicy (const RemovePolicyOptional& x)
{
  this->removePolicy_ = x;
}

const DataSource_t::DescOptional& DataSource_t::
desc () const
{
  return this->desc_;
}

DataSource_t::DescOptional& DataSource_t::
desc ()
{
  return this->desc_;
}

void DataSource_t::
desc (const DescType& x)
{
  this->desc_.set (x);
}

void DataSource_t::
desc (const DescOptional& x)
{
  this->desc_ = x;
}

void DataSource_t::
desc (::std::unique_ptr< DescType > x)
{
  this->desc_.set (std::move (x));
}

const DataSource_t::ChangedOptional& DataSource_t::
changed () const
{
  return this->changed_;
}

DataSource_t::ChangedOptional& DataSource_t::
changed ()
{
  return this->changed_;
}

void DataSource_t::
changed (const ChangedType& x)
{
  this->changed_.set (x);
}

void DataSource_t::
changed (const ChangedOptional& x)
{
  this->changed_ = x;
}

void DataSource_t::
changed (::std::unique_ptr< ChangedType > x)
{
  this->changed_.set (std::move (x));
}

const DataSource_t::UidType& DataSource_t::
uid () const
{
  return this->uid_.get ();
}

DataSource_t::UidType& DataSource_t::
uid ()
{
  return this->uid_.get ();
}

void DataSource_t::
uid (const UidType& x)
{
  this->uid_.set (x);
}

void DataSource_t::
uid (::std::unique_ptr< UidType > x)
{
  this->uid_.set (std::move (x));
}

const DataSource_t::StatusOptional& DataSource_t::
status () const
{
  return this->status_;
}

DataSource_t::StatusOptional& DataSource_t::
status ()
{
  return this->status_;
}

void DataSource_t::
status (const StatusType& x)
{
  this->status_.set (x);
}

void DataSource_t::
status (const StatusOptional& x)
{
  this->status_ = x;
}

void DataSource_t::
status (::std::unique_ptr< StatusType > x)
{
  this->status_.set (std::move (x));
}


// Attributes
// 

const Attributes::AttributeType& Attributes::
Attribute () const
{
  return this->Attribute_.get ();
}

Attributes::AttributeType& Attributes::
Attribute ()
{
  return this->Attribute_.get ();
}

void Attributes::
Attribute (const AttributeType& x)
{
  this->Attribute_.set (x);
}

void Attributes::
Attribute (::std::unique_ptr< AttributeType > x)
{
  this->Attribute_.set (std::move (x));
}


// DataSources
// 

const DataSources::DataSourceSequence& DataSources::
DataSource () const
{
  return this->DataSource_;
}

DataSources::DataSourceSequence& DataSources::
DataSource ()
{
  return this->DataSource_;
}

void DataSources::
DataSource (const DataSourceSequence& s)
{
  this->DataSource_ = s;
}

const DataSources::ClsidType& DataSources::
clsid () const
{
  return this->clsid_.get ();
}

DataSources::ClsidType& DataSources::
clsid ()
{
  return this->clsid_.get ();
}

void DataSources::
clsid (const ClsidType& x)
{
  this->clsid_.set (x);
}

void DataSources::
clsid (::std::unique_ptr< ClsidType > x)
{
  this->clsid_.set (std::move (x));
}

const DataSources::DisabledOptional& DataSources::
disabled () const
{
  return this->disabled_;
}

DataSources::DisabledOptional& DataSources::
disabled ()
{
  return this->disabled_;
}

void DataSources::
disabled (const DisabledType& x)
{
  this->disabled_.set (x);
}

void DataSources::
disabled (const DisabledOptional& x)
{
  this->disabled_ = x;
}


// Attribute
// 

const Attribute::NameType& Attribute::
name () const
{
  return this->name_.get ();
}

Attribute::NameType& Attribute::
name ()
{
  return this->name_.get ();
}

void Attribute::
name (const NameType& x)
{
  this->name_.set (x);
}

void Attribute::
name (::std::unique_ptr< NameType > x)
{
  this->name_.set (std::move (x));
}

const Attribute::ValueType& Attribute::
value () const
{
  return this->value_.get ();
}

Attribute::ValueType& Attribute::
value ()
{
  return this->value_.get ();
}

void Attribute::
value (const ValueType& x)
{
  this->value_.set (x);
}

void Attribute::
value (::std::unique_ptr< ValueType > x)
{
  this->value_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// Properties_t
//

Properties_t::
Properties_t (const AttributesType& Attributes,
              const DsnType& dsn,
              const DriverType& driver)
: ::xml_schema::Type (),
  Attributes_ (Attributes, this),
  action_ (this),
  userDSN_ (this),
  dsn_ (dsn, this),
  driver_ (driver, this),
  description_ (this),
  username_ (this),
  cpassword_ (this),
  disabled_ (this)
{
}

Properties_t::
Properties_t (::std::unique_ptr< AttributesType > Attributes,
              const DsnType& dsn,
              const DriverType& driver)
: ::xml_schema::Type (),
  Attributes_ (std::move (Attributes), this),
  action_ (this),
  userDSN_ (this),
  dsn_ (dsn, this),
  driver_ (driver, this),
  description_ (this),
  username_ (this),
  cpassword_ (this),
  disabled_ (this)
{
}

Properties_t::
Properties_t (const Properties_t& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Attributes_ (x.Attributes_, f, this),
  action_ (x.action_, f, this),
  userDSN_ (x.userDSN_, f, this),
  dsn_ (x.dsn_, f, this),
  driver_ (x.driver_, f, this),
  description_ (x.description_, f, this),
  username_ (x.username_, f, this),
  cpassword_ (x.cpassword_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

Properties_t::
Properties_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Attributes_ (this),
  action_ (this),
  userDSN_ (this),
  dsn_ (this),
  driver_ (this),
  description_ (this),
  username_ (this),
  cpassword_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Properties_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Attributes
    //
    if (n.name () == "Attributes" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< AttributesType > r (
        AttributesTraits::create (i, f, this));

      if (!Attributes_.present ())
      {
        this->Attributes_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!Attributes_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Attributes",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "action" && n.namespace_ ().empty ())
    {
      this->action_.set (ActionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userDSN" && n.namespace_ ().empty ())
    {
      this->userDSN_.set (UserDSNTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "dsn" && n.namespace_ ().empty ())
    {
      this->dsn_.set (DsnTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "driver" && n.namespace_ ().empty ())
    {
      this->driver_.set (DriverTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      this->description_.set (DescriptionTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "username" && n.namespace_ ().empty ())
    {
      this->username_.set (UsernameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "cpassword" && n.namespace_ ().empty ())
    {
      this->cpassword_.set (CpasswordTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!dsn_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "dsn",
      "");
  }

  if (!driver_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "driver",
      "");
  }
}

Properties_t* Properties_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Properties_t (*this, f, c);
}

Properties_t& Properties_t::
operator= (const Properties_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Attributes_ = x.Attributes_;
    this->action_ = x.action_;
    this->userDSN_ = x.userDSN_;
    this->dsn_ = x.dsn_;
    this->driver_ = x.driver_;
    this->description_ = x.description_;
    this->username_ = x.username_;
    this->cpassword_ = x.cpassword_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

Properties_t::
~Properties_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, Properties_t >
_xsd_Properties_t_type_factory_init (
  "Properties_t",
  "");

// DataSource_t
//

DataSource_t::
DataSource_t (const PropertiesType& Properties,
              const ClsidType& clsid,
              const NameType& name,
              const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (Properties, this),
  Filters_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  desc_ (this),
  changed_ (this),
  uid_ (uid, this),
  status_ (this)
{
}

DataSource_t::
DataSource_t (::std::unique_ptr< PropertiesType > Properties,
              const ClsidType& clsid,
              const NameType& name,
              const UidType& uid)
: ::xml_schema::Type (),
  Properties_ (std::move (Properties), this),
  Filters_ (this),
  clsid_ (clsid, this),
  name_ (name, this),
  image_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  desc_ (this),
  changed_ (this),
  uid_ (uid, this),
  status_ (this)
{
}

DataSource_t::
DataSource_t (const DataSource_t& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Properties_ (x.Properties_, f, this),
  Filters_ (x.Filters_, f, this),
  clsid_ (x.clsid_, f, this),
  name_ (x.name_, f, this),
  image_ (x.image_, f, this),
  bypassErrors_ (x.bypassErrors_, f, this),
  userContext_ (x.userContext_, f, this),
  removePolicy_ (x.removePolicy_, f, this),
  desc_ (x.desc_, f, this),
  changed_ (x.changed_, f, this),
  uid_ (x.uid_, f, this),
  status_ (x.status_, f, this)
{
}

DataSource_t::
DataSource_t (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Properties_ (this),
  Filters_ (this),
  clsid_ (this),
  name_ (this),
  image_ (this),
  bypassErrors_ (this),
  userContext_ (this),
  removePolicy_ (this),
  desc_ (this),
  changed_ (this),
  uid_ (this),
  status_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void DataSource_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Properties
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Properties",
          "",
          &::xsd::cxx::tree::factory_impl< PropertiesType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!Properties_.present ())
        {
          ::std::unique_ptr< PropertiesType > r (
            dynamic_cast< PropertiesType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Properties_.set (::std::move (r));
          continue;
        }
      }
    }

    // Filters
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Filters",
          "",
          &::xsd::cxx::tree::factory_impl< FiltersType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!this->Filters_)
        {
          ::std::unique_ptr< FiltersType > r (
            dynamic_cast< FiltersType* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->Filters_.set (::std::move (r));
          continue;
        }
      }
    }

    break;
  }

  if (!Properties_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Properties",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "image" && n.namespace_ ().empty ())
    {
      this->image_.set (ImageTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "bypassErrors" && n.namespace_ ().empty ())
    {
      this->bypassErrors_.set (BypassErrorsTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "userContext" && n.namespace_ ().empty ())
    {
      this->userContext_.set (UserContextTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "removePolicy" && n.namespace_ ().empty ())
    {
      this->removePolicy_.set (RemovePolicyTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "desc" && n.namespace_ ().empty ())
    {
      this->desc_.set (DescTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "changed" && n.namespace_ ().empty ())
    {
      this->changed_.set (ChangedTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "uid" && n.namespace_ ().empty ())
    {
      this->uid_.set (UidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "status" && n.namespace_ ().empty ())
    {
      this->status_.set (StatusTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!uid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "uid",
      "");
  }
}

DataSource_t* DataSource_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class DataSource_t (*this, f, c);
}

DataSource_t& DataSource_t::
operator= (const DataSource_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Properties_ = x.Properties_;
    this->Filters_ = x.Filters_;
    this->clsid_ = x.clsid_;
    this->name_ = x.name_;
    this->image_ = x.image_;
    this->bypassErrors_ = x.bypassErrors_;
    this->userContext_ = x.userContext_;
    this->removePolicy_ = x.removePolicy_;
    this->desc_ = x.desc_;
    this->changed_ = x.changed_;
    this->uid_ = x.uid_;
    this->status_ = x.status_;
  }

  return *this;
}

DataSource_t::
~DataSource_t ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, DataSource_t >
_xsd_DataSource_t_type_factory_init (
  "DataSource_t",
  "");

// Attributes
//

Attributes::
Attributes (const AttributeType& Attribute)
: ::xml_schema::Type (),
  Attribute_ (Attribute, this)
{
}

Attributes::
Attributes (::std::unique_ptr< AttributeType > Attribute)
: ::xml_schema::Type (),
  Attribute_ (std::move (Attribute), this)
{
}

Attributes::
Attributes (const Attributes& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Attribute_ (x.Attribute_, f, this)
{
}

Attributes::
Attributes (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Attribute_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Attributes::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Attribute
    //
    if (n.name () == "Attribute" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< AttributeType > r (
        AttributeTraits::create (i, f, this));

      if (!Attribute_.present ())
      {
        this->Attribute_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!Attribute_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Attribute",
      "");
  }
}

Attributes* Attributes::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Attributes (*this, f, c);
}

Attributes& Attributes::
operator= (const Attributes& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->Attribute_ = x.Attribute_;
  }

  return *this;
}

Attributes::
~Attributes ()
{
}

// DataSources
//

DataSources::
DataSources (const ClsidType& clsid)
: ::xml_schema::Type (),
  DataSource_ (this),
  clsid_ (clsid, this),
  disabled_ (this)
{
}

DataSources::
DataSources (const DataSources& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  DataSource_ (x.DataSource_, f, this),
  clsid_ (x.clsid_, f, this),
  disabled_ (x.disabled_, f, this)
{
}

DataSources::
DataSources (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  DataSource_ (this),
  clsid_ (this),
  disabled_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void DataSources::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // DataSource
    //
    {
      ::std::unique_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "DataSource",
          "",
          &::xsd::cxx::tree::factory_impl< DataSourceType >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::unique_ptr< DataSourceType > r (
          dynamic_cast< DataSourceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->DataSource_.push_back (::std::move (r));
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "clsid" && n.namespace_ ().empty ())
    {
      this->clsid_.set (ClsidTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "disabled" && n.namespace_ ().empty ())
    {
      this->disabled_.set (DisabledTraits::create (i, f, this));
      continue;
    }
  }

  if (!clsid_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "clsid",
      "");
  }
}

DataSources* DataSources::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class DataSources (*this, f, c);
}

DataSources& DataSources::
operator= (const DataSources& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->DataSource_ = x.DataSource_;
    this->clsid_ = x.clsid_;
    this->disabled_ = x.disabled_;
  }

  return *this;
}

DataSources::
~DataSources ()
{
}

// Attribute
//

Attribute::
Attribute (const NameType& name,
           const ValueType& value)
: ::xml_schema::Type (),
  name_ (name, this),
  value_ (value, this)
{
}

Attribute::
Attribute (const Attribute& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  name_ (x.name_, f, this),
  value_ (x.value_, f, this)
{
}

Attribute::
Attribute (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  name_ (this),
  value_ (this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Attribute::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (NameTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (ValueTraits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "value",
      "");
  }
}

Attribute* Attribute::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Attribute (*this, f, c);
}

Attribute& Attribute::
operator= (const Attribute& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::Type& > (*this) = x;
    this->name_ = x.name_;
    this->value_ = x.value_;
  }

  return *this;
}

Attribute::
~Attribute ()
{
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const Properties_t& i)
{
  o << ::std::endl << "Attributes: " << i.Attributes ();
  if (i.action ())
  {
    o << ::std::endl << "action: " << *i.action ();
  }

  if (i.userDSN ())
  {
    o << ::std::endl << "userDSN: " << *i.userDSN ();
  }

  o << ::std::endl << "dsn: " << i.dsn ();
  o << ::std::endl << "driver: " << i.driver ();
  if (i.description ())
  {
    o << ::std::endl << "description: " << *i.description ();
  }

  if (i.username ())
  {
    o << ::std::endl << "username: " << *i.username ();
  }

  if (i.cpassword ())
  {
    o << ::std::endl << "cpassword: " << *i.cpassword ();
  }

  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, Properties_t >
_xsd_Properties_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const DataSource_t& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "Properties: ";
    om.insert (o, i.Properties ());
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    if (i.Filters ())
    {
      o << ::std::endl << "Filters: ";
      om.insert (o, *i.Filters ());
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  o << ::std::endl << "name: " << i.name ();
  if (i.image ())
  {
    o << ::std::endl << "image: " << *i.image ();
  }

  if (i.bypassErrors ())
  {
    o << ::std::endl << "bypassErrors: " << *i.bypassErrors ();
  }

  if (i.userContext ())
  {
    o << ::std::endl << "userContext: " << *i.userContext ();
  }

  if (i.removePolicy ())
  {
    o << ::std::endl << "removePolicy: " << *i.removePolicy ();
  }

  if (i.desc ())
  {
    o << ::std::endl << "desc: " << *i.desc ();
  }

  if (i.changed ())
  {
    o << ::std::endl << "changed: " << *i.changed ();
  }

  o << ::std::endl << "uid: " << i.uid ();
  if (i.status ())
  {
    o << ::std::endl << "status: " << *i.status ();
  }

  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, DataSource_t >
_xsd_DataSource_t_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const Attributes& i)
{
  o << ::std::endl << "Attribute: " << i.Attribute ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const DataSources& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (DataSources::DataSourceConstIterator
         b (i.DataSource ().begin ()), e (i.DataSource ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "DataSource: ";
      om.insert (o, *b);
    }
  }

  o << ::std::endl << "clsid: " << i.clsid ();
  if (i.disabled ())
  {
    o << ::std::endl << "disabled: " << *i.disabled ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const Attribute& i)
{
  o << ::std::endl << "name: " << i.name ();
  o << ::std::endl << "value: " << i.value ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::DataSources >
DataSources_ (const ::std::string& u,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::DataSources > (
    ::DataSources_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::DataSources >
DataSources_ (const ::std::string& u,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::DataSources > (
    ::DataSources_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::DataSources >
DataSources_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::DataSources > (
    ::DataSources_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::DataSources >
DataSources_ (::std::istream& is,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::DataSources_ (isrc, f, p);
}

::std::unique_ptr< ::DataSources >
DataSources_ (::std::istream& is,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::DataSources_ (isrc, h, f, p);
}

::std::unique_ptr< ::DataSources >
DataSources_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::DataSources_ (isrc, h, f, p);
}

::std::unique_ptr< ::DataSources >
DataSources_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::DataSources_ (isrc, f, p);
}

::std::unique_ptr< ::DataSources >
DataSources_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::DataSources_ (isrc, h, f, p);
}

::std::unique_ptr< ::DataSources >
DataSources_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::DataSources_ (isrc, h, f, p);
}

::std::unique_ptr< ::DataSources >
DataSources_ (::xercesc::InputSource& i,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::DataSources > (
    ::DataSources_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::DataSources >
DataSources_ (::xercesc::InputSource& i,
              ::xml_schema::ErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::DataSources > (
    ::DataSources_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::DataSources >
DataSources_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::DataSources > (
    ::DataSources_ (
      std::move (d), f | ::xml_schema::Flags::own_dom, p));
}

::std::unique_ptr< ::DataSources >
DataSources_ (const ::xercesc::DOMDocument& doc,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::DataSources > (
      ::DataSources_ (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "DataSources" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::DataSources > r (
      ::xsd::cxx::tree::traits< ::DataSources, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "DataSources",
    "");
}

::std::unique_ptr< ::DataSources >
DataSources_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::Flags f,
              const ::xml_schema::Properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "DataSources" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::DataSources > r (
      ::xsd::cxx::tree::traits< ::DataSources, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "DataSources",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const Properties_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Attributes
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Attributes",
        e));

    s << i.Attributes ();
  }

  // action
  //
  if (i.action ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "action",
        e));

    a << *i.action ();
  }

  // userDSN
  //
  if (i.userDSN ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userDSN",
        e));

    a << *i.userDSN ();
  }

  // dsn
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dsn",
        e));

    a << i.dsn ();
  }

  // driver
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "driver",
        e));

    a << i.driver ();
  }

  // description
  //
  if (i.description ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "description",
        e));

    a << *i.description ();
  }

  // username
  //
  if (i.username ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "username",
        e));

    a << *i.username ();
  }

  // cpassword
  //
  if (i.cpassword ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cpassword",
        e));

    a << *i.cpassword ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Properties_t >
_xsd_Properties_t_type_serializer_init (
  "Properties_t",
  "");


void
operator<< (::xercesc::DOMElement& e, const DataSource_t& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Properties
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const DataSource_t::PropertiesType& x (i.Properties ());
    if (typeid (DataSource_t::PropertiesType) == typeid (x))
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Properties",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "Properties",
        "",
        false, true, e, x);
  }

  // Filters
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    if (i.Filters ())
    {
      const DataSource_t::FiltersType& x (*i.Filters ());
      if (typeid (DataSource_t::FiltersType) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Filters",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "Filters",
          "",
          false, true, e, x);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // image
  //
  if (i.image ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "image",
        e));

    a << *i.image ();
  }

  // bypassErrors
  //
  if (i.bypassErrors ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bypassErrors",
        e));

    a << *i.bypassErrors ();
  }

  // userContext
  //
  if (i.userContext ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "userContext",
        e));

    a << *i.userContext ();
  }

  // removePolicy
  //
  if (i.removePolicy ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removePolicy",
        e));

    a << *i.removePolicy ();
  }

  // desc
  //
  if (i.desc ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "desc",
        e));

    a << *i.desc ();
  }

  // changed
  //
  if (i.changed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "changed",
        e));

    a << *i.changed ();
  }

  // uid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uid",
        e));

    a << i.uid ();
  }

  // status
  //
  if (i.status ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "status",
        e));

    a << *i.status ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DataSource_t >
_xsd_DataSource_t_type_serializer_init (
  "DataSource_t",
  "");


void
DataSources_ (::std::ostream& o,
              const ::DataSources& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::DataSources_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
DataSources_ (::std::ostream& o,
              const ::DataSources& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::DataSources_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
DataSources_ (::std::ostream& o,
              const ::DataSources& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::DataSources_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
DataSources_ (::xercesc::XMLFormatTarget& t,
              const ::DataSources& s,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::DataSources_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
DataSources_ (::xercesc::XMLFormatTarget& t,
              const ::DataSources& s,
              ::xml_schema::ErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::DataSources_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
DataSources_ (::xercesc::XMLFormatTarget& t,
              const ::DataSources& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::NamespaceInfomap& m,
              const ::std::string& e,
              ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::DataSources_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
DataSources_ (::xercesc::DOMDocument& d,
              const ::DataSources& s,
              ::xml_schema::Flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "DataSources" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataSources",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
DataSources_ (const ::DataSources& s,
              const ::xml_schema::NamespaceInfomap& m,
              ::xml_schema::Flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "DataSources",
      "",
      m, f));

  ::DataSources_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const Attributes& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // Attribute
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Attribute",
        e));

    s << i.Attribute ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const DataSources& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // DataSource
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (DataSources::DataSourceConstIterator
         b (i.DataSource ().begin ()), n (i.DataSource ().end ());
         b != n; ++b)
    {
      if (typeid (DataSources::DataSourceType) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "DataSource",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "DataSource",
          "",
          false, true, e, *b);
    }
  }

  // clsid
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "clsid",
        e));

    a << i.clsid ();
  }

  // disabled
  //
  if (i.disabled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "disabled",
        e));

    a << *i.disabled ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const Attribute& i)
{
  e << static_cast< const ::xml_schema::Type& > (i);

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // value
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << i.value ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

